
firebird.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800200  00008bcc  00008c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000908  00800350  00800350  00008db0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00008db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b8b  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ff1  00000000  00000000  0000995b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027b  00000000  00000000  0000b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ccb  00000000  00000000  0000bbc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000670  00000000  00000000  0000e894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a50  00000000  00000000  0000ef04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__vector_5>
      18:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__vector_20>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__vector_35>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 aa 1b 	jmp	0x3754	; 0x3754 <__vector_45>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 b0 13 	jmp	0x2760	; 0x2760 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__vector_54>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec ec       	ldi	r30, 0xCC	; 204
      fc:	fb e8       	ldi	r31, 0x8B	; 139
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 35       	cpi	r26, 0x50	; 80
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	1c e0       	ldi	r17, 0x0C	; 12
     110:	a0 e5       	ldi	r26, 0x50	; 80
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a8 35       	cpi	r26, 0x58	; 88
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <main>
     122:	0c 94 e4 45 	jmp	0x8bc8	; 0x8bc8 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	2d ec       	ldi	r18, 0xCD	; 205
     170:	3c ec       	ldi	r19, 0xCC	; 204
     172:	4c e2       	ldi	r20, 0x2C	; 44
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	84 e1       	ldi	r24, 0x14	; 20
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	2d ec       	ldi	r18, 0xCD	; 205
     308:	3c ec       	ldi	r19, 0xCC	; 204
     30a:	4c e2       	ldi	r20, 0x2C	; 44
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	84 e1       	ldi	r24, 0x14	; 20
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	2d ec       	ldi	r18, 0xCD	; 205
     47c:	3c ec       	ldi	r19, 0xCC	; 204
     47e:	4c e2       	ldi	r20, 0x2C	; 44
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	84 e1       	ldi	r24, 0x14	; 20
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	2d ec       	ldi	r18, 0xCD	; 205
     614:	3c ec       	ldi	r19, 0xCC	; 204
     616:	4c e2       	ldi	r20, 0x2C	; 44
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	84 e1       	ldi	r24, 0x14	; 20
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	2d ec       	ldi	r18, 0xCD	; 205
     71a:	3c ec       	ldi	r19, 0xCC	; 204
     71c:	4c e2       	ldi	r20, 0x2C	; 44
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	84 e1       	ldi	r24, 0x14	; 20
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	2d ec       	ldi	r18, 0xCD	; 205
     830:	3c ec       	ldi	r19, 0xCC	; 204
     832:	4c e2       	ldi	r20, 0x2C	; 44
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	84 e1       	ldi	r24, 0x14	; 20
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	2d ec       	ldi	r18, 0xCD	; 205
     922:	3c ec       	ldi	r19, 0xCC	; 204
     924:	4c e2       	ldi	r20, 0x2C	; 44
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	84 e1       	ldi	r24, 0x14	; 20
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	2d ec       	ldi	r18, 0xCD	; 205
     a38:	3c ec       	ldi	r19, 0xCC	; 204
     a3a:	4c e2       	ldi	r20, 0x2C	; 44
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	84 e1       	ldi	r24, 0x14	; 20
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	2d ec       	ldi	r18, 0xCD	; 205
     b56:	3c ec       	ldi	r19, 0xCC	; 204
     b58:	4c e2       	ldi	r20, 0x2C	; 44
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	84 e1       	ldi	r24, 0x14	; 20
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_clear>:
void lcd_clear()
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	69 97       	sbiw	r28, 0x19	; 25
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
char dummy[25];
strcpy(dummy,"                   ");
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	32 e0       	ldi	r19, 0x02	; 2
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	b9 01       	movw	r22, r18
     c6e:	44 e1       	ldi	r20, 0x14	; 20
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	0e 94 f4 44 	call	0x89e8	; 0x89e8 <memcpy>
lcd_string(dummy);
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
lcd_cursor(1,1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
}
     c86:	69 96       	adiw	r28, 0x19	; 25
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	6e 97       	sbiw	r28, 0x1e	; 30
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     cae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cb0:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cb4:	80 7f       	andi	r24, 0xF0	; 240
     cb6:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     cb8:	a8 e2       	ldi	r26, 0x28	; 40
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e2       	ldi	r30, 0x28	; 40
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 70       	andi	r24, 0x0F	; 15
     cc4:	8c 93       	st	X, r24
	lcd_port |= temp;
     cc6:	a8 e2       	ldi	r26, 0x28	; 40
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 e2       	ldi	r30, 0x28	; 40
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	90 81       	ld	r25, Z
     cd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     cd2:	89 2b       	or	r24, r25
     cd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     cd6:	a8 e2       	ldi	r26, 0x28	; 40
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e8 e2       	ldi	r30, 0x28	; 40
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8e 7f       	andi	r24, 0xFE	; 254
     ce2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     ce4:	a8 e2       	ldi	r26, 0x28	; 40
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e8 e2       	ldi	r30, 0x28	; 40
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	8d 7f       	andi	r24, 0xFD	; 253
     cf0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     cf2:	a8 e2       	ldi	r26, 0x28	; 40
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e8 e2       	ldi	r30, 0x28	; 40
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	84 60       	ori	r24, 0x04	; 4
     cfe:	8c 93       	st	X, r24
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	a0 ea       	ldi	r26, 0xA0	; 160
     d06:	b0 e4       	ldi	r27, 0x40	; 64
     d08:	89 8f       	std	Y+25, r24	; 0x19
     d0a:	9a 8f       	std	Y+26, r25	; 0x1a
     d0c:	ab 8f       	std	Y+27, r26	; 0x1b
     d0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d10:	69 8d       	ldd	r22, Y+25	; 0x19
     d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d18:	2d ec       	ldi	r18, 0xCD	; 205
     d1a:	3c ec       	ldi	r19, 0xCC	; 204
     d1c:	4c e2       	ldi	r20, 0x2C	; 44
     d1e:	55 e4       	ldi	r21, 0x45	; 69
     d20:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8d 8b       	std	Y+21, r24	; 0x15
     d2a:	9e 8b       	std	Y+22, r25	; 0x16
     d2c:	af 8b       	std	Y+23, r26	; 0x17
     d2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d30:	6d 89       	ldd	r22, Y+21	; 0x15
     d32:	7e 89       	ldd	r23, Y+22	; 0x16
     d34:	8f 89       	ldd	r24, Y+23	; 0x17
     d36:	98 8d       	ldd	r25, Y+24	; 0x18
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e8       	ldi	r20, 0x80	; 128
     d3e:	5f e3       	ldi	r21, 0x3F	; 63
     d40:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     d44:	88 23       	and	r24, r24
     d46:	2c f4       	brge	.+10     	; 0xd52 <lcd_wr_command+0xba>
		__ticks = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d52:	6d 89       	ldd	r22, Y+21	; 0x15
     d54:	7e 89       	ldd	r23, Y+22	; 0x16
     d56:	8f 89       	ldd	r24, Y+23	; 0x17
     d58:	98 8d       	ldd	r25, Y+24	; 0x18
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f e7       	ldi	r20, 0x7F	; 127
     d60:	57 e4       	ldi	r21, 0x47	; 71
     d62:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     d66:	18 16       	cp	r1, r24
     d68:	4c f5       	brge	.+82     	; 0xdbc <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d6a:	69 8d       	ldd	r22, Y+25	; 0x19
     d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9c 8b       	std	Y+20, r25	; 0x14
     d90:	8b 8b       	std	Y+19, r24	; 0x13
     d92:	0f c0       	rjmp	.+30     	; 0xdb2 <lcd_wr_command+0x11a>
     d94:	84 e1       	ldi	r24, 0x14	; 20
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9a 8b       	std	Y+18, r25	; 0x12
     d9a:	89 8b       	std	Y+17, r24	; 0x11
     d9c:	89 89       	ldd	r24, Y+17	; 0x11
     d9e:	9a 89       	ldd	r25, Y+18	; 0x12
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <lcd_wr_command+0x108>
     da4:	9a 8b       	std	Y+18, r25	; 0x12
     da6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da8:	8b 89       	ldd	r24, Y+19	; 0x13
     daa:	9c 89       	ldd	r25, Y+20	; 0x14
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	9c 8b       	std	Y+20, r25	; 0x14
     db0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	69 f7       	brne	.-38     	; 0xd94 <lcd_wr_command+0xfc>
     dba:	14 c0       	rjmp	.+40     	; 0xde4 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dbc:	6d 89       	ldd	r22, Y+21	; 0x15
     dbe:	7e 89       	ldd	r23, Y+22	; 0x16
     dc0:	8f 89       	ldd	r24, Y+23	; 0x17
     dc2:	98 8d       	ldd	r25, Y+24	; 0x18
     dc4:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	9c 8b       	std	Y+20, r25	; 0x14
     dce:	8b 8b       	std	Y+19, r24	; 0x13
     dd0:	8b 89       	ldd	r24, Y+19	; 0x13
     dd2:	9c 89       	ldd	r25, Y+20	; 0x14
     dd4:	98 8b       	std	Y+16, r25	; 0x10
     dd6:	8f 87       	std	Y+15, r24	; 0x0f
     dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dda:	98 89       	ldd	r25, Y+16	; 0x10
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <lcd_wr_command+0x144>
     de0:	98 8b       	std	Y+16, r25	; 0x10
     de2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8b 7f       	andi	r24, 0xFB	; 251
     df0:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     df2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df4:	8f 70       	andi	r24, 0x0F	; 15
     df6:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     df8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfa:	82 95       	swap	r24
     dfc:	80 7f       	andi	r24, 0xF0	; 240
     dfe:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     e00:	a8 e2       	ldi	r26, 0x28	; 40
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e8 e2       	ldi	r30, 0x28	; 40
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8f 70       	andi	r24, 0x0F	; 15
     e0c:	8c 93       	st	X, r24
	lcd_port |= cmd;
     e0e:	a8 e2       	ldi	r26, 0x28	; 40
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e8 e2       	ldi	r30, 0x28	; 40
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	90 81       	ld	r25, Z
     e18:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e1a:	89 2b       	or	r24, r25
     e1c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     e1e:	a8 e2       	ldi	r26, 0x28	; 40
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e8 e2       	ldi	r30, 0x28	; 40
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     e2c:	a8 e2       	ldi	r26, 0x28	; 40
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	e8 e2       	ldi	r30, 0x28	; 40
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	8d 7f       	andi	r24, 0xFD	; 253
     e38:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     e3a:	a8 e2       	ldi	r26, 0x28	; 40
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e2       	ldi	r30, 0x28	; 40
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	84 60       	ori	r24, 0x04	; 4
     e46:	8c 93       	st	X, r24
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 ea       	ldi	r26, 0xA0	; 160
     e4e:	b0 e4       	ldi	r27, 0x40	; 64
     e50:	8b 87       	std	Y+11, r24	; 0x0b
     e52:	9c 87       	std	Y+12, r25	; 0x0c
     e54:	ad 87       	std	Y+13, r26	; 0x0d
     e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e58:	6b 85       	ldd	r22, Y+11	; 0x0b
     e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e60:	2d ec       	ldi	r18, 0xCD	; 205
     e62:	3c ec       	ldi	r19, 0xCC	; 204
     e64:	4c e2       	ldi	r20, 0x2C	; 44
     e66:	55 e4       	ldi	r21, 0x45	; 69
     e68:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	8f 83       	std	Y+7, r24	; 0x07
     e72:	98 87       	std	Y+8, r25	; 0x08
     e74:	a9 87       	std	Y+9, r26	; 0x09
     e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e8       	ldi	r20, 0x80	; 128
     e86:	5f e3       	ldi	r21, 0x3F	; 63
     e88:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     e8c:	88 23       	and	r24, r24
     e8e:	2c f4       	brge	.+10     	; 0xe9a <lcd_wr_command+0x202>
		__ticks = 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	3f c0       	rjmp	.+126    	; 0xf18 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f e7       	ldi	r20, 0x7F	; 127
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
     eae:	18 16       	cp	r1, r24
     eb0:	4c f5       	brge	.+82     	; 0xf04 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	40 e2       	ldi	r20, 0x20	; 32
     ec0:	51 e4       	ldi	r21, 0x41	; 65
     ec2:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	9e 83       	std	Y+6, r25	; 0x06
     ed8:	8d 83       	std	Y+5, r24	; 0x05
     eda:	0f c0       	rjmp	.+30     	; 0xefa <lcd_wr_command+0x262>
     edc:	84 e1       	ldi	r24, 0x14	; 20
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9c 83       	std	Y+4, r25	; 0x04
     ee2:	8b 83       	std	Y+3, r24	; 0x03
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	9c 81       	ldd	r25, Y+4	; 0x04
     ee8:	01 97       	sbiw	r24, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <lcd_wr_command+0x250>
     eec:	9c 83       	std	Y+4, r25	; 0x04
     eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	01 97       	sbiw	r24, 0x01	; 1
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	00 97       	sbiw	r24, 0x00	; 0
     f00:	69 f7       	brne	.-38     	; 0xedc <lcd_wr_command+0x244>
     f02:	14 c0       	rjmp	.+40     	; 0xf2c <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f04:	6f 81       	ldd	r22, Y+7	; 0x07
     f06:	78 85       	ldd	r23, Y+8	; 0x08
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9e 83       	std	Y+6, r25	; 0x06
     f16:	8d 83       	std	Y+5, r24	; 0x05
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	f1 f7       	brne	.-4      	; 0xf24 <lcd_wr_command+0x28c>
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     f2c:	a8 e2       	ldi	r26, 0x28	; 40
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e8 e2       	ldi	r30, 0x28	; 40
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8b 7f       	andi	r24, 0xFB	; 251
     f38:	8c 93       	st	X, r24
}
     f3a:	6e 96       	adiw	r28, 0x1e	; 30
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	6e 97       	sbiw	r28, 0x1e	; 30
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f64:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f68:	80 7f       	andi	r24, 0xF0	; 240
     f6a:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f6c:	a8 e2       	ldi	r26, 0x28	; 40
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e8 e2       	ldi	r30, 0x28	; 40
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	8c 93       	st	X, r24
	lcd_port |= temp;
     f7a:	a8 e2       	ldi	r26, 0x28	; 40
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 e2       	ldi	r30, 0x28	; 40
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	90 81       	ld	r25, Z
     f84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f86:	89 2b       	or	r24, r25
     f88:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f8a:	a8 e2       	ldi	r26, 0x28	; 40
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e2       	ldi	r30, 0x28	; 40
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	81 60       	ori	r24, 0x01	; 1
     f96:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f98:	a8 e2       	ldi	r26, 0x28	; 40
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e2       	ldi	r30, 0x28	; 40
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8d 7f       	andi	r24, 0xFD	; 253
     fa4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     fa6:	a8 e2       	ldi	r26, 0x28	; 40
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e8 e2       	ldi	r30, 0x28	; 40
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	8c 93       	st	X, r24
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 ea       	ldi	r26, 0xA0	; 160
     fba:	b0 e4       	ldi	r27, 0x40	; 64
     fbc:	89 8f       	std	Y+25, r24	; 0x19
     fbe:	9a 8f       	std	Y+26, r25	; 0x1a
     fc0:	ab 8f       	std	Y+27, r26	; 0x1b
     fc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc4:	69 8d       	ldd	r22, Y+25	; 0x19
     fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	2d ec       	ldi	r18, 0xCD	; 205
     fce:	3c ec       	ldi	r19, 0xCC	; 204
     fd0:	4c e2       	ldi	r20, 0x2C	; 44
     fd2:	55 e4       	ldi	r21, 0x45	; 69
     fd4:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	8d 8b       	std	Y+21, r24	; 0x15
     fde:	9e 8b       	std	Y+22, r25	; 0x16
     fe0:	af 8b       	std	Y+23, r26	; 0x17
     fe2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fe4:	6d 89       	ldd	r22, Y+21	; 0x15
     fe6:	7e 89       	ldd	r23, Y+22	; 0x16
     fe8:	8f 89       	ldd	r24, Y+23	; 0x17
     fea:	98 8d       	ldd	r25, Y+24	; 0x18
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <lcd_wr_char+0xba>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9c 8b       	std	Y+20, r25	; 0x14
    1002:	8b 8b       	std	Y+19, r24	; 0x13
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1006:	6d 89       	ldd	r22, Y+21	; 0x15
    1008:	7e 89       	ldd	r23, Y+22	; 0x16
    100a:	8f 89       	ldd	r24, Y+23	; 0x17
    100c:	98 8d       	ldd	r25, Y+24	; 0x18
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	4f e7       	ldi	r20, 0x7F	; 127
    1014:	57 e4       	ldi	r21, 0x47	; 71
    1016:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    101a:	18 16       	cp	r1, r24
    101c:	4c f5       	brge	.+82     	; 0x1070 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101e:	69 8d       	ldd	r22, Y+25	; 0x19
    1020:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e2       	ldi	r20, 0x20	; 32
    102c:	51 e4       	ldi	r21, 0x41	; 65
    102e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9c 8b       	std	Y+20, r25	; 0x14
    1044:	8b 8b       	std	Y+19, r24	; 0x13
    1046:	0f c0       	rjmp	.+30     	; 0x1066 <lcd_wr_char+0x11a>
    1048:	84 e1       	ldi	r24, 0x14	; 20
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	9a 8b       	std	Y+18, r25	; 0x12
    104e:	89 8b       	std	Y+17, r24	; 0x11
    1050:	89 89       	ldd	r24, Y+17	; 0x11
    1052:	9a 89       	ldd	r25, Y+18	; 0x12
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <lcd_wr_char+0x108>
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105c:	8b 89       	ldd	r24, Y+19	; 0x13
    105e:	9c 89       	ldd	r25, Y+20	; 0x14
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1066:	8b 89       	ldd	r24, Y+19	; 0x13
    1068:	9c 89       	ldd	r25, Y+20	; 0x14
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	69 f7       	brne	.-38     	; 0x1048 <lcd_wr_char+0xfc>
    106e:	14 c0       	rjmp	.+40     	; 0x1098 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	6d 89       	ldd	r22, Y+21	; 0x15
    1072:	7e 89       	ldd	r23, Y+22	; 0x16
    1074:	8f 89       	ldd	r24, Y+23	; 0x17
    1076:	98 8d       	ldd	r25, Y+24	; 0x18
    1078:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9c 8b       	std	Y+20, r25	; 0x14
    1082:	8b 8b       	std	Y+19, r24	; 0x13
    1084:	8b 89       	ldd	r24, Y+19	; 0x13
    1086:	9c 89       	ldd	r25, Y+20	; 0x14
    1088:	98 8b       	std	Y+16, r25	; 0x10
    108a:	8f 87       	std	Y+15, r24	; 0x0f
    108c:	8f 85       	ldd	r24, Y+15	; 0x0f
    108e:	98 89       	ldd	r25, Y+16	; 0x10
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <lcd_wr_char+0x144>
    1094:	98 8b       	std	Y+16, r25	; 0x10
    1096:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8b 7f       	andi	r24, 0xFB	; 251
    10a4:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    10a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10a8:	8f 70       	andi	r24, 0x0F	; 15
    10aa:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    10ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ae:	82 95       	swap	r24
    10b0:	80 7f       	andi	r24, 0xF0	; 240
    10b2:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    10b4:	a8 e2       	ldi	r26, 0x28	; 40
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e2       	ldi	r30, 0x28	; 40
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8f 70       	andi	r24, 0x0F	; 15
    10c0:	8c 93       	st	X, r24
	lcd_port |= letter;
    10c2:	a8 e2       	ldi	r26, 0x28	; 40
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e8 e2       	ldi	r30, 0x28	; 40
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	90 81       	ld	r25, Z
    10cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10ce:	89 2b       	or	r24, r25
    10d0:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    10d2:	a8 e2       	ldi	r26, 0x28	; 40
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e8 e2       	ldi	r30, 0x28	; 40
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    10e0:	a8 e2       	ldi	r26, 0x28	; 40
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e8 e2       	ldi	r30, 0x28	; 40
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8d 7f       	andi	r24, 0xFD	; 253
    10ec:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10ee:	a8 e2       	ldi	r26, 0x28	; 40
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e2       	ldi	r30, 0x28	; 40
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	8c 93       	st	X, r24
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 ea       	ldi	r26, 0xA0	; 160
    1102:	b0 e4       	ldi	r27, 0x40	; 64
    1104:	8b 87       	std	Y+11, r24	; 0x0b
    1106:	9c 87       	std	Y+12, r25	; 0x0c
    1108:	ad 87       	std	Y+13, r26	; 0x0d
    110a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110c:	6b 85       	ldd	r22, Y+11	; 0x0b
    110e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1110:	8d 85       	ldd	r24, Y+13	; 0x0d
    1112:	9e 85       	ldd	r25, Y+14	; 0x0e
    1114:	2d ec       	ldi	r18, 0xCD	; 205
    1116:	3c ec       	ldi	r19, 0xCC	; 204
    1118:	4c e2       	ldi	r20, 0x2C	; 44
    111a:	55 e4       	ldi	r21, 0x45	; 69
    111c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	8f 83       	std	Y+7, r24	; 0x07
    1126:	98 87       	std	Y+8, r25	; 0x08
    1128:	a9 87       	std	Y+9, r26	; 0x09
    112a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112c:	6f 81       	ldd	r22, Y+7	; 0x07
    112e:	78 85       	ldd	r23, Y+8	; 0x08
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	9a 85       	ldd	r25, Y+10	; 0x0a
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    1140:	88 23       	and	r24, r24
    1142:	2c f4       	brge	.+10     	; 0x114e <lcd_wr_char+0x202>
		__ticks = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	8d 83       	std	Y+5, r24	; 0x05
    114c:	3f c0       	rjmp	.+126    	; 0x11cc <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    114e:	6f 81       	ldd	r22, Y+7	; 0x07
    1150:	78 85       	ldd	r23, Y+8	; 0x08
    1152:	89 85       	ldd	r24, Y+9	; 0x09
    1154:	9a 85       	ldd	r25, Y+10	; 0x0a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	57 e4       	ldi	r21, 0x47	; 71
    115e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    1162:	18 16       	cp	r1, r24
    1164:	4c f5       	brge	.+82     	; 0x11b8 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1166:	6b 85       	ldd	r22, Y+11	; 0x0b
    1168:	7c 85       	ldd	r23, Y+12	; 0x0c
    116a:	8d 85       	ldd	r24, Y+13	; 0x0d
    116c:	9e 85       	ldd	r25, Y+14	; 0x0e
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e2       	ldi	r20, 0x20	; 32
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    117a:	dc 01       	movw	r26, r24
    117c:	cb 01       	movw	r24, r22
    117e:	bc 01       	movw	r22, r24
    1180:	cd 01       	movw	r24, r26
    1182:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	0f c0       	rjmp	.+30     	; 0x11ae <lcd_wr_char+0x262>
    1190:	84 e1       	ldi	r24, 0x14	; 20
    1192:	91 e0       	ldi	r25, 0x01	; 1
    1194:	9c 83       	std	Y+4, r25	; 0x04
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <lcd_wr_char+0x250>
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	69 f7       	brne	.-38     	; 0x1190 <lcd_wr_char+0x244>
    11b6:	14 c0       	rjmp	.+40     	; 0x11e0 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ba:	78 85       	ldd	r23, Y+8	; 0x08
    11bc:	89 85       	ldd	r24, Y+9	; 0x09
    11be:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c0:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	9a 83       	std	Y+2, r25	; 0x02
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	9a 81       	ldd	r25, Y+2	; 0x02
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	f1 f7       	brne	.-4      	; 0x11d8 <lcd_wr_char+0x28c>
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    11e0:	a8 e2       	ldi	r26, 0x28	; 40
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e8 e2       	ldi	r30, 0x28	; 40
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8b 7f       	andi	r24, 0xFB	; 251
    11ec:	8c 93       	st	X, r24
}
    11ee:	6e 96       	adiw	r28, 0x1e	; 30
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <lcd_home>:


void lcd_home()
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	0f 92       	push	r0
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	89 83       	std	Y+1, r24	; 0x01
    1224:	0a c0       	rjmp	.+20     	; 0x123a <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1226:	e9 81       	ldd	r30, Y+1	; 0x01
    1228:	fa 81       	ldd	r31, Y+2	; 0x02
    122a:	80 81       	ld	r24, Z
    122c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		str++;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    123a:	e9 81       	ldd	r30, Y+1	; 0x01
    123c:	fa 81       	ldd	r31, Y+2	; 0x02
    123e:	80 81       	ld	r24, Z
    1240:	88 23       	and	r24, r24
    1242:	89 f7       	brne	.-30     	; 0x1226 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <lcd_cursor+0x6>
    1254:	0f 92       	push	r0
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	2b 83       	std	Y+3, r18	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	91 05       	cpc	r25, r1
    1270:	d9 f0       	breq	.+54     	; 0x12a8 <lcd_cursor+0x5a>
    1272:	2b 81       	ldd	r18, Y+3	; 0x03
    1274:	3c 81       	ldd	r19, Y+4	; 0x04
    1276:	23 30       	cpi	r18, 0x03	; 3
    1278:	31 05       	cpc	r19, r1
    127a:	34 f4       	brge	.+12     	; 0x1288 <lcd_cursor+0x3a>
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	91 05       	cpc	r25, r1
    1284:	61 f0       	breq	.+24     	; 0x129e <lcd_cursor+0x50>
    1286:	1e c0       	rjmp	.+60     	; 0x12c4 <lcd_cursor+0x76>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	23 30       	cpi	r18, 0x03	; 3
    128e:	31 05       	cpc	r19, r1
    1290:	81 f0       	breq	.+32     	; 0x12b2 <lcd_cursor+0x64>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	91 05       	cpc	r25, r1
    129a:	81 f0       	breq	.+32     	; 0x12bc <lcd_cursor+0x6e>
    129c:	13 c0       	rjmp	.+38     	; 0x12c4 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	81 58       	subi	r24, 0x81	; 129
    12a2:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	81 54       	subi	r24, 0x41	; 65
    12ac:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	8d 56       	subi	r24, 0x6D	; 109
    12b6:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	8d 52       	subi	r24, 0x2D	; 45
    12c0:	0e 94 4c 06 	call	0xc98	; 0xc98 <lcd_wr_command>
		default: break;
	}
}
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	27 97       	sbiw	r28, 0x07	; 7
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	6b 83       	std	Y+3, r22	; 0x03
    12ea:	5d 83       	std	Y+5, r21	; 0x05
    12ec:	4c 83       	std	Y+4, r20	; 0x04
    12ee:	3f 83       	std	Y+7, r19	; 0x07
    12f0:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12f2:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	88 23       	and	r24, r24
    12f8:	19 f0       	breq	.+6      	; 0x1300 <lcd_print+0x2e>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	19 f4       	brne	.+6      	; 0x1306 <lcd_print+0x34>
	{
		lcd_home();
    1300:	0e 94 00 09 	call	0x1200	; 0x1200 <lcd_home>
    1304:	04 c0       	rjmp	.+8      	; 0x130e <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	6b 81       	ldd	r22, Y+3	; 0x03
    130a:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	}
	if(digits==5 || flag==1)
    130e:	8e 81       	ldd	r24, Y+6	; 0x06
    1310:	9f 81       	ldd	r25, Y+7	; 0x07
    1312:	85 30       	cpi	r24, 0x05	; 5
    1314:	91 05       	cpc	r25, r1
    1316:	19 f0       	breq	.+6      	; 0x131e <lcd_print+0x4c>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	a9 f4       	brne	.+42     	; 0x1348 <lcd_print+0x76>
	{
		million=value/10000+48;
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	20 e1       	ldi	r18, 0x10	; 16
    1324:	37 e2       	ldi	r19, 0x27	; 39
    1326:	b9 01       	movw	r22, r18
    1328:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    132c:	cb 01       	movw	r24, r22
    132e:	c0 96       	adiw	r24, 0x30	; 48
    1330:	90 93 b3 03 	sts	0x03B3, r25
    1334:	80 93 b2 03 	sts	0x03B2, r24
		lcd_wr_char(million);
    1338:	80 91 b2 03 	lds	r24, 0x03B2
    133c:	90 91 b3 03 	lds	r25, 0x03B3
    1340:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1348:	8e 81       	ldd	r24, Y+6	; 0x06
    134a:	9f 81       	ldd	r25, Y+7	; 0x07
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	91 05       	cpc	r25, r1
    1350:	19 f0       	breq	.+6      	; 0x1358 <lcd_print+0x86>
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	11 f5       	brne	.+68     	; 0x139c <lcd_print+0xca>
	{
		temp = value/1000;
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	28 ee       	ldi	r18, 0xE8	; 232
    135e:	33 e0       	ldi	r19, 0x03	; 3
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    1366:	cb 01       	movw	r24, r22
    1368:	90 93 ba 03 	sts	0x03BA, r25
    136c:	80 93 b9 03 	sts	0x03B9, r24
		thousand = temp%10 + 48;
    1370:	80 91 b9 03 	lds	r24, 0x03B9
    1374:	90 91 ba 03 	lds	r25, 0x03BA
    1378:	2a e0       	ldi	r18, 0x0A	; 10
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    1382:	c0 96       	adiw	r24, 0x30	; 48
    1384:	90 93 51 0c 	sts	0x0C51, r25
    1388:	80 93 50 0c 	sts	0x0C50, r24
		lcd_wr_char(thousand);
    138c:	80 91 50 0c 	lds	r24, 0x0C50
    1390:	90 91 51 0c 	lds	r25, 0x0C51
    1394:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    139c:	8e 81       	ldd	r24, Y+6	; 0x06
    139e:	9f 81       	ldd	r25, Y+7	; 0x07
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	91 05       	cpc	r25, r1
    13a4:	19 f0       	breq	.+6      	; 0x13ac <lcd_print+0xda>
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	11 f5       	brne	.+68     	; 0x13f0 <lcd_print+0x11e>
	{
		temp = value/100;
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	24 e6       	ldi	r18, 0x64	; 100
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    13ba:	cb 01       	movw	r24, r22
    13bc:	90 93 ba 03 	sts	0x03BA, r25
    13c0:	80 93 b9 03 	sts	0x03B9, r24
		hundred = temp%10 + 48;
    13c4:	80 91 b9 03 	lds	r24, 0x03B9
    13c8:	90 91 ba 03 	lds	r25, 0x03BA
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	b9 01       	movw	r22, r18
    13d2:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    13d6:	c0 96       	adiw	r24, 0x30	; 48
    13d8:	90 93 37 0c 	sts	0x0C37, r25
    13dc:	80 93 36 0c 	sts	0x0C36, r24
		lcd_wr_char(hundred);
    13e0:	80 91 36 0c 	lds	r24, 0x0C36
    13e4:	90 91 37 0c 	lds	r25, 0x0C37
    13e8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	91 05       	cpc	r25, r1
    13f8:	19 f0       	breq	.+6      	; 0x1400 <lcd_print+0x12e>
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	11 f5       	brne	.+68     	; 0x1444 <lcd_print+0x172>
	{
		temp = value/10;
    1400:	8c 81       	ldd	r24, Y+4	; 0x04
    1402:	9d 81       	ldd	r25, Y+5	; 0x05
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	b9 01       	movw	r22, r18
    140a:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    140e:	cb 01       	movw	r24, r22
    1410:	90 93 ba 03 	sts	0x03BA, r25
    1414:	80 93 b9 03 	sts	0x03B9, r24
		tens = temp%10 + 48;
    1418:	80 91 b9 03 	lds	r24, 0x03B9
    141c:	90 91 ba 03 	lds	r25, 0x03BA
    1420:	2a e0       	ldi	r18, 0x0A	; 10
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	b9 01       	movw	r22, r18
    1426:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    142a:	c0 96       	adiw	r24, 0x30	; 48
    142c:	90 93 2d 08 	sts	0x082D, r25
    1430:	80 93 2c 08 	sts	0x082C, r24
		lcd_wr_char(tens);
    1434:	80 91 2c 08 	lds	r24, 0x082C
    1438:	90 91 2d 08 	lds	r25, 0x082D
    143c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
		flag=1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	19 f0       	breq	.+6      	; 0x1454 <lcd_print+0x182>
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 f4       	brne	.+36     	; 0x1478 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	b9 01       	movw	r22, r18
    145e:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    1462:	c0 96       	adiw	r24, 0x30	; 48
    1464:	90 93 4f 0c 	sts	0x0C4F, r25
    1468:	80 93 4e 0c 	sts	0x0C4E, r24
		lcd_wr_char(unit);
    146c:	80 91 4e 0c 	lds	r24, 0x0C4E
    1470:	90 91 4f 0c 	lds	r25, 0x0C4F
    1474:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
	}
	if(digits>5)
    1478:	8e 81       	ldd	r24, Y+6	; 0x06
    147a:	9f 81       	ldd	r25, Y+7	; 0x07
    147c:	86 30       	cpi	r24, 0x06	; 6
    147e:	91 05       	cpc	r25, r1
    1480:	1c f0       	brlt	.+6      	; 0x1488 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    1482:	85 e4       	ldi	r24, 0x45	; 69
    1484:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
	}
	
}
    1488:	27 96       	adiw	r28, 0x07	; 7
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <lcd_port_config>:
    /*!
	  the function to initialize use of LCD on the Bot
    */
//Function to configure LCD port
void lcd_port_config (void)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    14a2:	a7 e2       	ldi	r26, 0x27	; 39
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e7 e2       	ldi	r30, 0x27	; 39
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	87 6f       	ori	r24, 0xF7	; 247
    14ae:	8c 93       	st	X, r24
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    14b0:	a8 e2       	ldi	r26, 0x28	; 40
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e8 e2       	ldi	r30, 0x28	; 40
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	80 78       	andi	r24, 0x80	; 128
    14bc:	8c 93       	st	X, r24
}
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <lcd_num>:
//! display a number on LCD
    /*!
	 Function used for displaying a number on LCD
    */
void lcd_num(int x)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	2d 97       	sbiw	r28, 0x0d	; 13
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	9d 87       	std	Y+13, r25	; 0x0d
    14da:	8c 87       	std	Y+12, r24	; 0x0c
	if (current_state == 4) {
    14dc:	80 91 50 03 	lds	r24, 0x0350
    14e0:	90 91 51 03 	lds	r25, 0x0351
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	91 05       	cpc	r25, r1
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <lcd_num+0x30>
		lcd_cursor(2,1);
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <lcd_num+0x4e>
	}
	else if (current_state == 8) {
    14f4:	80 91 50 03 	lds	r24, 0x0350
    14f8:	90 91 51 03 	lds	r25, 0x0351
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	91 05       	cpc	r25, r1
    1500:	41 f4       	brne	.+16     	; 0x1512 <lcd_num+0x4e>
		lcd_cursor(1,1);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	61 e0       	ldi	r22, 0x01	; 1
    1506:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
		current_state = 0;
    150a:	10 92 51 03 	sts	0x0351, r1
    150e:	10 92 50 03 	sts	0x0350, r1
	}
	current_state++;
    1512:	80 91 50 03 	lds	r24, 0x0350
    1516:	90 91 51 03 	lds	r25, 0x0351
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	90 93 51 03 	sts	0x0351, r25
    1520:	80 93 50 03 	sts	0x0350, r24
	char cVal[10];
	itoa(x,cVal,10);
    1524:	8c 85       	ldd	r24, Y+12	; 0x0c
    1526:	9d 85       	ldd	r25, Y+13	; 0x0d
    1528:	9e 01       	movw	r18, r28
    152a:	2e 5f       	subi	r18, 0xFE	; 254
    152c:	3f 4f       	sbci	r19, 0xFF	; 255
    152e:	b9 01       	movw	r22, r18
    1530:	4a e0       	ldi	r20, 0x0A	; 10
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	0e 94 14 45 	call	0x8a28	; 0x8a28 <itoa>
	lcd_string(cVal);
    1538:	ce 01       	movw	r24, r28
    153a:	02 96       	adiw	r24, 0x02	; 2
    153c:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
	char a=" ";
    1540:	84 e1       	ldi	r24, 0x14	; 20
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	89 83       	std	Y+1, r24	; 0x01
	lcd_wr_char(a);
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
}
    154c:	2d 96       	adiw	r28, 0x0d	; 13
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <rollLCD>:
//! rolling LCD display
    /*!
	 non-blocking rolling lcd display
    */
void rollLCD(char str[])
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	0f 92       	push	r0
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
	strcpy(_rollLCD,str);
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	97 e0       	ldi	r25, 0x07	; 7
    1572:	29 81       	ldd	r18, Y+1	; 0x01
    1574:	3a 81       	ldd	r19, Y+2	; 0x02
    1576:	b9 01       	movw	r22, r18
    1578:	0e 94 04 45 	call	0x8a08	; 0x8a08 <strcpy>
	strcat(_rollLCD,"               ");
    157c:	88 ec       	ldi	r24, 0xC8	; 200
    157e:	97 e0       	ldi	r25, 0x07	; 7
    1580:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <strlen>
    1584:	88 53       	subi	r24, 0x38	; 56
    1586:	98 4f       	sbci	r25, 0xF8	; 248
    1588:	26 e1       	ldi	r18, 0x16	; 22
    158a:	32 e0       	ldi	r19, 0x02	; 2
    158c:	b9 01       	movw	r22, r18
    158e:	40 e1       	ldi	r20, 0x10	; 16
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	0e 94 f4 44 	call	0x89e8	; 0x89e8 <memcpy>
	lcd_clear();
    1596:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
	lcd_cursor(1,1);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	lcd_string(_rollLCD);
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	97 e0       	ldi	r25, 0x07	; 7
    15a6:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
	_LCDpos=1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	90 93 53 0c 	sts	0x0C53, r25
    15b2:	80 93 52 0c 	sts	0x0C52, r24
	_rollLCDFlag=1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	90 93 b0 03 	sts	0x03B0, r25
    15be:	80 93 af 03 	sts	0x03AF, r24
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <buzzer_pin_config>:
    /*!
	  the function to configure use of buzzer on the Bot
    */
//Function to configure Buzzer pins
void buzzer_pin_config (void)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    15d4:	a7 e2       	ldi	r26, 0x27	; 39
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e7 e2       	ldi	r30, 0x27	; 39
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	88 60       	ori	r24, 0x08	; 8
    15e0:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    15e2:	a8 e2       	ldi	r26, 0x28	; 40
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e8 e2       	ldi	r30, 0x28	; 40
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	87 7f       	andi	r24, 0xF7	; 247
    15ee:	8c 93       	st	X, r24
}
    15f0:	cf 91       	pop	r28
    15f2:	df 91       	pop	r29
    15f4:	08 95       	ret

000015f6 <buzzer_on>:
//! A Buzzer on function.
    /*!
	  the function to switch the buzzer on
    */
void buzzer_on (void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    1600:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    1602:	e6 e2       	ldi	r30, 0x26	; 38
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore | 0x08;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    1610:	e8 e2       	ldi	r30, 0x28	; 40
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	80 83       	st	Z, r24
}
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <buzzer_off>:
//! A Buzzer off function.
    /*!
	  the function to switch the buzzer off
    */
void buzzer_off (void)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
 unsigned char port_restore = 0;
    162a:	19 82       	std	Y+1, r1	; 0x01
 port_restore = PINC;
    162c:	e6 e2       	ldi	r30, 0x26	; 38
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	89 83       	std	Y+1, r24	; 0x01
 port_restore = port_restore & 0xF7;
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	87 7f       	andi	r24, 0xF7	; 247
    1638:	89 83       	std	Y+1, r24	; 0x01
 PORTC = port_restore;
    163a:	e8 e2       	ldi	r30, 0x28	; 40
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	80 83       	st	Z, r24
}
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <buzzer_prompt>:

//! A Buzzer prompt function.
    /*!
	  the function to switch the buzzer on for some time and then switch off
    */
void buzzer_prompt(int time){
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	60 97       	sbiw	r28, 0x10	; 16
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	8f 87       	std	Y+15, r24	; 0x0f
	buzzer_on();
    1662:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
	_delay_ms(time);
    1666:	8f 85       	ldd	r24, Y+15	; 0x0f
    1668:	98 89       	ldd	r25, Y+16	; 0x10
    166a:	aa 27       	eor	r26, r26
    166c:	97 fd       	sbrc	r25, 7
    166e:	a0 95       	com	r26
    1670:	ba 2f       	mov	r27, r26
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 b3 40 	call	0x8166	; 0x8166 <__floatsisf>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8b 87       	std	Y+11, r24	; 0x0b
    1680:	9c 87       	std	Y+12, r25	; 0x0c
    1682:	ad 87       	std	Y+13, r26	; 0x0d
    1684:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	2d ec       	ldi	r18, 0xCD	; 205
    1690:	3c ec       	ldi	r19, 0xCC	; 204
    1692:	4c e2       	ldi	r20, 0x2C	; 44
    1694:	55 e4       	ldi	r21, 0x45	; 69
    1696:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8f 83       	std	Y+7, r24	; 0x07
    16a0:	98 87       	std	Y+8, r25	; 0x08
    16a2:	a9 87       	std	Y+9, r26	; 0x09
    16a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a6:	6f 81       	ldd	r22, Y+7	; 0x07
    16a8:	78 85       	ldd	r23, Y+8	; 0x08
    16aa:	89 85       	ldd	r24, Y+9	; 0x09
    16ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <buzzer_prompt+0x7e>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9e 83       	std	Y+6, r25	; 0x06
    16c4:	8d 83       	std	Y+5, r24	; 0x05
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <buzzer_prompt+0xfc>
	else if (__tmp > 65535)
    16c8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ca:	78 85       	ldd	r23, Y+8	; 0x08
    16cc:	89 85       	ldd	r24, Y+9	; 0x09
    16ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <buzzer_prompt+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <buzzer_prompt+0xde>
    170a:	84 e1       	ldi	r24, 0x14	; 20
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <buzzer_prompt+0xcc>
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <buzzer_prompt+0xc0>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <buzzer_prompt+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <buzzer_prompt+0x108>
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	buzzer_off();
    175a:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>

}
    175e:	60 96       	adiw	r28, 0x10	; 16
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <timer5_init>:
// Timer 5 initialised in PWM mode for velocity control
// Prescale:64
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:674.988Hz
void timer5_init()
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1778:	e1 e2       	ldi	r30, 0x21	; 33
    177a:	f1 e0       	ldi	r31, 0x01	; 1
    177c:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    177e:	e5 e2       	ldi	r30, 0x25	; 37
    1780:	f1 e0       	ldi	r31, 0x01	; 1
    1782:	8f ef       	ldi	r24, 0xFF	; 255
    1784:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1786:	e4 e2       	ldi	r30, 0x24	; 36
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    178e:	e9 e2       	ldi	r30, 0x29	; 41
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1794:	e8 e2       	ldi	r30, 0x28	; 40
    1796:	f1 e0       	ldi	r31, 0x01	; 1
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    179c:	eb e2       	ldi	r30, 0x2B	; 43
    179e:	f1 e0       	ldi	r31, 0x01	; 1
    17a0:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    17a2:	ea e2       	ldi	r30, 0x2A	; 42
    17a4:	f1 e0       	ldi	r31, 0x01	; 1
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    17aa:	ed e2       	ldi	r30, 0x2D	; 45
    17ac:	f1 e0       	ldi	r31, 0x01	; 1
    17ae:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    17b0:	ec e2       	ldi	r30, 0x2C	; 44
    17b2:	f1 e0       	ldi	r31, 0x01	; 1
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    17b8:	e0 e2       	ldi	r30, 0x20	; 32
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	89 ea       	ldi	r24, 0xA9	; 169
    17be:	80 83       	st	Z, r24
 					  For Overriding normal port functionalit to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    17c0:	e1 e2       	ldi	r30, 0x21	; 33
    17c2:	f1 e0       	ldi	r31, 0x01	; 1
    17c4:	8b e0       	ldi	r24, 0x0B	; 11
    17c6:	80 83       	st	Z, r24
}
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <setTimer3>:
//! setting timer 3
    /*!
	 Function used for setting timer 3 function for Oninterrupt usage
    */
void setTimer3(int time, void (*f) (void))
{
    17ce:	8f 92       	push	r8
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	2c 97       	sbiw	r28, 0x0c	; 12
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	9a 87       	std	Y+10, r25	; 0x0a
    17f8:	89 87       	std	Y+9, r24	; 0x09
    17fa:	7c 87       	std	Y+12, r23	; 0x0c
    17fc:	6b 87       	std	Y+11, r22	; 0x0b
long long int ticks=TICKS_PER_SEC*time;
    17fe:	29 85       	ldd	r18, Y+9	; 0x09
    1800:	3a 85       	ldd	r19, Y+10	; 0x0a
    1802:	83 e3       	ldi	r24, 0x33	; 51
    1804:	9b e2       	ldi	r25, 0x2B	; 43
    1806:	ac 01       	movw	r20, r24
    1808:	24 9f       	mul	r18, r20
    180a:	c0 01       	movw	r24, r0
    180c:	25 9f       	mul	r18, r21
    180e:	90 0d       	add	r25, r0
    1810:	34 9f       	mul	r19, r20
    1812:	90 0d       	add	r25, r0
    1814:	11 24       	eor	r1, r1
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	99 0f       	add	r25, r25
    181c:	88 0b       	sbc	r24, r24
    181e:	98 2f       	mov	r25, r24
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	8c 83       	std	Y+4, r24	; 0x04
    1824:	8d 83       	std	Y+5, r24	; 0x05
    1826:	8e 83       	std	Y+6, r24	; 0x06
    1828:	8f 83       	std	Y+7, r24	; 0x07
    182a:	88 87       	std	Y+8, r24	; 0x08
TCCR3B = 0x00; //stop
    182c:	e1 e9       	ldi	r30, 0x91	; 145
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	10 82       	st	Z, r1
 TCNT3H = 0xFF - ticks/0xFF; //Counter higher 8 bit value
    1832:	0f 2e       	mov	r0, r31
    1834:	f5 e9       	ldi	r31, 0x95	; 149
    1836:	8f 2e       	mov	r8, r31
    1838:	99 24       	eor	r9, r9
    183a:	f0 2d       	mov	r31, r0
    183c:	a9 80       	ldd	r10, Y+1	; 0x01
    183e:	ba 80       	ldd	r11, Y+2	; 0x02
    1840:	cb 80       	ldd	r12, Y+3	; 0x03
    1842:	dc 80       	ldd	r13, Y+4	; 0x04
    1844:	ed 80       	ldd	r14, Y+5	; 0x05
    1846:	fe 80       	ldd	r15, Y+6	; 0x06
    1848:	0f 81       	ldd	r16, Y+7	; 0x07
    184a:	18 85       	ldd	r17, Y+8	; 0x08
    184c:	2a 2d       	mov	r18, r10
    184e:	3b 2d       	mov	r19, r11
    1850:	4c 2d       	mov	r20, r12
    1852:	5d 2d       	mov	r21, r13
    1854:	6e 2d       	mov	r22, r14
    1856:	7f 2d       	mov	r23, r15
    1858:	80 2f       	mov	r24, r16
    185a:	91 2f       	mov	r25, r17
    185c:	aa 24       	eor	r10, r10
    185e:	aa 94       	dec	r10
    1860:	bb 24       	eor	r11, r11
    1862:	cc 24       	eor	r12, r12
    1864:	dd 24       	eor	r13, r13
    1866:	ee 24       	eor	r14, r14
    1868:	ff 24       	eor	r15, r15
    186a:	00 e0       	ldi	r16, 0x00	; 0
    186c:	10 e0       	ldi	r17, 0x00	; 0
    186e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__divdi3>
    1872:	a2 2e       	mov	r10, r18
    1874:	b3 2e       	mov	r11, r19
    1876:	c4 2e       	mov	r12, r20
    1878:	d5 2e       	mov	r13, r21
    187a:	e6 2e       	mov	r14, r22
    187c:	f7 2e       	mov	r15, r23
    187e:	08 2f       	mov	r16, r24
    1880:	19 2f       	mov	r17, r25
    1882:	2a 2d       	mov	r18, r10
    1884:	3b 2d       	mov	r19, r11
    1886:	4c 2d       	mov	r20, r12
    1888:	5d 2d       	mov	r21, r13
    188a:	6e 2d       	mov	r22, r14
    188c:	7f 2d       	mov	r23, r15
    188e:	80 2f       	mov	r24, r16
    1890:	91 2f       	mov	r25, r17
    1892:	82 2f       	mov	r24, r18
    1894:	80 95       	com	r24
    1896:	f4 01       	movw	r30, r8
    1898:	80 83       	st	Z, r24
 TCNT3L = 0xFF-ticks%0xFF; //Counter lower 8 bit value
    189a:	0f 2e       	mov	r0, r31
    189c:	f4 e9       	ldi	r31, 0x94	; 148
    189e:	8f 2e       	mov	r8, r31
    18a0:	99 24       	eor	r9, r9
    18a2:	f0 2d       	mov	r31, r0
    18a4:	a9 80       	ldd	r10, Y+1	; 0x01
    18a6:	ba 80       	ldd	r11, Y+2	; 0x02
    18a8:	cb 80       	ldd	r12, Y+3	; 0x03
    18aa:	dc 80       	ldd	r13, Y+4	; 0x04
    18ac:	ed 80       	ldd	r14, Y+5	; 0x05
    18ae:	fe 80       	ldd	r15, Y+6	; 0x06
    18b0:	0f 81       	ldd	r16, Y+7	; 0x07
    18b2:	18 85       	ldd	r17, Y+8	; 0x08
    18b4:	2a 2d       	mov	r18, r10
    18b6:	3b 2d       	mov	r19, r11
    18b8:	4c 2d       	mov	r20, r12
    18ba:	5d 2d       	mov	r21, r13
    18bc:	6e 2d       	mov	r22, r14
    18be:	7f 2d       	mov	r23, r15
    18c0:	80 2f       	mov	r24, r16
    18c2:	91 2f       	mov	r25, r17
    18c4:	aa 24       	eor	r10, r10
    18c6:	aa 94       	dec	r10
    18c8:	bb 24       	eor	r11, r11
    18ca:	cc 24       	eor	r12, r12
    18cc:	dd 24       	eor	r13, r13
    18ce:	ee 24       	eor	r14, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	00 e0       	ldi	r16, 0x00	; 0
    18d4:	10 e0       	ldi	r17, 0x00	; 0
    18d6:	0e 94 96 34 	call	0x692c	; 0x692c <__moddi3>
    18da:	a2 2e       	mov	r10, r18
    18dc:	b3 2e       	mov	r11, r19
    18de:	c4 2e       	mov	r12, r20
    18e0:	d5 2e       	mov	r13, r21
    18e2:	e6 2e       	mov	r14, r22
    18e4:	f7 2e       	mov	r15, r23
    18e6:	08 2f       	mov	r16, r24
    18e8:	19 2f       	mov	r17, r25
    18ea:	2a 2d       	mov	r18, r10
    18ec:	3b 2d       	mov	r19, r11
    18ee:	4c 2d       	mov	r20, r12
    18f0:	5d 2d       	mov	r21, r13
    18f2:	6e 2d       	mov	r22, r14
    18f4:	7f 2d       	mov	r23, r15
    18f6:	80 2f       	mov	r24, r16
    18f8:	91 2f       	mov	r25, r17
    18fa:	82 2f       	mov	r24, r18
    18fc:	80 95       	com	r24
    18fe:	f4 01       	movw	r30, r8
    1900:	80 83       	st	Z, r24
 TCCR3B = 0x05; //start Timer
    1902:	e1 e9       	ldi	r30, 0x91	; 145
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	85 e0       	ldi	r24, 0x05	; 5
    1908:	80 83       	st	Z, r24
 timer3func=f;
    190a:	8b 85       	ldd	r24, Y+11	; 0x0b
    190c:	9c 85       	ldd	r25, Y+12	; 0x0c
    190e:	90 93 39 0c 	sts	0x0C39, r25
    1912:	80 93 38 0c 	sts	0x0C38, r24

}
    1916:	2c 96       	adiw	r28, 0x0c	; 12
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	ef 90       	pop	r14
    192e:	df 90       	pop	r13
    1930:	cf 90       	pop	r12
    1932:	bf 90       	pop	r11
    1934:	af 90       	pop	r10
    1936:	9f 90       	pop	r9
    1938:	8f 90       	pop	r8
    193a:	08 95       	ret

0000193c <setTimer1>:
//! setting timer 1
    /*!
	 Function used for setting timer 1 function for Oninterrupt usage
    */
void setTimer1(int time, void (*f) (void))
{
    193c:	8f 92       	push	r8
    193e:	9f 92       	push	r9
    1940:	af 92       	push	r10
    1942:	bf 92       	push	r11
    1944:	cf 92       	push	r12
    1946:	df 92       	push	r13
    1948:	ef 92       	push	r14
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	2c 97       	sbiw	r28, 0x0c	; 12
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	9a 87       	std	Y+10, r25	; 0x0a
    1966:	89 87       	std	Y+9, r24	; 0x09
    1968:	7c 87       	std	Y+12, r23	; 0x0c
    196a:	6b 87       	std	Y+11, r22	; 0x0b
long long int ticks=TICKS_PER_SEC*time;
    196c:	29 85       	ldd	r18, Y+9	; 0x09
    196e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1970:	83 e3       	ldi	r24, 0x33	; 51
    1972:	9b e2       	ldi	r25, 0x2B	; 43
    1974:	ac 01       	movw	r20, r24
    1976:	24 9f       	mul	r18, r20
    1978:	c0 01       	movw	r24, r0
    197a:	25 9f       	mul	r18, r21
    197c:	90 0d       	add	r25, r0
    197e:	34 9f       	mul	r19, r20
    1980:	90 0d       	add	r25, r0
    1982:	11 24       	eor	r1, r1
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	99 0f       	add	r25, r25
    198a:	88 0b       	sbc	r24, r24
    198c:	98 2f       	mov	r25, r24
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	8c 83       	std	Y+4, r24	; 0x04
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	8e 83       	std	Y+6, r24	; 0x06
    1996:	8f 83       	std	Y+7, r24	; 0x07
    1998:	88 87       	std	Y+8, r24	; 0x08
TCCR1B = 0x00; //stop
    199a:	e1 e8       	ldi	r30, 0x81	; 129
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	10 82       	st	Z, r1
 TCNT1H = 0xFF - ticks/0xFF; //Counter higher 8 bit value
    19a0:	0f 2e       	mov	r0, r31
    19a2:	f5 e8       	ldi	r31, 0x85	; 133
    19a4:	8f 2e       	mov	r8, r31
    19a6:	99 24       	eor	r9, r9
    19a8:	f0 2d       	mov	r31, r0
    19aa:	a9 80       	ldd	r10, Y+1	; 0x01
    19ac:	ba 80       	ldd	r11, Y+2	; 0x02
    19ae:	cb 80       	ldd	r12, Y+3	; 0x03
    19b0:	dc 80       	ldd	r13, Y+4	; 0x04
    19b2:	ed 80       	ldd	r14, Y+5	; 0x05
    19b4:	fe 80       	ldd	r15, Y+6	; 0x06
    19b6:	0f 81       	ldd	r16, Y+7	; 0x07
    19b8:	18 85       	ldd	r17, Y+8	; 0x08
    19ba:	2a 2d       	mov	r18, r10
    19bc:	3b 2d       	mov	r19, r11
    19be:	4c 2d       	mov	r20, r12
    19c0:	5d 2d       	mov	r21, r13
    19c2:	6e 2d       	mov	r22, r14
    19c4:	7f 2d       	mov	r23, r15
    19c6:	80 2f       	mov	r24, r16
    19c8:	91 2f       	mov	r25, r17
    19ca:	aa 24       	eor	r10, r10
    19cc:	aa 94       	dec	r10
    19ce:	bb 24       	eor	r11, r11
    19d0:	cc 24       	eor	r12, r12
    19d2:	dd 24       	eor	r13, r13
    19d4:	ee 24       	eor	r14, r14
    19d6:	ff 24       	eor	r15, r15
    19d8:	00 e0       	ldi	r16, 0x00	; 0
    19da:	10 e0       	ldi	r17, 0x00	; 0
    19dc:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__divdi3>
    19e0:	a2 2e       	mov	r10, r18
    19e2:	b3 2e       	mov	r11, r19
    19e4:	c4 2e       	mov	r12, r20
    19e6:	d5 2e       	mov	r13, r21
    19e8:	e6 2e       	mov	r14, r22
    19ea:	f7 2e       	mov	r15, r23
    19ec:	08 2f       	mov	r16, r24
    19ee:	19 2f       	mov	r17, r25
    19f0:	2a 2d       	mov	r18, r10
    19f2:	3b 2d       	mov	r19, r11
    19f4:	4c 2d       	mov	r20, r12
    19f6:	5d 2d       	mov	r21, r13
    19f8:	6e 2d       	mov	r22, r14
    19fa:	7f 2d       	mov	r23, r15
    19fc:	80 2f       	mov	r24, r16
    19fe:	91 2f       	mov	r25, r17
    1a00:	82 2f       	mov	r24, r18
    1a02:	80 95       	com	r24
    1a04:	f4 01       	movw	r30, r8
    1a06:	80 83       	st	Z, r24
 TCNT1L = 0xFF-ticks%0xFF; //Counter lower 8 bit value
    1a08:	0f 2e       	mov	r0, r31
    1a0a:	f4 e8       	ldi	r31, 0x84	; 132
    1a0c:	8f 2e       	mov	r8, r31
    1a0e:	99 24       	eor	r9, r9
    1a10:	f0 2d       	mov	r31, r0
    1a12:	a9 80       	ldd	r10, Y+1	; 0x01
    1a14:	ba 80       	ldd	r11, Y+2	; 0x02
    1a16:	cb 80       	ldd	r12, Y+3	; 0x03
    1a18:	dc 80       	ldd	r13, Y+4	; 0x04
    1a1a:	ed 80       	ldd	r14, Y+5	; 0x05
    1a1c:	fe 80       	ldd	r15, Y+6	; 0x06
    1a1e:	0f 81       	ldd	r16, Y+7	; 0x07
    1a20:	18 85       	ldd	r17, Y+8	; 0x08
    1a22:	2a 2d       	mov	r18, r10
    1a24:	3b 2d       	mov	r19, r11
    1a26:	4c 2d       	mov	r20, r12
    1a28:	5d 2d       	mov	r21, r13
    1a2a:	6e 2d       	mov	r22, r14
    1a2c:	7f 2d       	mov	r23, r15
    1a2e:	80 2f       	mov	r24, r16
    1a30:	91 2f       	mov	r25, r17
    1a32:	aa 24       	eor	r10, r10
    1a34:	aa 94       	dec	r10
    1a36:	bb 24       	eor	r11, r11
    1a38:	cc 24       	eor	r12, r12
    1a3a:	dd 24       	eor	r13, r13
    1a3c:	ee 24       	eor	r14, r14
    1a3e:	ff 24       	eor	r15, r15
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	0e 94 96 34 	call	0x692c	; 0x692c <__moddi3>
    1a48:	a2 2e       	mov	r10, r18
    1a4a:	b3 2e       	mov	r11, r19
    1a4c:	c4 2e       	mov	r12, r20
    1a4e:	d5 2e       	mov	r13, r21
    1a50:	e6 2e       	mov	r14, r22
    1a52:	f7 2e       	mov	r15, r23
    1a54:	08 2f       	mov	r16, r24
    1a56:	19 2f       	mov	r17, r25
    1a58:	2a 2d       	mov	r18, r10
    1a5a:	3b 2d       	mov	r19, r11
    1a5c:	4c 2d       	mov	r20, r12
    1a5e:	5d 2d       	mov	r21, r13
    1a60:	6e 2d       	mov	r22, r14
    1a62:	7f 2d       	mov	r23, r15
    1a64:	80 2f       	mov	r24, r16
    1a66:	91 2f       	mov	r25, r17
    1a68:	82 2f       	mov	r24, r18
    1a6a:	80 95       	com	r24
    1a6c:	f4 01       	movw	r30, r8
    1a6e:	80 83       	st	Z, r24
 TCCR1B = 0x05; //start Timer
    1a70:	e1 e8       	ldi	r30, 0x81	; 129
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	85 e0       	ldi	r24, 0x05	; 5
    1a76:	80 83       	st	Z, r24
 timer1func=f;
    1a78:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a7c:	90 93 c5 07 	sts	0x07C5, r25
    1a80:	80 93 c4 07 	sts	0x07C4, r24

}
    1a84:	2c 96       	adiw	r28, 0x0c	; 12
    1a86:	0f b6       	in	r0, 0x3f	; 63
    1a88:	f8 94       	cli
    1a8a:	de bf       	out	0x3e, r29	; 62
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	cd bf       	out	0x3d, r28	; 61
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	ff 90       	pop	r15
    1a9a:	ef 90       	pop	r14
    1a9c:	df 90       	pop	r13
    1a9e:	cf 90       	pop	r12
    1aa0:	bf 90       	pop	r11
    1aa2:	af 90       	pop	r10
    1aa4:	9f 90       	pop	r9
    1aa6:	8f 90       	pop	r8
    1aa8:	08 95       	ret

00001aaa <timer4_init>:
//! timer 4 initialization
    /*!
	 timer 4 initialization and setting high and low values and enable overflow interrupt
    */
void timer4_init(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
 TCCR4B = 0x00; //stop
    1ab2:	e1 ea       	ldi	r30, 0xA1	; 161
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	10 82       	st	Z, r1
 TCNT4H = 0xEF; //Counter higher 8 bit value
    1ab8:	e5 ea       	ldi	r30, 0xA5	; 165
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	8f ee       	ldi	r24, 0xEF	; 239
    1abe:	80 83       	st	Z, r24
 TCNT4L = 0x00; //Counter lower 8 bit value
    1ac0:	e4 ea       	ldi	r30, 0xA4	; 164
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	10 82       	st	Z, r1
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
    1ac6:	e9 ea       	ldi	r30, 0xA9	; 169
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
    1acc:	e8 ea       	ldi	r30, 0xA8	; 168
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
    1ad2:	eb ea       	ldi	r30, 0xAB	; 171
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
    1ad8:	ea ea       	ldi	r30, 0xAA	; 170
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
    1ade:	ed ea       	ldi	r30, 0xAD	; 173
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
    1ae4:	ec ea       	ldi	r30, 0xAC	; 172
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
    1aea:	e7 ea       	ldi	r30, 0xA7	; 167
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
    1af0:	e6 ea       	ldi	r30, 0xA6	; 166
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	10 82       	st	Z, r1
 TCCR4A = 0x00; 
    1af6:	e0 ea       	ldi	r30, 0xA0	; 160
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	10 82       	st	Z, r1
 TCCR4C = 0x00;
    1afc:	e2 ea       	ldi	r30, 0xA2	; 162
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	10 82       	st	Z, r1
 TCCR4B = 0x05; //start Timer
    1b02:	e1 ea       	ldi	r30, 0xA1	; 161
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	80 83       	st	Z, r24
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <timer4_init2>:
//! timer 4 initialization
    /*!
	 timer 4 initialization and setting high and low values as per argument passed to this function and enable overflow interrupt
    */
void timer4_init2(int t)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
    1b18:	28 97       	sbiw	r28, 0x08	; 8
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
int higherBits = t/256;
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	98 87       	std	Y+8, r25	; 0x08
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
    1b30:	2f 81       	ldd	r18, Y+7	; 0x07
    1b32:	38 85       	ldd	r19, Y+8	; 0x08
    1b34:	33 23       	and	r19, r19
    1b36:	34 f4       	brge	.+12     	; 0x1b44 <timer4_init2+0x34>
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	81 50       	subi	r24, 0x01	; 1
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	98 87       	std	Y+8, r25	; 0x08
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	2f 81       	ldd	r18, Y+7	; 0x07
    1b46:	38 85       	ldd	r19, Y+8	; 0x08
    1b48:	83 2f       	mov	r24, r19
    1b4a:	99 27       	eor	r25, r25
    1b4c:	87 fd       	sbrc	r24, 7
    1b4e:	9a 95       	dec	r25
    1b50:	9c 83       	std	Y+4, r25	; 0x04
    1b52:	8b 83       	std	Y+3, r24	; 0x03
int lowerBits = t%256;
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	31 e0       	ldi	r19, 0x01	; 1
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <__divmodhi4>
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
 TCCR4B = 0x00; //stop
    1b66:	e1 ea       	ldi	r30, 0xA1	; 161
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	10 82       	st	Z, r1
 TCNT4H = higherBits; //Counter higher 8 bit value
    1b6c:	e5 ea       	ldi	r30, 0xA5	; 165
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	80 83       	st	Z, r24
 TCNT4L = lowerBits; //Counter lower 8 bit value
    1b74:	e4 ea       	ldi	r30, 0xA4	; 164
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	80 83       	st	Z, r24
 OCR4AH = 0x00; //Output Compair Register (OCR)- Not used
    1b7c:	e9 ea       	ldi	r30, 0xA9	; 169
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
 OCR4AL = 0x00; //Output Compair Register (OCR)- Not used
    1b82:	e8 ea       	ldi	r30, 0xA8	; 168
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	10 82       	st	Z, r1
 OCR4BH = 0x00; //Output Compair Register (OCR)- Not used
    1b88:	eb ea       	ldi	r30, 0xAB	; 171
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	10 82       	st	Z, r1
 OCR4BL = 0x00; //Output Compair Register (OCR)- Not used
    1b8e:	ea ea       	ldi	r30, 0xAA	; 170
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	10 82       	st	Z, r1
 OCR4CH = 0x00; //Output Compair Register (OCR)- Not used
    1b94:	ed ea       	ldi	r30, 0xAD	; 173
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	10 82       	st	Z, r1
 OCR4CL = 0x00; //Output Compair Register (OCR)- Not used
    1b9a:	ec ea       	ldi	r30, 0xAC	; 172
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	10 82       	st	Z, r1
 ICR4H  = 0x00; //Input Capture Register (ICR)- Not used
    1ba0:	e7 ea       	ldi	r30, 0xA7	; 167
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	10 82       	st	Z, r1
 ICR4L  = 0x00; //Input Capture Register (ICR)- Not used
    1ba6:	e6 ea       	ldi	r30, 0xA6	; 166
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	10 82       	st	Z, r1
 TCCR4A = 0x00; 
    1bac:	e0 ea       	ldi	r30, 0xA0	; 160
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	10 82       	st	Z, r1
 TCCR4C = 0x00;
    1bb2:	e2 ea       	ldi	r30, 0xA2	; 162
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	10 82       	st	Z, r1
 TCCR4B = 0x05; //start Timer
    1bb8:	e1 ea       	ldi	r30, 0xA1	; 161
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	85 e0       	ldi	r24, 0x05	; 5
    1bbe:	80 83       	st	Z, r24
}
    1bc0:	28 96       	adiw	r28, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <start_timer4>:

//Set the timer to get time precision of 5 ms using timer4 by setting TCNT4H and TCNT4L
void start_timer4() {
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62
	TCNT4H = 0xD8; //Counter higher 8 bit value
    1bda:	e5 ea       	ldi	r30, 0xA5	; 165
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	88 ed       	ldi	r24, 0xD8	; 216
    1be0:	80 83       	st	Z, r24
	TCNT4L = 0x36; //Counter lower 8 bit value
    1be2:	e4 ea       	ldi	r30, 0xA4	; 164
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	86 e3       	ldi	r24, 0x36	; 54
    1be8:	80 83       	st	Z, r24
	TCCR4B = 0x03;
    1bea:	e1 ea       	ldi	r30, 0xA1	; 161
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	80 83       	st	Z, r24
}
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <motion_pin_config>:
    /*!
	  the function to configure use of motion on the Bot
    */
//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1c00:	a1 e2       	ldi	r26, 0x21	; 33
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e1 e2       	ldi	r30, 0x21	; 33
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	8f 60       	ori	r24, 0x0F	; 15
    1c0c:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0;
    1c0e:	a2 e2       	ldi	r26, 0x22	; 34
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e2 e2       	ldi	r30, 0x22	; 34
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 7f       	andi	r24, 0xF0	; 240
    1c1a:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1c1c:	aa e0       	ldi	r26, 0x0A	; 10
    1c1e:	b1 e0       	ldi	r27, 0x01	; 1
    1c20:	ea e0       	ldi	r30, 0x0A	; 10
    1c22:	f1 e0       	ldi	r31, 0x01	; 1
    1c24:	80 81       	ld	r24, Z
    1c26:	88 61       	ori	r24, 0x18	; 24
    1c28:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1c2a:	ab e0       	ldi	r26, 0x0B	; 11
    1c2c:	b1 e0       	ldi	r27, 0x01	; 1
    1c2e:	eb e0       	ldi	r30, 0x0B	; 11
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	80 81       	ld	r24, Z
    1c34:	88 61       	ori	r24, 0x18	; 24
    1c36:	8c 93       	st	X, r24
}
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <velocity>:
//! velocity control
    /*!
	 Function for setting velocities of both wheels. pulse width modulation
    */
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    1c4e:	e8 e2       	ldi	r30, 0x28	; 40
    1c50:	f1 e0       	ldi	r31, 0x01	; 1
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	80 83       	st	Z, r24
	OCR5BL = (unsigned char)right_motor;
    1c56:	ea e2       	ldi	r30, 0x2A	; 42
    1c58:	f1 e0       	ldi	r31, 0x01	; 1
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	80 83       	st	Z, r24
	leftVel=left_motor;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	80 93 b1 03 	sts	0x03B1, r24
	rightVel=right_motor;
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	80 93 b4 03 	sts	0x03B4, r24
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <motion_set>:
//! setting motor's direction
    /*!
	 Function used for setting motor's direction
    */
void motion_set (unsigned char Direction)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	0f 92       	push	r0
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    1c82:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	8f 70       	andi	r24, 0x0F	; 15
    1c88:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    1c8a:	e2 e2       	ldi	r30, 0x22	; 34
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	80 7f       	andi	r24, 0xF0	; 240
    1c96:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    1c98:	99 81       	ldd	r25, Y+1	; 0x01
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	89 2b       	or	r24, r25
    1c9e:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    1ca0:	e2 e2       	ldi	r30, 0x22	; 34
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	80 83       	st	Z, r24
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <forward>:
//! setting motor's forward
    /*!
	 Function used for setting motor's direction forward
    */
void forward (void) 
{
    1cb2:	df 93       	push	r29
    1cb4:	cf 93       	push	r28
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x06);
    1cba:	86 e0       	ldi	r24, 0x06	; 6
    1cbc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <back>:
//! setting motor's direction back
    /*!
	 Function used for setting motor's direction back
    */
void back (void) //both wheels backward
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);
    1cce:	89 e0       	ldi	r24, 0x09	; 9
    1cd0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <left>:
//! setting motor's direction left
    /*!
	 Function used for setting motor's direction left
    */
void left (void) //Left wheel backward, Right wheel forward
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <right>:
//! setting motor's direction right
    /*!
	 Function used for setting motor's direction right
    */
void right (void) //Left wheel forward, Right wheel backward
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1cf6:	8a e0       	ldi	r24, 0x0A	; 10
    1cf8:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <soft_left>:
//! setting motor's direction soft left
    /*!
	 Function used for setting motor's direction soft left
    */
void soft_left (void) //Left wheel stationary, Right wheel forward
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x04);
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
    1d0c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	08 95       	ret

00001d16 <soft_right>:
    /*!
	 Function used for setting motor's direction soft right 
	 Left wheel forward, Right wheel is stationary
    */
void soft_right (void) //Left wheel forward, Right wheel is stationary
{
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x02);
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1d24:	cf 91       	pop	r28
    1d26:	df 91       	pop	r29
    1d28:	08 95       	ret

00001d2a <soft_left_2>:
    /*!
	 Function used for setting motor's direction soft left
	 Left wheel backward, right wheel stationary
    */
void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x01);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <soft_right_2>:
    /*!
	 Function used for setting motor's direction
	 Left wheel stationary, Right wheel backward
    */
void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x08);
    1d46:	88 e0       	ldi	r24, 0x08	; 8
    1d48:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <stop>:
//! stop the bot
    /*!
	 Function used for stoping the bot.
    */
void stop (void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
}
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <left_encoder_pin_config>:
//! starting the left wheel encoder
    /*!
	 Function used for starting the left wheel encoder
    */
void left_encoder_pin_config (void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1d6e:	ad e2       	ldi	r26, 0x2D	; 45
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ed e2       	ldi	r30, 0x2D	; 45
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8f 7e       	andi	r24, 0xEF	; 239
    1d7a:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pullup for PORTE 4 pin
    1d7c:	ae e2       	ldi	r26, 0x2E	; 46
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ee e2       	ldi	r30, 0x2E	; 46
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 61       	ori	r24, 0x10	; 16
    1d88:	8c 93       	st	X, r24
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <right_encoder_pin_config>:
//! starting the right wheel encoder
    /*!
	 Function used for starting the right wheel encoder
    */
void right_encoder_pin_config (void)
{
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    1d98:	ad e2       	ldi	r26, 0x2D	; 45
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	ed e2       	ldi	r30, 0x2D	; 45
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 7d       	andi	r24, 0xDF	; 223
    1da4:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pullup for PORTE 4 pin
    1da6:	ae e2       	ldi	r26, 0x2E	; 46
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	ee e2       	ldi	r30, 0x2E	; 46
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	80 62       	ori	r24, 0x20	; 32
    1db2:	8c 93       	st	X, r24
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <left_position_encoder_interrupt_init>:
//! enabling the left wheel encoder
    /*!
	 Function used for enabling the left wheel encoder
    */
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1dc2:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1dc4:	aa e6       	ldi	r26, 0x6A	; 106
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	ea e6       	ldi	r30, 0x6A	; 106
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	82 60       	ori	r24, 0x02	; 2
    1dd0:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1dd2:	ad e3       	ldi	r26, 0x3D	; 61
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ed e3       	ldi	r30, 0x3D	; 61
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 61       	ori	r24, 0x10	; 16
    1dde:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    1de0:	78 94       	sei
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <right_position_encoder_interrupt_init>:
//! enabling the right wheel encoder
    /*!
	 Function used for enabling the right wheel encoder
    */
void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    1df0:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1df2:	aa e6       	ldi	r26, 0x6A	; 106
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ea e6       	ldi	r30, 0x6A	; 106
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1e00:	ad e3       	ldi	r26, 0x3D	; 61
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ed e3       	ldi	r30, 0x3D	; 61
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 62       	ori	r24, 0x20	; 32
    1e0c:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    1e0e:	78 94       	sei
}
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <left_position_encoder_interrupt_disable>:
//! disable the left wheel encoder
    /*!
	 Function used for disabling the left wheel encoder
    */
void left_position_encoder_interrupt_disable (void) //Interrupt 4 enable
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
 curLeftCounter = 0;
    1e1e:	10 92 a1 03 	sts	0x03A1, r1
    1e22:	10 92 a2 03 	sts	0x03A2, r1
    1e26:	10 92 a3 03 	sts	0x03A3, r1
    1e2a:	10 92 a4 03 	sts	0x03A4, r1
    1e2e:	10 92 a5 03 	sts	0x03A5, r1
    1e32:	10 92 a6 03 	sts	0x03A6, r1
    1e36:	10 92 a7 03 	sts	0x03A7, r1
    1e3a:	10 92 a8 03 	sts	0x03A8, r1
 EIMSK = EIMSK & 0xEF; // Enable Interrupt INT4 for left position encoder
    1e3e:	ad e3       	ldi	r26, 0x3D	; 61
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	ed e3       	ldi	r30, 0x3D	; 61
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7e       	andi	r24, 0xEF	; 239
    1e4a:	8c 93       	st	X, r24
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <right_position_encoder_interrupt_disable>:
//! disable the right wheel encoder
    /*!
	 Function used for disabling the right wheel encoder
    */
void right_position_encoder_interrupt_disable (void) //Interrupt 5 enable
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
 curRightCounter = 0;
    1e5a:	10 92 91 03 	sts	0x0391, r1
    1e5e:	10 92 92 03 	sts	0x0392, r1
    1e62:	10 92 93 03 	sts	0x0393, r1
    1e66:	10 92 94 03 	sts	0x0394, r1
    1e6a:	10 92 95 03 	sts	0x0395, r1
    1e6e:	10 92 96 03 	sts	0x0396, r1
    1e72:	10 92 97 03 	sts	0x0397, r1
    1e76:	10 92 98 03 	sts	0x0398, r1
 EIMSK = EIMSK & 0xDF; // Enable Interrupt INT5 for right position encoder
    1e7a:	ad e3       	ldi	r26, 0x3D	; 61
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	ed e3       	ldi	r30, 0x3D	; 61
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8f 7d       	andi	r24, 0xDF	; 223
    1e86:	8c 93       	st	X, r24
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <turnRatio>:
    /*!
	 for traversing a arc/ a straight line, we have to calculate a urn ratio, that is the ratio of velocities of the left and right 
	 wheel velocities.
    */
float turnRatio(float radius,int dir)
{//radius is in cm
    1e8e:	ef 92       	push	r14
    1e90:	ff 92       	push	r15
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	2c 97       	sbiw	r28, 0x0c	; 12
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	6f 83       	std	Y+7, r22	; 0x07
    1eac:	78 87       	std	Y+8, r23	; 0x08
    1eae:	89 87       	std	Y+9, r24	; 0x09
    1eb0:	9a 87       	std	Y+10, r25	; 0x0a
    1eb2:	5c 87       	std	Y+12, r21	; 0x0c
    1eb4:	4b 87       	std	Y+11, r20	; 0x0b

	int w;
	w=WHEEL_DIST;
    1eb6:	8f e0       	ldi	r24, 0x0F	; 15
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
	float ratio;
		ratio=(float) ((float)(radius+w/2.0))/((float) (radius-w/2.0));
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	97 fd       	sbrc	r25, 7
    1ec6:	a0 95       	com	r26
    1ec8:	ba 2f       	mov	r27, r26
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 b3 40 	call	0x8166	; 0x8166 <__floatsisf>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e4       	ldi	r21, 0x40	; 64
    1ee2:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef0:	38 85       	ldd	r19, Y+8	; 0x08
    1ef2:	49 85       	ldd	r20, Y+9	; 0x09
    1ef4:	5a 85       	ldd	r21, Y+10	; 0x0a
    1ef6:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <__addsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	7c 01       	movw	r14, r24
    1f00:	8d 01       	movw	r16, r26
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	aa 27       	eor	r26, r26
    1f08:	97 fd       	sbrc	r25, 7
    1f0a:	a0 95       	com	r26
    1f0c:	ba 2f       	mov	r27, r26
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 b3 40 	call	0x8166	; 0x8166 <__floatsisf>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	50 ec       	ldi	r21, 0xC0	; 192
    1f26:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	2f 81       	ldd	r18, Y+7	; 0x07
    1f34:	38 85       	ldd	r19, Y+8	; 0x08
    1f36:	49 85       	ldd	r20, Y+9	; 0x09
    1f38:	5a 85       	ldd	r21, Y+10	; 0x0a
    1f3a:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <__addsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9c 01       	movw	r18, r24
    1f44:	ad 01       	movw	r20, r26
    1f46:	c8 01       	movw	r24, r16
    1f48:	b7 01       	movw	r22, r14
    1f4a:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	89 83       	std	Y+1, r24	; 0x01
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	ab 83       	std	Y+3, r26	; 0x03
    1f58:	bc 83       	std	Y+4, r27	; 0x04
		if(dir==2)//means left
    1f5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	91 05       	cpc	r25, r1
    1f62:	81 f4       	brne	.+32     	; 0x1f84 <turnRatio+0xf6>
		{	ratio=1.0/ratio;
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	80 e8       	ldi	r24, 0x80	; 128
    1f6a:	9f e3       	ldi	r25, 0x3F	; 63
    1f6c:	29 81       	ldd	r18, Y+1	; 0x01
    1f6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f70:	4b 81       	ldd	r20, Y+3	; 0x03
    1f72:	5c 81       	ldd	r21, Y+4	; 0x04
    1f74:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	9a 83       	std	Y+2, r25	; 0x02
    1f80:	ab 83       	std	Y+3, r26	; 0x03
    1f82:	bc 83       	std	Y+4, r27	; 0x04
		}
	return ratio;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	ab 81       	ldd	r26, Y+3	; 0x03
    1f8a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	2c 96       	adiw	r28, 0x0c	; 12
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	08 95       	ret

00001faa <strictForward>:
//! strictForward
    /*!
	 Function used for setting motor's direction strictForward
    */
void strictForward()
{
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	botRatio=1.0;
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	80 93 ab 03 	sts	0x03AB, r24
    1fbe:	90 93 ac 03 	sts	0x03AC, r25
    1fc2:	a0 93 ad 03 	sts	0x03AD, r26
    1fc6:	b0 93 ae 03 	sts	0x03AE, r27

	functionFlag=1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 6b 03 	sts	0x036B, r24
    1fd0:	10 92 6c 03 	sts	0x036C, r1
    1fd4:	10 92 6d 03 	sts	0x036D, r1
    1fd8:	10 92 6e 03 	sts	0x036E, r1
    1fdc:	10 92 6f 03 	sts	0x036F, r1
    1fe0:	10 92 70 03 	sts	0x0370, r1
    1fe4:	10 92 71 03 	sts	0x0371, r1
    1fe8:	10 92 72 03 	sts	0x0372, r1
	splRightCounter=curRightCounter;
    1fec:	20 91 91 03 	lds	r18, 0x0391
    1ff0:	30 91 92 03 	lds	r19, 0x0392
    1ff4:	40 91 93 03 	lds	r20, 0x0393
    1ff8:	50 91 94 03 	lds	r21, 0x0394
    1ffc:	60 91 95 03 	lds	r22, 0x0395
    2000:	70 91 96 03 	lds	r23, 0x0396
    2004:	80 91 97 03 	lds	r24, 0x0397
    2008:	90 91 98 03 	lds	r25, 0x0398
    200c:	20 93 bc 07 	sts	0x07BC, r18
    2010:	30 93 bd 07 	sts	0x07BD, r19
    2014:	40 93 be 07 	sts	0x07BE, r20
    2018:	50 93 bf 07 	sts	0x07BF, r21
    201c:	60 93 c0 07 	sts	0x07C0, r22
    2020:	70 93 c1 07 	sts	0x07C1, r23
    2024:	80 93 c2 07 	sts	0x07C2, r24
    2028:	90 93 c3 07 	sts	0x07C3, r25
	splLeftCounter=curLeftCounter;
    202c:	20 91 a1 03 	lds	r18, 0x03A1
    2030:	30 91 a2 03 	lds	r19, 0x03A2
    2034:	40 91 a3 03 	lds	r20, 0x03A3
    2038:	50 91 a4 03 	lds	r21, 0x03A4
    203c:	60 91 a5 03 	lds	r22, 0x03A5
    2040:	70 91 a6 03 	lds	r23, 0x03A6
    2044:	80 91 a7 03 	lds	r24, 0x03A7
    2048:	90 91 a8 03 	lds	r25, 0x03A8
    204c:	20 93 99 03 	sts	0x0399, r18
    2050:	30 93 9a 03 	sts	0x039A, r19
    2054:	40 93 9b 03 	sts	0x039B, r20
    2058:	50 93 9c 03 	sts	0x039C, r21
    205c:	60 93 9d 03 	sts	0x039D, r22
    2060:	70 93 9e 03 	sts	0x039E, r23
    2064:	80 93 9f 03 	sts	0x039F, r24
    2068:	90 93 a0 03 	sts	0x03A0, r25
	forward();
    206c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <strictBackward>:
//! strictBackward
    /*!
	 Function used for setting motor's direction strictBackward
    */
void strictBackward()
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
	botRatio=1.0;
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e8       	ldi	r26, 0x80	; 128
    2084:	bf e3       	ldi	r27, 0x3F	; 63
    2086:	80 93 ab 03 	sts	0x03AB, r24
    208a:	90 93 ac 03 	sts	0x03AC, r25
    208e:	a0 93 ad 03 	sts	0x03AD, r26
    2092:	b0 93 ae 03 	sts	0x03AE, r27

	functionFlag=1;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	80 93 6b 03 	sts	0x036B, r24
    209c:	10 92 6c 03 	sts	0x036C, r1
    20a0:	10 92 6d 03 	sts	0x036D, r1
    20a4:	10 92 6e 03 	sts	0x036E, r1
    20a8:	10 92 6f 03 	sts	0x036F, r1
    20ac:	10 92 70 03 	sts	0x0370, r1
    20b0:	10 92 71 03 	sts	0x0371, r1
    20b4:	10 92 72 03 	sts	0x0372, r1
	splRightCounter=curRightCounter;
    20b8:	20 91 91 03 	lds	r18, 0x0391
    20bc:	30 91 92 03 	lds	r19, 0x0392
    20c0:	40 91 93 03 	lds	r20, 0x0393
    20c4:	50 91 94 03 	lds	r21, 0x0394
    20c8:	60 91 95 03 	lds	r22, 0x0395
    20cc:	70 91 96 03 	lds	r23, 0x0396
    20d0:	80 91 97 03 	lds	r24, 0x0397
    20d4:	90 91 98 03 	lds	r25, 0x0398
    20d8:	20 93 bc 07 	sts	0x07BC, r18
    20dc:	30 93 bd 07 	sts	0x07BD, r19
    20e0:	40 93 be 07 	sts	0x07BE, r20
    20e4:	50 93 bf 07 	sts	0x07BF, r21
    20e8:	60 93 c0 07 	sts	0x07C0, r22
    20ec:	70 93 c1 07 	sts	0x07C1, r23
    20f0:	80 93 c2 07 	sts	0x07C2, r24
    20f4:	90 93 c3 07 	sts	0x07C3, r25
	splLeftCounter=curLeftCounter;
    20f8:	20 91 a1 03 	lds	r18, 0x03A1
    20fc:	30 91 a2 03 	lds	r19, 0x03A2
    2100:	40 91 a3 03 	lds	r20, 0x03A3
    2104:	50 91 a4 03 	lds	r21, 0x03A4
    2108:	60 91 a5 03 	lds	r22, 0x03A5
    210c:	70 91 a6 03 	lds	r23, 0x03A6
    2110:	80 91 a7 03 	lds	r24, 0x03A7
    2114:	90 91 a8 03 	lds	r25, 0x03A8
    2118:	20 93 99 03 	sts	0x0399, r18
    211c:	30 93 9a 03 	sts	0x039A, r19
    2120:	40 93 9b 03 	sts	0x039B, r20
    2124:	50 93 9c 03 	sts	0x039C, r21
    2128:	60 93 9d 03 	sts	0x039D, r22
    212c:	70 93 9e 03 	sts	0x039E, r23
    2130:	80 93 9f 03 	sts	0x039F, r24
    2134:	90 93 a0 03 	sts	0x03A0, r25
	back();
    2138:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <back>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <moveOnArc>:
    /*!
	 Function used for setting motor's direction to move on arc of given radius.
	 dir=1 means left dir=0 means right
    */
void moveOnArc(float radius,int dir)
{
    2142:	1f 93       	push	r17
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	62 97       	sbiw	r28, 0x12	; 18
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	6d 87       	std	Y+13, r22	; 0x0d
    215a:	7e 87       	std	Y+14, r23	; 0x0e
    215c:	8f 87       	std	Y+15, r24	; 0x0f
    215e:	98 8b       	std	Y+16, r25	; 0x10
    2160:	5a 8b       	std	Y+18, r21	; 0x12
    2162:	49 8b       	std	Y+17, r20	; 0x11

	float ratio,newLeftVel,newRightVel;
	ratio=turnRatio(radius,dir);
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	af 85       	ldd	r26, Y+15	; 0x0f
    216a:	b8 89       	ldd	r27, Y+16	; 0x10
    216c:	29 89       	ldd	r18, Y+17	; 0x11
    216e:	3a 89       	ldd	r19, Y+18	; 0x12
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	a9 01       	movw	r20, r18
    2176:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <turnRatio>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	89 87       	std	Y+9, r24	; 0x09
    2180:	9a 87       	std	Y+10, r25	; 0x0a
    2182:	ab 87       	std	Y+11, r26	; 0x0b
    2184:	bc 87       	std	Y+12, r27	; 0x0c

	functionFlag=1;
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 6b 03 	sts	0x036B, r24
    218c:	10 92 6c 03 	sts	0x036C, r1
    2190:	10 92 6d 03 	sts	0x036D, r1
    2194:	10 92 6e 03 	sts	0x036E, r1
    2198:	10 92 6f 03 	sts	0x036F, r1
    219c:	10 92 70 03 	sts	0x0370, r1
    21a0:	10 92 71 03 	sts	0x0371, r1
    21a4:	10 92 72 03 	sts	0x0372, r1
	botRatio=ratio;
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    21ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    21b0:	80 93 ab 03 	sts	0x03AB, r24
    21b4:	90 93 ac 03 	sts	0x03AC, r25
    21b8:	a0 93 ad 03 	sts	0x03AD, r26
    21bc:	b0 93 ae 03 	sts	0x03AE, r27

	leftVel=150;
    21c0:	86 e9       	ldi	r24, 0x96	; 150
    21c2:	80 93 b1 03 	sts	0x03B1, r24
	rightVel=150;
    21c6:	86 e9       	ldi	r24, 0x96	; 150
    21c8:	80 93 b4 03 	sts	0x03B4, r24
	if(ratio>1)
    21cc:	69 85       	ldd	r22, Y+9	; 0x09
    21ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    21d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    21d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <moveOnArc+0xa4>
    21e4:	4e c0       	rjmp	.+156    	; 0x2282 <__stack+0x83>
	{
		newRightVel=rightVel;
    21e6:	80 91 b4 03 	lds	r24, 0x03B4
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a0 e0       	ldi	r26, 0x00	; 0
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	ab 83       	std	Y+3, r26	; 0x03
    2204:	bc 83       	std	Y+4, r27	; 0x04
		newLeftVel=(float) newRightVel*ratio;
    2206:	69 81       	ldd	r22, Y+1	; 0x01
    2208:	7a 81       	ldd	r23, Y+2	; 0x02
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	29 85       	ldd	r18, Y+9	; 0x09
    2210:	3a 85       	ldd	r19, Y+10	; 0x0a
    2212:	4b 85       	ldd	r20, Y+11	; 0x0b
    2214:	5c 85       	ldd	r21, Y+12	; 0x0c
    2216:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8d 83       	std	Y+5, r24	; 0x05
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	af 83       	std	Y+7, r26	; 0x07
    2224:	b8 87       	std	Y+8, r27	; 0x08
		if(newLeftVel>254)
    2226:	6d 81       	ldd	r22, Y+5	; 0x05
    2228:	7e 81       	ldd	r23, Y+6	; 0x06
    222a:	8f 81       	ldd	r24, Y+7	; 0x07
    222c:	98 85       	ldd	r25, Y+8	; 0x08
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4e e7       	ldi	r20, 0x7E	; 126
    2234:	53 e4       	ldi	r21, 0x43	; 67
    2236:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	0c f0       	brlt	.+2      	; 0x2240 <__stack+0x41>
    223e:	6d c0       	rjmp	.+218    	; 0x231a <__stack+0x11b>
		{
			newLeftVel=leftVel;
    2240:	80 91 b1 03 	lds	r24, 0x03B1
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e0       	ldi	r26, 0x00	; 0
    224a:	b0 e0       	ldi	r27, 0x00	; 0
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8d 83       	std	Y+5, r24	; 0x05
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	af 83       	std	Y+7, r26	; 0x07
    225e:	b8 87       	std	Y+8, r27	; 0x08
			newRightVel=(float)newLeftVel/ratio;
    2260:	6d 81       	ldd	r22, Y+5	; 0x05
    2262:	7e 81       	ldd	r23, Y+6	; 0x06
    2264:	8f 81       	ldd	r24, Y+7	; 0x07
    2266:	98 85       	ldd	r25, Y+8	; 0x08
    2268:	29 85       	ldd	r18, Y+9	; 0x09
    226a:	3a 85       	ldd	r19, Y+10	; 0x0a
    226c:	4b 85       	ldd	r20, Y+11	; 0x0b
    226e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2270:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	ab 83       	std	Y+3, r26	; 0x03
    227e:	bc 83       	std	Y+4, r27	; 0x04
    2280:	4c c0       	rjmp	.+152    	; 0x231a <__stack+0x11b>
		}
	}
	else 
	{
		newLeftVel=leftVel;
    2282:	80 91 b1 03 	lds	r24, 0x03B1
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	bc 01       	movw	r22, r24
    2290:	cd 01       	movw	r24, r26
    2292:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	af 83       	std	Y+7, r26	; 0x07
    22a0:	b8 87       	std	Y+8, r27	; 0x08
		newRightVel=(float) newLeftVel/ratio;
    22a2:	6d 81       	ldd	r22, Y+5	; 0x05
    22a4:	7e 81       	ldd	r23, Y+6	; 0x06
    22a6:	8f 81       	ldd	r24, Y+7	; 0x07
    22a8:	98 85       	ldd	r25, Y+8	; 0x08
    22aa:	29 85       	ldd	r18, Y+9	; 0x09
    22ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ae:	4b 85       	ldd	r20, Y+11	; 0x0b
    22b0:	5c 85       	ldd	r21, Y+12	; 0x0c
    22b2:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	9a 83       	std	Y+2, r25	; 0x02
    22be:	ab 83       	std	Y+3, r26	; 0x03
    22c0:	bc 83       	std	Y+4, r27	; 0x04
		if(newRightVel>254)
    22c2:	69 81       	ldd	r22, Y+1	; 0x01
    22c4:	7a 81       	ldd	r23, Y+2	; 0x02
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	4e e7       	ldi	r20, 0x7E	; 126
    22d0:	53 e4       	ldi	r21, 0x43	; 67
    22d2:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	04 f5       	brge	.+64     	; 0x231a <__stack+0x11b>
		{
			newRightVel=rightVel;
    22da:	80 91 b4 03 	lds	r24, 0x03B4
    22de:	88 2f       	mov	r24, r24
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e0       	ldi	r26, 0x00	; 0
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	89 83       	std	Y+1, r24	; 0x01
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	ab 83       	std	Y+3, r26	; 0x03
    22f8:	bc 83       	std	Y+4, r27	; 0x04
			newLeftVel=(float)newRightVel*ratio;
    22fa:	69 81       	ldd	r22, Y+1	; 0x01
    22fc:	7a 81       	ldd	r23, Y+2	; 0x02
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	29 85       	ldd	r18, Y+9	; 0x09
    2304:	3a 85       	ldd	r19, Y+10	; 0x0a
    2306:	4b 85       	ldd	r20, Y+11	; 0x0b
    2308:	5c 85       	ldd	r21, Y+12	; 0x0c
    230a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	af 83       	std	Y+7, r26	; 0x07
    2318:	b8 87       	std	Y+8, r27	; 0x08
		}
	}
	splLeftCounter=curLeftCounter;
    231a:	20 91 a1 03 	lds	r18, 0x03A1
    231e:	30 91 a2 03 	lds	r19, 0x03A2
    2322:	40 91 a3 03 	lds	r20, 0x03A3
    2326:	50 91 a4 03 	lds	r21, 0x03A4
    232a:	60 91 a5 03 	lds	r22, 0x03A5
    232e:	70 91 a6 03 	lds	r23, 0x03A6
    2332:	80 91 a7 03 	lds	r24, 0x03A7
    2336:	90 91 a8 03 	lds	r25, 0x03A8
    233a:	20 93 99 03 	sts	0x0399, r18
    233e:	30 93 9a 03 	sts	0x039A, r19
    2342:	40 93 9b 03 	sts	0x039B, r20
    2346:	50 93 9c 03 	sts	0x039C, r21
    234a:	60 93 9d 03 	sts	0x039D, r22
    234e:	70 93 9e 03 	sts	0x039E, r23
    2352:	80 93 9f 03 	sts	0x039F, r24
    2356:	90 93 a0 03 	sts	0x03A0, r25
	splRightCounter=curRightCounter;
    235a:	20 91 91 03 	lds	r18, 0x0391
    235e:	30 91 92 03 	lds	r19, 0x0392
    2362:	40 91 93 03 	lds	r20, 0x0393
    2366:	50 91 94 03 	lds	r21, 0x0394
    236a:	60 91 95 03 	lds	r22, 0x0395
    236e:	70 91 96 03 	lds	r23, 0x0396
    2372:	80 91 97 03 	lds	r24, 0x0397
    2376:	90 91 98 03 	lds	r25, 0x0398
    237a:	20 93 bc 07 	sts	0x07BC, r18
    237e:	30 93 bd 07 	sts	0x07BD, r19
    2382:	40 93 be 07 	sts	0x07BE, r20
    2386:	50 93 bf 07 	sts	0x07BF, r21
    238a:	60 93 c0 07 	sts	0x07C0, r22
    238e:	70 93 c1 07 	sts	0x07C1, r23
    2392:	80 93 c2 07 	sts	0x07C2, r24
    2396:	90 93 c3 07 	sts	0x07C3, r25

	velocity((unsigned char) newLeftVel,(unsigned char) newRightVel);
    239a:	6d 81       	ldd	r22, Y+5	; 0x05
    239c:	7e 81       	ldd	r23, Y+6	; 0x06
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	98 85       	ldd	r25, Y+8	; 0x08
    23a2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	18 2f       	mov	r17, r24
    23ac:	69 81       	ldd	r22, Y+1	; 0x01
    23ae:	7a 81       	ldd	r23, Y+2	; 0x02
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	98 2f       	mov	r25, r24
    23be:	81 2f       	mov	r24, r17
    23c0:	69 2f       	mov	r22, r25
    23c2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
	forward();
    23c6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
}
    23ca:	62 96       	adiw	r28, 0x12	; 18
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	1f 91       	pop	r17
    23dc:	08 95       	ret

000023de <send_data_bt>:

//Set this to 1 if BLUETOOTH is being used. If using serial communication, then set it to 0
#define USE_BLUETOOTH 1

//Send one byte over the bluetooth
void send_data_bt (unsigned char data) {
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	2f 97       	sbiw	r28, 0x0f	; 15
    23e8:	0f b6       	in	r0, 0x3f	; 63
    23ea:	f8 94       	cli
    23ec:	de bf       	out	0x3e, r29	; 62
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	cd bf       	out	0x3d, r28	; 61
    23f2:	8f 87       	std	Y+15, r24	; 0x0f
	UDR3 = data;
    23f4:	e6 e3       	ldi	r30, 0x36	; 54
    23f6:	f1 e0       	ldi	r31, 0x01	; 1
    23f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23fa:	80 83       	st	Z, r24
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e4       	ldi	r27, 0x40	; 64
    2404:	8b 87       	std	Y+11, r24	; 0x0b
    2406:	9c 87       	std	Y+12, r25	; 0x0c
    2408:	ad 87       	std	Y+13, r26	; 0x0d
    240a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6b 85       	ldd	r22, Y+11	; 0x0b
    240e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2410:	8d 85       	ldd	r24, Y+13	; 0x0d
    2412:	9e 85       	ldd	r25, Y+14	; 0x0e
    2414:	2d ec       	ldi	r18, 0xCD	; 205
    2416:	3c ec       	ldi	r19, 0xCC	; 204
    2418:	4c e2       	ldi	r20, 0x2C	; 44
    241a:	55 e4       	ldi	r21, 0x45	; 69
    241c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8f 83       	std	Y+7, r24	; 0x07
    2426:	98 87       	std	Y+8, r25	; 0x08
    2428:	a9 87       	std	Y+9, r26	; 0x09
    242a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    242c:	6f 81       	ldd	r22, Y+7	; 0x07
    242e:	78 85       	ldd	r23, Y+8	; 0x08
    2430:	89 85       	ldd	r24, Y+9	; 0x09
    2432:	9a 85       	ldd	r25, Y+10	; 0x0a
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <send_data_bt+0x70>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <send_data_bt+0xee>
	else if (__tmp > 65535)
    244e:	6f 81       	ldd	r22, Y+7	; 0x07
    2450:	78 85       	ldd	r23, Y+8	; 0x08
    2452:	89 85       	ldd	r24, Y+9	; 0x09
    2454:	9a 85       	ldd	r25, Y+10	; 0x0a
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <send_data_bt+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6b 85       	ldd	r22, Y+11	; 0x0b
    2468:	7c 85       	ldd	r23, Y+12	; 0x0c
    246a:	8d 85       	ldd	r24, Y+13	; 0x0d
    246c:	9e 85       	ldd	r25, Y+14	; 0x0e
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <send_data_bt+0xd0>
    2490:	84 e1       	ldi	r24, 0x14	; 20
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	9c 83       	std	Y+4, r25	; 0x04
    2496:	8b 83       	std	Y+3, r24	; 0x03
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	9c 81       	ldd	r25, Y+4	; 0x04
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <send_data_bt+0xbe>
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8d 81       	ldd	r24, Y+5	; 0x05
    24a6:	9e 81       	ldd	r25, Y+6	; 0x06
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <send_data_bt+0xb2>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <send_data_bt+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ba:	78 85       	ldd	r23, Y+8	; 0x08
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c0:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9e 83       	std	Y+6, r25	; 0x06
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	8d 81       	ldd	r24, Y+5	; 0x05
    24ce:	9e 81       	ldd	r25, Y+6	; 0x06
    24d0:	9a 83       	std	Y+2, r25	; 0x02
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	9a 81       	ldd	r25, Y+2	; 0x02
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <send_data_bt+0xfa>
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    24e0:	2f 96       	adiw	r28, 0x0f	; 15
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <add_to_input>:

#define USE_PROTOCOL 1

//Add the received character to the buffer (not used)
void add_to_input (unsigned char data) {
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <add_to_input+0x6>
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	8b 83       	std	Y+3, r24	; 0x03

	charPack *temp;

	temp=(charPack *) malloc(sizeof(charPack));
    24fe:	83 e0       	ldi	r24, 0x03	; 3
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 ef 43 	call	0x87de	; 0x87de <malloc>
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	89 83       	std	Y+1, r24	; 0x01
	temp->next = NULL;
    250a:	e9 81       	ldd	r30, Y+1	; 0x01
    250c:	fa 81       	ldd	r31, Y+2	; 0x02
    250e:	12 82       	std	Z+2, r1	; 0x02
    2510:	11 82       	std	Z+1, r1	; 0x01
	temp->data = (unsigned char) data;
    2512:	e9 81       	ldd	r30, Y+1	; 0x01
    2514:	fa 81       	ldd	r31, Y+2	; 0x02
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	80 83       	st	Z, r24

	if(serialDataEnd == NULL) {
    251a:	80 91 54 03 	lds	r24, 0x0354
    251e:	90 91 55 03 	lds	r25, 0x0355
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	39 f4       	brne	.+14     	; 0x2534 <add_to_input+0x42>
		serialDataEnd=temp;
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	9a 81       	ldd	r25, Y+2	; 0x02
    252a:	90 93 55 03 	sts	0x0355, r25
    252e:	80 93 54 03 	sts	0x0354, r24
    2532:	0e c0       	rjmp	.+28     	; 0x2550 <add_to_input+0x5e>
	}
	else
	{
		 serialDataEnd->next=temp;
    2534:	e0 91 54 03 	lds	r30, 0x0354
    2538:	f0 91 55 03 	lds	r31, 0x0355
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	92 83       	std	Z+2, r25	; 0x02
    2542:	81 83       	std	Z+1, r24	; 0x01
		 serialDataEnd=temp;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	90 93 55 03 	sts	0x0355, r25
    254c:	80 93 54 03 	sts	0x0354, r24
	}
	if(serialDataStart == NULL) {
    2550:	80 91 52 03 	lds	r24, 0x0352
    2554:	90 91 53 03 	lds	r25, 0x0353
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	41 f4       	brne	.+16     	; 0x256c <add_to_input+0x7a>
		serialDataStart = serialDataEnd;     
    255c:	80 91 54 03 	lds	r24, 0x0354
    2560:	90 91 55 03 	lds	r25, 0x0355
    2564:	90 93 53 03 	sts	0x0353, r25
    2568:	80 93 52 03 	sts	0x0352, r24
	}

}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	08 95       	ret

00002578 <__vector_54>:

//ISR for handling any received input from the bluetooth
//IMPORTANT : Only minimal processing can be done in this function. Otherwise there is a chance that you may not receive all the input!
SIGNAL(SIG_USART3_RECV)         // ISR for receive complete interrupt
{
    2578:	1f 92       	push	r1
    257a:	0f 92       	push	r0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	0f 92       	push	r0
    2580:	00 90 5b 00 	lds	r0, 0x005B
    2584:	0f 92       	push	r0
    2586:	11 24       	eor	r1, r1
    2588:	2f 93       	push	r18
    258a:	3f 93       	push	r19
    258c:	4f 93       	push	r20
    258e:	5f 93       	push	r21
    2590:	6f 93       	push	r22
    2592:	7f 93       	push	r23
    2594:	8f 93       	push	r24
    2596:	9f 93       	push	r25
    2598:	af 93       	push	r26
    259a:	bf 93       	push	r27
    259c:	ef 93       	push	r30
    259e:	ff 93       	push	r31
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	2e 97       	sbiw	r28, 0x0e	; 14
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	cd bf       	out	0x3d, r28	; 61

	rcvd_data[rcvd_data_end] = UDR3;
    25ae:	80 91 85 03 	lds	r24, 0x0385
    25b2:	90 91 86 03 	lds	r25, 0x0386
    25b6:	e6 e3       	ldi	r30, 0x36	; 54
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	20 81       	ld	r18, Z
    25bc:	fc 01       	movw	r30, r24
    25be:	e5 54       	subi	r30, 0x45	; 69
    25c0:	fc 4f       	sbci	r31, 0xFC	; 252
    25c2:	20 83       	st	Z, r18
	rcvd_data_end++;
    25c4:	80 91 85 03 	lds	r24, 0x0385
    25c8:	90 91 86 03 	lds	r25, 0x0386
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	90 93 86 03 	sts	0x0386, r25
    25d2:	80 93 85 03 	sts	0x0385, r24
	if (rcvd_data_end == 1024) rcvd_data_end = 0;
    25d6:	80 91 85 03 	lds	r24, 0x0385
    25da:	90 91 86 03 	lds	r25, 0x0386
    25de:	24 e0       	ldi	r18, 0x04	; 4
    25e0:	80 30       	cpi	r24, 0x00	; 0
    25e2:	92 07       	cpc	r25, r18
    25e4:	21 f4       	brne	.+8      	; 0x25ee <__vector_54+0x76>
    25e6:	10 92 86 03 	sts	0x0386, r1
    25ea:	10 92 85 03 	sts	0x0385, r1
	if (rcvd_data_end == rcvd_data_start) {
    25ee:	20 91 85 03 	lds	r18, 0x0385
    25f2:	30 91 86 03 	lds	r19, 0x0386
    25f6:	80 91 83 03 	lds	r24, 0x0383
    25fa:	90 91 84 03 	lds	r25, 0x0384
    25fe:	28 17       	cp	r18, r24
    2600:	39 07       	cpc	r19, r25
    2602:	09 f0       	breq	.+2      	; 0x2606 <__vector_54+0x8e>
    2604:	78 c0       	rjmp	.+240    	; 0x26f6 <__vector_54+0x17e>
		buzzer_on();
    2606:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
		lcd_string("Buffer overflow!");
    260a:	86 e2       	ldi	r24, 0x26	; 38
    260c:	92 e0       	ldi	r25, 0x02	; 2
    260e:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e4       	ldi	r25, 0x40	; 64
    2616:	ac e9       	ldi	r26, 0x9C	; 156
    2618:	b5 e4       	ldi	r27, 0x45	; 69
    261a:	8b 87       	std	Y+11, r24	; 0x0b
    261c:	9c 87       	std	Y+12, r25	; 0x0c
    261e:	ad 87       	std	Y+13, r26	; 0x0d
    2620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	2d ec       	ldi	r18, 0xCD	; 205
    262c:	3c ec       	ldi	r19, 0xCC	; 204
    262e:	4c e2       	ldi	r20, 0x2C	; 44
    2630:	55 e4       	ldi	r21, 0x45	; 69
    2632:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8f 83       	std	Y+7, r24	; 0x07
    263c:	98 87       	std	Y+8, r25	; 0x08
    263e:	a9 87       	std	Y+9, r26	; 0x09
    2640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <__vector_54+0xec>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9e 83       	std	Y+6, r25	; 0x06
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <__vector_54+0x16a>
	else if (__tmp > 65535)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <__vector_54+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	6b 85       	ldd	r22, Y+11	; 0x0b
    267e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	9e 85       	ldd	r25, Y+14	; 0x0e
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9e 83       	std	Y+6, r25	; 0x06
    26a2:	8d 83       	std	Y+5, r24	; 0x05
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <__vector_54+0x14c>
    26a6:	84 e1       	ldi	r24, 0x14	; 20
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	9c 83       	std	Y+4, r25	; 0x04
    26ac:	8b 83       	std	Y+3, r24	; 0x03
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	9c 81       	ldd	r25, Y+4	; 0x04
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <__vector_54+0x13a>
    26b6:	9c 83       	std	Y+4, r25	; 0x04
    26b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9e 83       	std	Y+6, r25	; 0x06
    26c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	9e 81       	ldd	r25, Y+6	; 0x06
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <__vector_54+0x12e>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <__vector_54+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6f 81       	ldd	r22, Y+7	; 0x07
    26d0:	78 85       	ldd	r23, Y+8	; 0x08
    26d2:	89 85       	ldd	r24, Y+9	; 0x09
    26d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d6:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	9a 83       	std	Y+2, r25	; 0x02
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	9a 81       	ldd	r25, Y+2	; 0x02
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <__vector_54+0x176>
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5000);
	}
	
}
    26f6:	2e 96       	adiw	r28, 0x0e	; 14
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	ff 91       	pop	r31
    2702:	ef 91       	pop	r30
    2704:	bf 91       	pop	r27
    2706:	af 91       	pop	r26
    2708:	9f 91       	pop	r25
    270a:	8f 91       	pop	r24
    270c:	7f 91       	pop	r23
    270e:	6f 91       	pop	r22
    2710:	5f 91       	pop	r21
    2712:	4f 91       	pop	r20
    2714:	3f 91       	pop	r19
    2716:	2f 91       	pop	r18
    2718:	0f 90       	pop	r0
    271a:	00 92 5b 00 	sts	0x005B, r0
    271e:	0f 90       	pop	r0
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	0f 90       	pop	r0
    2724:	1f 90       	pop	r1
    2726:	18 95       	reti

00002728 <uart3_init>:
//!bluetooth usage    
	/*!
	 Function used for initializing uart3
    */
void uart3_init(void)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
 UCSR3B = 0x00; //disable while setting baud rate
    2730:	e1 e3       	ldi	r30, 0x31	; 49
    2732:	f1 e0       	ldi	r31, 0x01	; 1
    2734:	10 82       	st	Z, r1
 UCSR3A = 0x00;
    2736:	e0 e3       	ldi	r30, 0x30	; 48
    2738:	f1 e0       	ldi	r31, 0x01	; 1
    273a:	10 82       	st	Z, r1
 UCSR3C = 0x06;
    273c:	e2 e3       	ldi	r30, 0x32	; 50
    273e:	f1 e0       	ldi	r31, 0x01	; 1
    2740:	86 e0       	ldi	r24, 0x06	; 6
    2742:	80 83       	st	Z, r24
 //UBRR3L = 0x5F; //set baud rate lo (FOR BOT FREQUENCY 14745600)
 UBRR3L = 0x47; //set baud rate lo (FOR BOT FREQUENCY 11059200)
    2744:	e4 e3       	ldi	r30, 0x34	; 52
    2746:	f1 e0       	ldi	r31, 0x01	; 1
    2748:	87 e4       	ldi	r24, 0x47	; 71
    274a:	80 83       	st	Z, r24
 UBRR3H = 0x00; //set baud rate hi
    274c:	e5 e3       	ldi	r30, 0x35	; 53
    274e:	f1 e0       	ldi	r31, 0x01	; 1
    2750:	10 82       	st	Z, r1
 UCSR3B = 0x98;
    2752:	e1 e3       	ldi	r30, 0x31	; 49
    2754:	f1 e0       	ldi	r31, 0x01	; 1
    2756:	88 e9       	ldi	r24, 0x98	; 152
    2758:	80 83       	st	Z, r24
}
    275a:	cf 91       	pop	r28
    275c:	df 91       	pop	r29
    275e:	08 95       	ret

00002760 <__vector_51>:
    /*!
	 intterupt generated when data is recieved from USB 
    */
//receives the data over the usb and stores it in a linked list. Also parses the input and applies the protocol to extract out the command from the input
SIGNAL(SIG_USART2_RECV)         // ISR for receive complete interrupt
{
    2760:	1f 92       	push	r1
    2762:	0f 92       	push	r0
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	0f 92       	push	r0
    2768:	00 90 5b 00 	lds	r0, 0x005B
    276c:	0f 92       	push	r0
    276e:	11 24       	eor	r1, r1
    2770:	2f 93       	push	r18
    2772:	3f 93       	push	r19
    2774:	4f 93       	push	r20
    2776:	5f 93       	push	r21
    2778:	6f 93       	push	r22
    277a:	7f 93       	push	r23
    277c:	8f 93       	push	r24
    277e:	9f 93       	push	r25
    2780:	af 93       	push	r26
    2782:	bf 93       	push	r27
    2784:	ef 93       	push	r30
    2786:	ff 93       	push	r31
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	0f 92       	push	r0
    278e:	0f 92       	push	r0
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    data = UDR2;                 //making copy of data from UDR2 in 'data' variable 
    2794:	e6 ed       	ldi	r30, 0xD6	; 214
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	80 93 30 08 	sts	0x0830, r24
	//lcd_wr_char(data);

	/* add character to input buffer */
    charPack *temp;

    temp=(charPack *) malloc(sizeof(charPack));
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 ef 43 	call	0x87de	; 0x87de <malloc>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
    temp->next=NULL;
    27aa:	e9 81       	ldd	r30, Y+1	; 0x01
    27ac:	fa 81       	ldd	r31, Y+2	; 0x02
    27ae:	12 82       	std	Z+2, r1	; 0x02
    27b0:	11 82       	std	Z+1, r1	; 0x01
    temp->data=(unsigned char) data;
    27b2:	80 91 30 08 	lds	r24, 0x0830
    27b6:	e9 81       	ldd	r30, Y+1	; 0x01
    27b8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ba:	80 83       	st	Z, r24
    serial_lock=1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	90 93 57 03 	sts	0x0357, r25
    27c4:	80 93 56 03 	sts	0x0356, r24
    if(serialDataEnd==NULL) serialDataEnd=temp;
    27c8:	80 91 54 03 	lds	r24, 0x0354
    27cc:	90 91 55 03 	lds	r25, 0x0355
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	39 f4       	brne	.+14     	; 0x27e2 <__vector_51+0x82>
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	90 93 55 03 	sts	0x0355, r25
    27dc:	80 93 54 03 	sts	0x0354, r24
    27e0:	0e c0       	rjmp	.+28     	; 0x27fe <__vector_51+0x9e>
    else
    {
         serialDataEnd->next=temp;
    27e2:	e0 91 54 03 	lds	r30, 0x0354
    27e6:	f0 91 55 03 	lds	r31, 0x0355
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	92 83       	std	Z+2, r25	; 0x02
    27f0:	81 83       	std	Z+1, r24	; 0x01
         serialDataEnd=temp;
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	90 93 55 03 	sts	0x0355, r25
    27fa:	80 93 54 03 	sts	0x0354, r24
    }
    if(serialDataStart==NULL) serialDataStart=serialDataEnd;     
    27fe:	80 91 52 03 	lds	r24, 0x0352
    2802:	90 91 53 03 	lds	r25, 0x0353
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	41 f4       	brne	.+16     	; 0x281a <__vector_51+0xba>
    280a:	80 91 54 03 	lds	r24, 0x0354
    280e:	90 91 55 03 	lds	r25, 0x0355
    2812:	90 93 53 03 	sts	0x0353, r25
    2816:	80 93 52 03 	sts	0x0352, r24

	/* check if you are done with the current command */
	if (--bytes_remaining) return;
    281a:	80 91 3e 02 	lds	r24, 0x023E
    281e:	90 91 3f 02 	lds	r25, 0x023F
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	90 93 3f 02 	sts	0x023F, r25
    2828:	80 93 3e 02 	sts	0x023E, r24
    282c:	80 91 3e 02 	lds	r24, 0x023E
    2830:	90 91 3f 02 	lds	r25, 0x023F
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	09 f0       	breq	.+2      	; 0x283a <__vector_51+0xda>
    2838:	53 c0       	rjmp	.+166    	; 0x28e0 <__vector_51+0x180>
	
	/* next state */
	if (state == START_BYTE){
    283a:	80 91 8f 03 	lds	r24, 0x038F
    283e:	90 91 90 03 	lds	r25, 0x0390
    2842:	00 97       	sbiw	r24, 0x00	; 0
    2844:	01 f5       	brne	.+64     	; 0x2886 <__vector_51+0x126>
		buzzer_prompt(1000);
    2846:	88 ee       	ldi	r24, 0xE8	; 232
    2848:	93 e0       	ldi	r25, 0x03	; 3
    284a:	0e 94 25 0b 	call	0x164a	; 0x164a <buzzer_prompt>
		if (!(data & 0xC0)){ //multiple bytes expected
    284e:	80 91 30 08 	lds	r24, 0x0830
    2852:	88 2f       	mov	r24, r24
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	80 7c       	andi	r24, 0xC0	; 192
    2858:	90 70       	andi	r25, 0x00	; 0
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	39 f4       	brne	.+14     	; 0x286c <__vector_51+0x10c>
			state = SIZE_BYTE;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	90 93 90 03 	sts	0x0390, r25
    2866:	80 93 8f 03 	sts	0x038F, r24
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <__vector_51+0x118>
		}
		else command_rcvd = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	90 93 7a 03 	sts	0x037A, r25
    2874:	80 93 79 03 	sts	0x0379, r24
		bytes_remaining = 1;
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	90 93 3f 02 	sts	0x023F, r25
    2880:	80 93 3e 02 	sts	0x023E, r24
    2884:	2d c0       	rjmp	.+90     	; 0x28e0 <__vector_51+0x180>
	}
	else if (state == SIZE_BYTE){
    2886:	80 91 8f 03 	lds	r24, 0x038F
    288a:	90 91 90 03 	lds	r25, 0x0390
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	91 05       	cpc	r25, r1
    2892:	79 f4       	brne	.+30     	; 0x28b2 <__vector_51+0x152>
		bytes_remaining = data;
    2894:	80 91 30 08 	lds	r24, 0x0830
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	90 93 3f 02 	sts	0x023F, r25
    28a0:	80 93 3e 02 	sts	0x023E, r24
		//buzzer_prompt();
		state = MULT_BYTE;
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	90 93 90 03 	sts	0x0390, r25
    28ac:	80 93 8f 03 	sts	0x038F, r24
    28b0:	17 c0       	rjmp	.+46     	; 0x28e0 <__vector_51+0x180>
	} 
	else if (state == MULT_BYTE){
    28b2:	80 91 8f 03 	lds	r24, 0x038F
    28b6:	90 91 90 03 	lds	r25, 0x0390
    28ba:	82 30       	cpi	r24, 0x02	; 2
    28bc:	91 05       	cpc	r25, r1
    28be:	81 f4       	brne	.+32     	; 0x28e0 <__vector_51+0x180>
		bytes_remaining = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	90 93 3f 02 	sts	0x023F, r25
    28c8:	80 93 3e 02 	sts	0x023E, r24
		state = START_BYTE;
    28cc:	10 92 90 03 	sts	0x0390, r1
    28d0:	10 92 8f 03 	sts	0x038F, r1
		command_rcvd = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	90 93 7a 03 	sts	0x037A, r25
    28dc:	80 93 79 03 	sts	0x0379, r24
	}
}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	ff 91       	pop	r31
    28ea:	ef 91       	pop	r30
    28ec:	bf 91       	pop	r27
    28ee:	af 91       	pop	r26
    28f0:	9f 91       	pop	r25
    28f2:	8f 91       	pop	r24
    28f4:	7f 91       	pop	r23
    28f6:	6f 91       	pop	r22
    28f8:	5f 91       	pop	r21
    28fa:	4f 91       	pop	r20
    28fc:	3f 91       	pop	r19
    28fe:	2f 91       	pop	r18
    2900:	0f 90       	pop	r0
    2902:	00 92 5b 00 	sts	0x005B, r0
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <serial_sendString>:
    /*!
	 function to recieve a string from zigbee followed by a marker terminal #
    */
// Use only with python controller (not used!)
void serial_sendString(char str[])
{
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
    291c:	ae 97       	sbiw	r28, 0x2e	; 46
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	cd bf       	out	0x3d, r28	; 61
    2928:	9e a7       	std	Y+46, r25	; 0x2e
    292a:	8d a7       	std	Y+45, r24	; 0x2d
	int i;
	lcd_cursor(1,1);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	UDR2='#';
    2934:	e6 ed       	ldi	r30, 0xD6	; 214
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	83 e2       	ldi	r24, 0x23	; 35
    293a:	80 83       	st	Z, r24
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 e8       	ldi	r26, 0x80	; 128
    2942:	bf e3       	ldi	r27, 0x3F	; 63
    2944:	8f a3       	std	Y+39, r24	; 0x27
    2946:	98 a7       	std	Y+40, r25	; 0x28
    2948:	a9 a7       	std	Y+41, r26	; 0x29
    294a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6f a1       	ldd	r22, Y+39	; 0x27
    294e:	78 a5       	ldd	r23, Y+40	; 0x28
    2950:	89 a5       	ldd	r24, Y+41	; 0x29
    2952:	9a a5       	ldd	r25, Y+42	; 0x2a
    2954:	2d ec       	ldi	r18, 0xCD	; 205
    2956:	3c ec       	ldi	r19, 0xCC	; 204
    2958:	4c e2       	ldi	r20, 0x2C	; 44
    295a:	55 e4       	ldi	r21, 0x45	; 69
    295c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8b a3       	std	Y+35, r24	; 0x23
    2966:	9c a3       	std	Y+36, r25	; 0x24
    2968:	ad a3       	std	Y+37, r26	; 0x25
    296a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    296c:	6b a1       	ldd	r22, Y+35	; 0x23
    296e:	7c a1       	ldd	r23, Y+36	; 0x24
    2970:	8d a1       	ldd	r24, Y+37	; 0x25
    2972:	9e a1       	ldd	r25, Y+38	; 0x26
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <serial_sendString+0x7e>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <serial_sendString+0xfc>
	else if (__tmp > 65535)
    298e:	6b a1       	ldd	r22, Y+35	; 0x23
    2990:	7c a1       	ldd	r23, Y+36	; 0x24
    2992:	8d a1       	ldd	r24, Y+37	; 0x25
    2994:	9e a1       	ldd	r25, Y+38	; 0x26
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <serial_sendString+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6f a1       	ldd	r22, Y+39	; 0x27
    29a8:	78 a5       	ldd	r23, Y+40	; 0x28
    29aa:	89 a5       	ldd	r24, Y+41	; 0x29
    29ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <serial_sendString+0xde>
    29d0:	84 e1       	ldi	r24, 0x14	; 20
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	98 a3       	std	Y+32, r25	; 0x20
    29d6:	8f 8f       	std	Y+31, r24	; 0x1f
    29d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29da:	98 a1       	ldd	r25, Y+32	; 0x20
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <serial_sendString+0xcc>
    29e0:	98 a3       	std	Y+32, r25	; 0x20
    29e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	89 a1       	ldd	r24, Y+33	; 0x21
    29e6:	9a a1       	ldd	r25, Y+34	; 0x22
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <serial_sendString+0xc0>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <serial_sendString+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9a a3       	std	Y+34, r25	; 0x22
    2a0a:	89 a3       	std	Y+33, r24	; 0x21
    2a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a10:	9e 8f       	std	Y+30, r25	; 0x1e
    2a12:	8d 8f       	std	Y+29, r24	; 0x1d
    2a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <serial_sendString+0x108>
    2a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	for(i=0;i<strlen(str);i++)
    2a20:	1c a6       	std	Y+44, r1	; 0x2c
    2a22:	1b a6       	std	Y+43, r1	; 0x2b
    2a24:	82 c0       	rjmp	.+260    	; 0x2b2a <serial_sendString+0x21a>
	{
		UDR2=str[i];
    2a26:	a6 ed       	ldi	r26, 0xD6	; 214
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	2b a5       	ldd	r18, Y+43	; 0x2b
    2a2c:	3c a5       	ldd	r19, Y+44	; 0x2c
    2a2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a32:	fc 01       	movw	r30, r24
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
    2a38:	80 81       	ld	r24, Z
    2a3a:	8c 93       	st	X, r24
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	a0 e8       	ldi	r26, 0x80	; 128
    2a42:	bf e3       	ldi	r27, 0x3F	; 63
    2a44:	89 8f       	std	Y+25, r24	; 0x19
    2a46:	9a 8f       	std	Y+26, r25	; 0x1a
    2a48:	ab 8f       	std	Y+27, r26	; 0x1b
    2a4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a54:	2d ec       	ldi	r18, 0xCD	; 205
    2a56:	3c ec       	ldi	r19, 0xCC	; 204
    2a58:	4c e2       	ldi	r20, 0x2C	; 44
    2a5a:	55 e4       	ldi	r21, 0x45	; 69
    2a5c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	8d 8b       	std	Y+21, r24	; 0x15
    2a66:	9e 8b       	std	Y+22, r25	; 0x16
    2a68:	af 8b       	std	Y+23, r26	; 0x17
    2a6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a6c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a70:	8f 89       	ldd	r24, Y+23	; 0x17
    2a72:	98 8d       	ldd	r25, Y+24	; 0x18
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 e8       	ldi	r20, 0x80	; 128
    2a7a:	5f e3       	ldi	r21, 0x3F	; 63
    2a7c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2a80:	88 23       	and	r24, r24
    2a82:	2c f4       	brge	.+10     	; 0x2a8e <serial_sendString+0x17e>
		__ticks = 1;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9c 8b       	std	Y+20, r25	; 0x14
    2a8a:	8b 8b       	std	Y+19, r24	; 0x13
    2a8c:	3f c0       	rjmp	.+126    	; 0x2b0c <serial_sendString+0x1fc>
	else if (__tmp > 65535)
    2a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a90:	7e 89       	ldd	r23, Y+22	; 0x16
    2a92:	8f 89       	ldd	r24, Y+23	; 0x17
    2a94:	98 8d       	ldd	r25, Y+24	; 0x18
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	3f ef       	ldi	r19, 0xFF	; 255
    2a9a:	4f e7       	ldi	r20, 0x7F	; 127
    2a9c:	57 e4       	ldi	r21, 0x47	; 71
    2a9e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2aa2:	18 16       	cp	r1, r24
    2aa4:	4c f5       	brge	.+82     	; 0x2af8 <serial_sendString+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa6:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aaa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e2       	ldi	r20, 0x20	; 32
    2ab4:	51 e4       	ldi	r21, 0x41	; 65
    2ab6:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	bc 01       	movw	r22, r24
    2ac0:	cd 01       	movw	r24, r26
    2ac2:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	0f c0       	rjmp	.+30     	; 0x2aee <serial_sendString+0x1de>
    2ad0:	84 e1       	ldi	r24, 0x14	; 20
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	9a 8b       	std	Y+18, r25	; 0x12
    2ad6:	89 8b       	std	Y+17, r24	; 0x11
    2ad8:	89 89       	ldd	r24, Y+17	; 0x11
    2ada:	9a 89       	ldd	r25, Y+18	; 0x12
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <serial_sendString+0x1cc>
    2ae0:	9a 8b       	std	Y+18, r25	; 0x12
    2ae2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	9c 8b       	std	Y+20, r25	; 0x14
    2aec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aee:	8b 89       	ldd	r24, Y+19	; 0x13
    2af0:	9c 89       	ldd	r25, Y+20	; 0x14
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	69 f7       	brne	.-38     	; 0x2ad0 <serial_sendString+0x1c0>
    2af6:	14 c0       	rjmp	.+40     	; 0x2b20 <serial_sendString+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af8:	6d 89       	ldd	r22, Y+21	; 0x15
    2afa:	7e 89       	ldd	r23, Y+22	; 0x16
    2afc:	8f 89       	ldd	r24, Y+23	; 0x17
    2afe:	98 8d       	ldd	r25, Y+24	; 0x18
    2b00:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9c 8b       	std	Y+20, r25	; 0x14
    2b0a:	8b 8b       	std	Y+19, r24	; 0x13
    2b0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b10:	98 8b       	std	Y+16, r25	; 0x10
    2b12:	8f 87       	std	Y+15, r24	; 0x0f
    2b14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b16:	98 89       	ldd	r25, Y+16	; 0x10
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <serial_sendString+0x208>
    2b1c:	98 8b       	std	Y+16, r25	; 0x10
    2b1e:	8f 87       	std	Y+15, r24	; 0x0f
	int i;
	lcd_cursor(1,1);
	UDR2='#';
	_delay_ms(1);

	for(i=0;i<strlen(str);i++)
    2b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	9c a7       	std	Y+44, r25	; 0x2c
    2b28:	8b a7       	std	Y+43, r24	; 0x2b
    2b2a:	0b a5       	ldd	r16, Y+43	; 0x2b
    2b2c:	1c a5       	ldd	r17, Y+44	; 0x2c
    2b2e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b30:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b32:	0e 94 0b 45 	call	0x8a16	; 0x8a16 <strlen>
    2b36:	08 17       	cp	r16, r24
    2b38:	19 07       	cpc	r17, r25
    2b3a:	08 f4       	brcc	.+2      	; 0x2b3e <serial_sendString+0x22e>
    2b3c:	74 cf       	rjmp	.-280    	; 0x2a26 <serial_sendString+0x116>
	{
		UDR2=str[i];

		_delay_ms(1);
	}
	UDR2='#';
    2b3e:	e6 ed       	ldi	r30, 0xD6	; 214
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	83 e2       	ldi	r24, 0x23	; 35
    2b44:	80 83       	st	Z, r24
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	a0 e8       	ldi	r26, 0x80	; 128
    2b4c:	bf e3       	ldi	r27, 0x3F	; 63
    2b4e:	8b 87       	std	Y+11, r24	; 0x0b
    2b50:	9c 87       	std	Y+12, r25	; 0x0c
    2b52:	ad 87       	std	Y+13, r26	; 0x0d
    2b54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5e:	2d ec       	ldi	r18, 0xCD	; 205
    2b60:	3c ec       	ldi	r19, 0xCC	; 204
    2b62:	4c e2       	ldi	r20, 0x2C	; 44
    2b64:	55 e4       	ldi	r21, 0x45	; 69
    2b66:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8f 83       	std	Y+7, r24	; 0x07
    2b70:	98 87       	std	Y+8, r25	; 0x08
    2b72:	a9 87       	std	Y+9, r26	; 0x09
    2b74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b76:	6f 81       	ldd	r22, Y+7	; 0x07
    2b78:	78 85       	ldd	r23, Y+8	; 0x08
    2b7a:	89 85       	ldd	r24, Y+9	; 0x09
    2b7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e8       	ldi	r20, 0x80	; 128
    2b84:	5f e3       	ldi	r21, 0x3F	; 63
    2b86:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2b8a:	88 23       	and	r24, r24
    2b8c:	2c f4       	brge	.+10     	; 0x2b98 <serial_sendString+0x288>
		__ticks = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9e 83       	std	Y+6, r25	; 0x06
    2b94:	8d 83       	std	Y+5, r24	; 0x05
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <serial_sendString+0x306>
	else if (__tmp > 65535)
    2b98:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9a:	78 85       	ldd	r23, Y+8	; 0x08
    2b9c:	89 85       	ldd	r24, Y+9	; 0x09
    2b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	3f ef       	ldi	r19, 0xFF	; 255
    2ba4:	4f e7       	ldi	r20, 0x7F	; 127
    2ba6:	57 e4       	ldi	r21, 0x47	; 71
    2ba8:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2bac:	18 16       	cp	r1, r24
    2bae:	4c f5       	brge	.+82     	; 0x2c02 <serial_sendString+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	40 e2       	ldi	r20, 0x20	; 32
    2bbe:	51 e4       	ldi	r21, 0x41	; 65
    2bc0:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	bc 01       	movw	r22, r24
    2bca:	cd 01       	movw	r24, r26
    2bcc:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	0f c0       	rjmp	.+30     	; 0x2bf8 <serial_sendString+0x2e8>
    2bda:	84 e1       	ldi	r24, 0x14	; 20
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	9c 81       	ldd	r25, Y+4	; 0x04
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <serial_sendString+0x2d6>
    2bea:	9c 83       	std	Y+4, r25	; 0x04
    2bec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bee:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	69 f7       	brne	.-38     	; 0x2bda <serial_sendString+0x2ca>
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <serial_sendString+0x31a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c02:	6f 81       	ldd	r22, Y+7	; 0x07
    2c04:	78 85       	ldd	r23, Y+8	; 0x08
    2c06:	89 85       	ldd	r24, Y+9	; 0x09
    2c08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	8d 81       	ldd	r24, Y+5	; 0x05
    2c18:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	9a 81       	ldd	r25, Y+2	; 0x02
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <serial_sendString+0x312>
    2c26:	9a 83       	std	Y+2, r25	; 0x02
    2c28:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c2a:	ae 96       	adiw	r28, 0x2e	; 46
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	08 95       	ret

00002c40 <serial_sendChar>:

// Use only with python controller
void serial_sendChar(unsigned char c)
{
    2c40:	df 93       	push	r29
    2c42:	cf 93       	push	r28
    2c44:	cd b7       	in	r28, 0x3d	; 61
    2c46:	de b7       	in	r29, 0x3e	; 62
    2c48:	e9 97       	sbiw	r28, 0x39	; 57
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	89 af       	std	Y+57, r24	; 0x39
	lcd_cursor(1,1);
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	0e 94 27 09 	call	0x124e	; 0x124e <lcd_cursor>
	UDR2='#';
    2c5e:	e6 ed       	ldi	r30, 0xD6	; 214
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	83 e2       	ldi	r24, 0x23	; 35
    2c64:	80 83       	st	Z, r24
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e8       	ldi	r26, 0x80	; 128
    2c6c:	bf e3       	ldi	r27, 0x3F	; 63
    2c6e:	8d ab       	std	Y+53, r24	; 0x35
    2c70:	9e ab       	std	Y+54, r25	; 0x36
    2c72:	af ab       	std	Y+55, r26	; 0x37
    2c74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	6d a9       	ldd	r22, Y+53	; 0x35
    2c78:	7e a9       	ldd	r23, Y+54	; 0x36
    2c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2c7e:	2d ec       	ldi	r18, 0xCD	; 205
    2c80:	3c ec       	ldi	r19, 0xCC	; 204
    2c82:	4c e2       	ldi	r20, 0x2C	; 44
    2c84:	55 e4       	ldi	r21, 0x45	; 69
    2c86:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	89 ab       	std	Y+49, r24	; 0x31
    2c90:	9a ab       	std	Y+50, r25	; 0x32
    2c92:	ab ab       	std	Y+51, r26	; 0x33
    2c94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c96:	69 a9       	ldd	r22, Y+49	; 0x31
    2c98:	7a a9       	ldd	r23, Y+50	; 0x32
    2c9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <serial_sendChar+0x78>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	98 ab       	std	Y+48, r25	; 0x30
    2cb4:	8f a7       	std	Y+47, r24	; 0x2f
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <serial_sendChar+0xf6>
	else if (__tmp > 65535)
    2cb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2cba:	7a a9       	ldd	r23, Y+50	; 0x32
    2cbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2cbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <serial_sendChar+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2cd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2cd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2cd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	98 ab       	std	Y+48, r25	; 0x30
    2cf6:	8f a7       	std	Y+47, r24	; 0x2f
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <serial_sendChar+0xd8>
    2cfa:	84 e1       	ldi	r24, 0x14	; 20
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	9e a7       	std	Y+46, r25	; 0x2e
    2d00:	8d a7       	std	Y+45, r24	; 0x2d
    2d02:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d04:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <serial_sendChar+0xc6>
    2d0a:	9e a7       	std	Y+46, r25	; 0x2e
    2d0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d10:	98 a9       	ldd	r25, Y+48	; 0x30
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	98 ab       	std	Y+48, r25	; 0x30
    2d16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <serial_sendChar+0xba>
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <serial_sendChar+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	69 a9       	ldd	r22, Y+49	; 0x31
    2d24:	7a a9       	ldd	r23, Y+50	; 0x32
    2d26:	8b a9       	ldd	r24, Y+51	; 0x33
    2d28:	9c a9       	ldd	r25, Y+52	; 0x34
    2d2a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	98 ab       	std	Y+48, r25	; 0x30
    2d34:	8f a7       	std	Y+47, r24	; 0x2f
    2d36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d38:	98 a9       	ldd	r25, Y+48	; 0x30
    2d3a:	9c a7       	std	Y+44, r25	; 0x2c
    2d3c:	8b a7       	std	Y+43, r24	; 0x2b
    2d3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <serial_sendChar+0x102>
    2d46:	9c a7       	std	Y+44, r25	; 0x2c
    2d48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	lcd_clear();
    2d4a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>

	UDR2=c;
    2d4e:	e6 ed       	ldi	r30, 0xD6	; 214
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	89 ad       	ldd	r24, Y+57	; 0x39
    2d54:	80 83       	st	Z, r24
	lcd_num((int)c);
    2d56:	89 ad       	ldd	r24, Y+57	; 0x39
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a0 e8       	ldi	r26, 0x80	; 128
    2d66:	bf e3       	ldi	r27, 0x3F	; 63
    2d68:	8f a3       	std	Y+39, r24	; 0x27
    2d6a:	98 a7       	std	Y+40, r25	; 0x28
    2d6c:	a9 a7       	std	Y+41, r26	; 0x29
    2d6e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d70:	6f a1       	ldd	r22, Y+39	; 0x27
    2d72:	78 a5       	ldd	r23, Y+40	; 0x28
    2d74:	89 a5       	ldd	r24, Y+41	; 0x29
    2d76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d78:	2d ec       	ldi	r18, 0xCD	; 205
    2d7a:	3c ec       	ldi	r19, 0xCC	; 204
    2d7c:	4c e2       	ldi	r20, 0x2C	; 44
    2d7e:	55 e4       	ldi	r21, 0x45	; 69
    2d80:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	8b a3       	std	Y+35, r24	; 0x23
    2d8a:	9c a3       	std	Y+36, r25	; 0x24
    2d8c:	ad a3       	std	Y+37, r26	; 0x25
    2d8e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d90:	6b a1       	ldd	r22, Y+35	; 0x23
    2d92:	7c a1       	ldd	r23, Y+36	; 0x24
    2d94:	8d a1       	ldd	r24, Y+37	; 0x25
    2d96:	9e a1       	ldd	r25, Y+38	; 0x26
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	40 e8       	ldi	r20, 0x80	; 128
    2d9e:	5f e3       	ldi	r21, 0x3F	; 63
    2da0:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2da4:	88 23       	and	r24, r24
    2da6:	2c f4       	brge	.+10     	; 0x2db2 <serial_sendChar+0x172>
		__ticks = 1;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	9a a3       	std	Y+34, r25	; 0x22
    2dae:	89 a3       	std	Y+33, r24	; 0x21
    2db0:	3f c0       	rjmp	.+126    	; 0x2e30 <serial_sendChar+0x1f0>
	else if (__tmp > 65535)
    2db2:	6b a1       	ldd	r22, Y+35	; 0x23
    2db4:	7c a1       	ldd	r23, Y+36	; 0x24
    2db6:	8d a1       	ldd	r24, Y+37	; 0x25
    2db8:	9e a1       	ldd	r25, Y+38	; 0x26
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	3f ef       	ldi	r19, 0xFF	; 255
    2dbe:	4f e7       	ldi	r20, 0x7F	; 127
    2dc0:	57 e4       	ldi	r21, 0x47	; 71
    2dc2:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2dc6:	18 16       	cp	r1, r24
    2dc8:	4c f5       	brge	.+82     	; 0x2e1c <serial_sendChar+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dca:	6f a1       	ldd	r22, Y+39	; 0x27
    2dcc:	78 a5       	ldd	r23, Y+40	; 0x28
    2dce:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e2       	ldi	r20, 0x20	; 32
    2dd8:	51 e4       	ldi	r21, 0x41	; 65
    2dda:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2dea:	dc 01       	movw	r26, r24
    2dec:	cb 01       	movw	r24, r22
    2dee:	9a a3       	std	Y+34, r25	; 0x22
    2df0:	89 a3       	std	Y+33, r24	; 0x21
    2df2:	0f c0       	rjmp	.+30     	; 0x2e12 <serial_sendChar+0x1d2>
    2df4:	84 e1       	ldi	r24, 0x14	; 20
    2df6:	91 e0       	ldi	r25, 0x01	; 1
    2df8:	98 a3       	std	Y+32, r25	; 0x20
    2dfa:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dfe:	98 a1       	ldd	r25, Y+32	; 0x20
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	f1 f7       	brne	.-4      	; 0x2e00 <serial_sendChar+0x1c0>
    2e04:	98 a3       	std	Y+32, r25	; 0x20
    2e06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e08:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	9a a3       	std	Y+34, r25	; 0x22
    2e10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e12:	89 a1       	ldd	r24, Y+33	; 0x21
    2e14:	9a a1       	ldd	r25, Y+34	; 0x22
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	69 f7       	brne	.-38     	; 0x2df4 <serial_sendChar+0x1b4>
    2e1a:	14 c0       	rjmp	.+40     	; 0x2e44 <serial_sendChar+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e20:	8d a1       	ldd	r24, Y+37	; 0x25
    2e22:	9e a1       	ldd	r25, Y+38	; 0x26
    2e24:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	9a a3       	std	Y+34, r25	; 0x22
    2e2e:	89 a3       	std	Y+33, r24	; 0x21
    2e30:	89 a1       	ldd	r24, Y+33	; 0x21
    2e32:	9a a1       	ldd	r25, Y+34	; 0x22
    2e34:	9e 8f       	std	Y+30, r25	; 0x1e
    2e36:	8d 8f       	std	Y+29, r24	; 0x1d
    2e38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <serial_sendChar+0x1fc>
    2e40:	9e 8f       	std	Y+30, r25	; 0x1e
    2e42:	8d 8f       	std	Y+29, r24	; 0x1d
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e8       	ldi	r26, 0x80	; 128
    2e4a:	bf e3       	ldi	r27, 0x3F	; 63
    2e4c:	89 8f       	std	Y+25, r24	; 0x19
    2e4e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e50:	ab 8f       	std	Y+27, r26	; 0x1b
    2e52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	69 8d       	ldd	r22, Y+25	; 0x19
    2e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e5c:	2d ec       	ldi	r18, 0xCD	; 205
    2e5e:	3c ec       	ldi	r19, 0xCC	; 204
    2e60:	4c e2       	ldi	r20, 0x2C	; 44
    2e62:	55 e4       	ldi	r21, 0x45	; 69
    2e64:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	8d 8b       	std	Y+21, r24	; 0x15
    2e6e:	9e 8b       	std	Y+22, r25	; 0x16
    2e70:	af 8b       	std	Y+23, r26	; 0x17
    2e72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e74:	6d 89       	ldd	r22, Y+21	; 0x15
    2e76:	7e 89       	ldd	r23, Y+22	; 0x16
    2e78:	8f 89       	ldd	r24, Y+23	; 0x17
    2e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	40 e8       	ldi	r20, 0x80	; 128
    2e82:	5f e3       	ldi	r21, 0x3F	; 63
    2e84:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2e88:	88 23       	and	r24, r24
    2e8a:	2c f4       	brge	.+10     	; 0x2e96 <serial_sendChar+0x256>
		__ticks = 1;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	9c 8b       	std	Y+20, r25	; 0x14
    2e92:	8b 8b       	std	Y+19, r24	; 0x13
    2e94:	3f c0       	rjmp	.+126    	; 0x2f14 <serial_sendChar+0x2d4>
	else if (__tmp > 65535)
    2e96:	6d 89       	ldd	r22, Y+21	; 0x15
    2e98:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	3f ef       	ldi	r19, 0xFF	; 255
    2ea2:	4f e7       	ldi	r20, 0x7F	; 127
    2ea4:	57 e4       	ldi	r21, 0x47	; 71
    2ea6:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2eaa:	18 16       	cp	r1, r24
    2eac:	4c f5       	brge	.+82     	; 0x2f00 <serial_sendChar+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eae:	69 8d       	ldd	r22, Y+25	; 0x19
    2eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb6:	20 e0       	ldi	r18, 0x00	; 0
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e2       	ldi	r20, 0x20	; 32
    2ebc:	51 e4       	ldi	r21, 0x41	; 65
    2ebe:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	cd 01       	movw	r24, r26
    2eca:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9c 8b       	std	Y+20, r25	; 0x14
    2ed4:	8b 8b       	std	Y+19, r24	; 0x13
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <serial_sendChar+0x2b6>
    2ed8:	84 e1       	ldi	r24, 0x14	; 20
    2eda:	91 e0       	ldi	r25, 0x01	; 1
    2edc:	9a 8b       	std	Y+18, r25	; 0x12
    2ede:	89 8b       	std	Y+17, r24	; 0x11
    2ee0:	89 89       	ldd	r24, Y+17	; 0x11
    2ee2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ee4:	01 97       	sbiw	r24, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <serial_sendChar+0x2a4>
    2ee8:	9a 8b       	std	Y+18, r25	; 0x12
    2eea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eec:	8b 89       	ldd	r24, Y+19	; 0x13
    2eee:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	9c 8b       	std	Y+20, r25	; 0x14
    2ef4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    2efa:	00 97       	sbiw	r24, 0x00	; 0
    2efc:	69 f7       	brne	.-38     	; 0x2ed8 <serial_sendChar+0x298>
    2efe:	14 c0       	rjmp	.+40     	; 0x2f28 <serial_sendChar+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f00:	6d 89       	ldd	r22, Y+21	; 0x15
    2f02:	7e 89       	ldd	r23, Y+22	; 0x16
    2f04:	8f 89       	ldd	r24, Y+23	; 0x17
    2f06:	98 8d       	ldd	r25, Y+24	; 0x18
    2f08:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	9c 8b       	std	Y+20, r25	; 0x14
    2f12:	8b 8b       	std	Y+19, r24	; 0x13
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	98 8b       	std	Y+16, r25	; 0x10
    2f1a:	8f 87       	std	Y+15, r24	; 0x0f
    2f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f1e:	98 89       	ldd	r25, Y+16	; 0x10
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <serial_sendChar+0x2e0>
    2f24:	98 8b       	std	Y+16, r25	; 0x10
    2f26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	
	_delay_ms(1);
	UDR2='#';
    2f28:	e6 ed       	ldi	r30, 0xD6	; 214
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	83 e2       	ldi	r24, 0x23	; 35
    2f2e:	80 83       	st	Z, r24
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	a0 e8       	ldi	r26, 0x80	; 128
    2f36:	bf e3       	ldi	r27, 0x3F	; 63
    2f38:	8b 87       	std	Y+11, r24	; 0x0b
    2f3a:	9c 87       	std	Y+12, r25	; 0x0c
    2f3c:	ad 87       	std	Y+13, r26	; 0x0d
    2f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f48:	2d ec       	ldi	r18, 0xCD	; 205
    2f4a:	3c ec       	ldi	r19, 0xCC	; 204
    2f4c:	4c e2       	ldi	r20, 0x2C	; 44
    2f4e:	55 e4       	ldi	r21, 0x45	; 69
    2f50:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8f 83       	std	Y+7, r24	; 0x07
    2f5a:	98 87       	std	Y+8, r25	; 0x08
    2f5c:	a9 87       	std	Y+9, r26	; 0x09
    2f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e8       	ldi	r20, 0x80	; 128
    2f6e:	5f e3       	ldi	r21, 0x3F	; 63
    2f70:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <serial_sendChar+0x342>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9e 83       	std	Y+6, r25	; 0x06
    2f7e:	8d 83       	std	Y+5, r24	; 0x05
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <serial_sendChar+0x3c0>
	else if (__tmp > 65535)
    2f82:	6f 81       	ldd	r22, Y+7	; 0x07
    2f84:	78 85       	ldd	r23, Y+8	; 0x08
    2f86:	89 85       	ldd	r24, Y+9	; 0x09
    2f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	3f ef       	ldi	r19, 0xFF	; 255
    2f8e:	4f e7       	ldi	r20, 0x7F	; 127
    2f90:	57 e4       	ldi	r21, 0x47	; 71
    2f92:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <serial_sendChar+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	40 e2       	ldi	r20, 0x20	; 32
    2fa8:	51 e4       	ldi	r21, 0x41	; 65
    2faa:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <serial_sendChar+0x3a2>
    2fc4:	84 e1       	ldi	r24, 0x14	; 20
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <serial_sendChar+0x390>
    2fd4:	9c 83       	std	Y+4, r25	; 0x04
    2fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <serial_sendChar+0x384>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <serial_sendChar+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	6f 81       	ldd	r22, Y+7	; 0x07
    2fee:	78 85       	ldd	r23, Y+8	; 0x08
    2ff0:	89 85       	ldd	r24, Y+9	; 0x09
    2ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff4:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e 83       	std	Y+6, r25	; 0x06
    2ffe:	8d 83       	std	Y+5, r24	; 0x05
    3000:	8d 81       	ldd	r24, Y+5	; 0x05
    3002:	9e 81       	ldd	r25, Y+6	; 0x06
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <serial_sendChar+0x3cc>
    3010:	9a 83       	std	Y+2, r25	; 0x02
    3012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3014:	e9 96       	adiw	r28, 0x39	; 57
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <send_char>:

//Function to send a byte over the communication channel
void send_char (unsigned char c) {
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	0f 92       	push	r0
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	89 83       	std	Y+1, r24	; 0x01
	if (USE_BLUETOOTH) send_data_bt (c);
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	0e 94 ef 11 	call	0x23de	; 0x23de <send_data_bt>
	else serial_sendChar(c);
}
    3038:	0f 90       	pop	r0
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <send_int>:

//Function to split and send an integer over the communication channel
void send_int (int i) {
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	00 d0       	rcall	.+0      	; 0x3046 <send_int+0x6>
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	9b 83       	std	Y+3, r25	; 0x03
    304c:	8a 83       	std	Y+2, r24	; 0x02
	if (USE_BLUETOOTH) {
		unsigned char c = (i >> 24) & 0xFF;
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	9b 81       	ldd	r25, Y+3	; 0x03
    3052:	99 0f       	add	r25, r25
    3054:	88 0b       	sbc	r24, r24
    3056:	98 2f       	mov	r25, r24
    3058:	89 83       	std	Y+1, r24	; 0x01
		send_data_bt (c);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	0e 94 ef 11 	call	0x23de	; 0x23de <send_data_bt>
		c = (i >> 16) & 0xFF;
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	99 0f       	add	r25, r25
    3066:	88 0b       	sbc	r24, r24
    3068:	98 2f       	mov	r25, r24
    306a:	89 83       	std	Y+1, r24	; 0x01
		send_data_bt (c);
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	0e 94 ef 11 	call	0x23de	; 0x23de <send_data_bt>
		c = (i >> 8) & 0xFF;
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	89 2f       	mov	r24, r25
    3078:	99 27       	eor	r25, r25
    307a:	89 83       	std	Y+1, r24	; 0x01
		send_data_bt (c);
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	0e 94 ef 11 	call	0x23de	; 0x23de <send_data_bt>
		c = i & 0xFF;
    3082:	8a 81       	ldd	r24, Y+2	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
		send_data_bt (c);
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	0e 94 ef 11 	call	0x23de	; 0x23de <send_data_bt>
	else {
		char str[10];
		itoa(i,str,10);
		serial_sendString(str);
	}
}
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <adc_pin_config>:
    /*!
	  the function to configure use of ADC on the Bot
    */
//ADC pin configuration
void adc_pin_config (void)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    30a0:	e0 e3       	ldi	r30, 0x30	; 48
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	10 82       	st	Z, r1
 PORTF = 0x00;
    30a6:	e1 e3       	ldi	r30, 0x31	; 49
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	10 82       	st	Z, r1
 DDRK = 0x00;
    30ac:	e7 e0       	ldi	r30, 0x07	; 7
    30ae:	f1 e0       	ldi	r31, 0x01	; 1
    30b0:	10 82       	st	Z, r1
 PORTK = 0x00;
    30b2:	e8 e0       	ldi	r30, 0x08	; 8
    30b4:	f1 e0       	ldi	r31, 0x01	; 1
    30b6:	10 82       	st	Z, r1
}
    30b8:	cf 91       	pop	r28
    30ba:	df 91       	pop	r29
    30bc:	08 95       	ret

000030be <adc_init>:
//! A adc initialization function
    /*!
	  the function to initialize ports for adc
    */
void adc_init()
{
    30be:	df 93       	push	r29
    30c0:	cf 93       	push	r28
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    30c6:	ea e7       	ldi	r30, 0x7A	; 122
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    30cc:	eb e7       	ldi	r30, 0x7B	; 123
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    30d2:	ec e7       	ldi	r30, 0x7C	; 124
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 e2       	ldi	r24, 0x20	; 32
    30d8:	80 83       	st	Z, r24
	ACSR = 0x80;
    30da:	e0 e5       	ldi	r30, 0x50	; 80
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 e8       	ldi	r24, 0x80	; 128
    30e0:	80 83       	st	Z, r24
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    30e2:	ea e7       	ldi	r30, 0x7A	; 122
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	86 e8       	ldi	r24, 0x86	; 134
    30e8:	80 83       	st	Z, r24
}
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <ADC_Conversion>:
//! Function For ADC Conversion
    /*!
	  Function For ADC Conversion port setting
    */
unsigned char ADC_Conversion(unsigned char Ch) 
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	0f 92       	push	r0
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    30fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3100:	88 30       	cpi	r24, 0x08	; 8
    3102:	20 f0       	brcs	.+8      	; 0x310c <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    3104:	eb e7       	ldi	r30, 0x7B	; 123
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	88 e0       	ldi	r24, 0x08	; 8
    310a:	80 83       	st	Z, r24
	}
	Ch = Ch & 0x07;  			
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	87 70       	andi	r24, 0x07	; 7
    3110:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    3112:	ec e7       	ldi	r30, 0x7C	; 124
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	80 62       	ori	r24, 0x20	; 32
    311a:	80 83       	st	Z, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    311c:	aa e7       	ldi	r26, 0x7A	; 122
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	ea e7       	ldi	r30, 0x7A	; 122
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	80 64       	ori	r24, 0x40	; 64
    3128:	8c 93       	st	X, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    312a:	ea e7       	ldi	r30, 0x7A	; 122
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	80 71       	andi	r24, 0x10	; 16
    3136:	90 70       	andi	r25, 0x00	; 0
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	b9 f3       	breq	.-18     	; 0x312a <ADC_Conversion+0x3a>
	a=ADCH;
    313c:	e9 e7       	ldi	r30, 0x79	; 121
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    3144:	aa e7       	ldi	r26, 0x7A	; 122
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	ea e7       	ldi	r30, 0x7A	; 122
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	80 61       	ori	r24, 0x10	; 16
    3150:	8c 93       	st	X, r24
	ADCSRB = 0x00;
    3152:	eb e7       	ldi	r30, 0x7B	; 123
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	10 82       	st	Z, r1
	return a;
    3158:	89 81       	ldd	r24, Y+1	; 0x01
}
    315a:	0f 90       	pop	r0
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	08 95       	ret

00003164 <print_sensor>:
//! Print sensor values on LCD
    /*!
	 Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
    */
void print_sensor(char row, char coloumn,unsigned char channel)
{
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	00 d0       	rcall	.+0      	; 0x316a <print_sensor+0x6>
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	6a 83       	std	Y+2, r22	; 0x02
    3172:	4b 83       	std	Y+3, r20	; 0x03
	
	ADC_Value = ADC_Conversion(channel);
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    317a:	80 93 bb 07 	sts	0x07BB, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    317e:	80 91 bb 07 	lds	r24, 0x07BB
    3182:	28 2f       	mov	r18, r24
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	6a 81       	ldd	r22, Y+2	; 0x02
    318a:	a9 01       	movw	r20, r18
    318c:	23 e0       	ldi	r18, 0x03	; 3
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	0e 94 69 09 	call	0x12d2	; 0x12d2 <lcd_print>
}
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	0f 90       	pop	r0
    319a:	cf 91       	pop	r28
    319c:	df 91       	pop	r29
    319e:	08 95       	ret

000031a0 <__vector_6>:
//! Interrupt 5 - right wheel
    /*!
	 ISR for right position encoder
    */
ISR(INT5_vect)  
{
    31a0:	1f 92       	push	r1
    31a2:	0f 92       	push	r0
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	0f 92       	push	r0
    31a8:	11 24       	eor	r1, r1
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	df 93       	push	r29
    31c0:	cf 93       	push	r28
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	ab 97       	sbiw	r28, 0x2b	; 43
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	cd bf       	out	0x3d, r28	; 61
	rightInt++;
    31cc:	80 91 75 03 	lds	r24, 0x0375
    31d0:	90 91 76 03 	lds	r25, 0x0376
    31d4:	01 96       	adiw	r24, 0x01	; 1
    31d6:	90 93 76 03 	sts	0x0376, r25
    31da:	80 93 75 03 	sts	0x0375, r24
	curRightCounter++;  //increment right shaft position count
    31de:	80 91 91 03 	lds	r24, 0x0391
    31e2:	89 83       	std	Y+1, r24	; 0x01
    31e4:	90 91 92 03 	lds	r25, 0x0392
    31e8:	9a 83       	std	Y+2, r25	; 0x02
    31ea:	80 91 93 03 	lds	r24, 0x0393
    31ee:	8b 83       	std	Y+3, r24	; 0x03
    31f0:	90 91 94 03 	lds	r25, 0x0394
    31f4:	9c 83       	std	Y+4, r25	; 0x04
    31f6:	80 91 95 03 	lds	r24, 0x0395
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	90 91 96 03 	lds	r25, 0x0396
    3200:	9e 83       	std	Y+6, r25	; 0x06
    3202:	80 91 97 03 	lds	r24, 0x0397
    3206:	8f 83       	std	Y+7, r24	; 0x07
    3208:	90 91 98 03 	lds	r25, 0x0398
    320c:	98 87       	std	Y+8, r25	; 0x08
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	89 87       	std	Y+9, r24	; 0x09
    3212:	1a 86       	std	Y+10, r1	; 0x0a
    3214:	1b 86       	std	Y+11, r1	; 0x0b
    3216:	1c 86       	std	Y+12, r1	; 0x0c
    3218:	1d 86       	std	Y+13, r1	; 0x0d
    321a:	1e 86       	std	Y+14, r1	; 0x0e
    321c:	1f 86       	std	Y+15, r1	; 0x0f
    321e:	18 8a       	std	Y+16, r1	; 0x10
    3220:	99 81       	ldd	r25, Y+1	; 0x01
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	98 0f       	add	r25, r24
    3226:	99 8b       	std	Y+17, r25	; 0x11
    3228:	91 e0       	ldi	r25, 0x01	; 1
    322a:	99 8f       	std	Y+25, r25	; 0x19
    322c:	89 89       	ldd	r24, Y+17	; 0x11
    322e:	99 81       	ldd	r25, Y+1	; 0x01
    3230:	89 17       	cp	r24, r25
    3232:	08 f0       	brcs	.+2      	; 0x3236 <__vector_6+0x96>
    3234:	19 8e       	std	Y+25, r1	; 0x19
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	89 0f       	add	r24, r25
    323c:	8a 8b       	std	Y+18, r24	; 0x12
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	8a 8f       	std	Y+26, r24	; 0x1a
    3242:	9a 89       	ldd	r25, Y+18	; 0x12
    3244:	8a 81       	ldd	r24, Y+2	; 0x02
    3246:	98 17       	cp	r25, r24
    3248:	08 f0       	brcs	.+2      	; 0x324c <__vector_6+0xac>
    324a:	1a 8e       	std	Y+26, r1	; 0x1a
    324c:	99 8d       	ldd	r25, Y+25	; 0x19
    324e:	8a 89       	ldd	r24, Y+18	; 0x12
    3250:	98 0f       	add	r25, r24
    3252:	9b 8f       	std	Y+27, r25	; 0x1b
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	9c 8f       	std	Y+28, r25	; 0x1c
    3258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325a:	9a 89       	ldd	r25, Y+18	; 0x12
    325c:	89 17       	cp	r24, r25
    325e:	08 f0       	brcs	.+2      	; 0x3262 <__vector_6+0xc2>
    3260:	1c 8e       	std	Y+28, r1	; 0x1c
    3262:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3266:	89 2b       	or	r24, r25
    3268:	8a 8f       	std	Y+26, r24	; 0x1a
    326a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    326c:	8a 8b       	std	Y+18, r24	; 0x12
    326e:	9b 81       	ldd	r25, Y+3	; 0x03
    3270:	8b 85       	ldd	r24, Y+11	; 0x0b
    3272:	98 0f       	add	r25, r24
    3274:	9b 8b       	std	Y+19, r25	; 0x13
    3276:	91 e0       	ldi	r25, 0x01	; 1
    3278:	9d 8f       	std	Y+29, r25	; 0x1d
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9b 81       	ldd	r25, Y+3	; 0x03
    327e:	89 17       	cp	r24, r25
    3280:	08 f0       	brcs	.+2      	; 0x3284 <__vector_6+0xe4>
    3282:	1d 8e       	std	Y+29, r1	; 0x1d
    3284:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3286:	9b 89       	ldd	r25, Y+19	; 0x13
    3288:	89 0f       	add	r24, r25
    328a:	8e 8f       	std	Y+30, r24	; 0x1e
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	8f 8f       	std	Y+31, r24	; 0x1f
    3290:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3292:	8b 89       	ldd	r24, Y+19	; 0x13
    3294:	98 17       	cp	r25, r24
    3296:	08 f0       	brcs	.+2      	; 0x329a <__vector_6+0xfa>
    3298:	1f 8e       	std	Y+31, r1	; 0x1f
    329a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    329c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    329e:	98 2b       	or	r25, r24
    32a0:	9d 8f       	std	Y+29, r25	; 0x1d
    32a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a4:	9b 8b       	std	Y+19, r25	; 0x13
    32a6:	8c 81       	ldd	r24, Y+4	; 0x04
    32a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32aa:	89 0f       	add	r24, r25
    32ac:	8c 8b       	std	Y+20, r24	; 0x14
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	88 a3       	std	Y+32, r24	; 0x20
    32b2:	9c 89       	ldd	r25, Y+20	; 0x14
    32b4:	8c 81       	ldd	r24, Y+4	; 0x04
    32b6:	98 17       	cp	r25, r24
    32b8:	08 f0       	brcs	.+2      	; 0x32bc <__vector_6+0x11c>
    32ba:	18 a2       	std	Y+32, r1	; 0x20
    32bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32be:	8c 89       	ldd	r24, Y+20	; 0x14
    32c0:	98 0f       	add	r25, r24
    32c2:	99 a3       	std	Y+33, r25	; 0x21
    32c4:	91 e0       	ldi	r25, 0x01	; 1
    32c6:	9a a3       	std	Y+34, r25	; 0x22
    32c8:	89 a1       	ldd	r24, Y+33	; 0x21
    32ca:	9c 89       	ldd	r25, Y+20	; 0x14
    32cc:	89 17       	cp	r24, r25
    32ce:	08 f0       	brcs	.+2      	; 0x32d2 <__vector_6+0x132>
    32d0:	1a a2       	std	Y+34, r1	; 0x22
    32d2:	88 a1       	ldd	r24, Y+32	; 0x20
    32d4:	9a a1       	ldd	r25, Y+34	; 0x22
    32d6:	89 2b       	or	r24, r25
    32d8:	88 a3       	std	Y+32, r24	; 0x20
    32da:	89 a1       	ldd	r24, Y+33	; 0x21
    32dc:	8c 8b       	std	Y+20, r24	; 0x14
    32de:	9d 81       	ldd	r25, Y+5	; 0x05
    32e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32e2:	98 0f       	add	r25, r24
    32e4:	9d 8b       	std	Y+21, r25	; 0x15
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9b a3       	std	Y+35, r25	; 0x23
    32ea:	8d 89       	ldd	r24, Y+21	; 0x15
    32ec:	9d 81       	ldd	r25, Y+5	; 0x05
    32ee:	89 17       	cp	r24, r25
    32f0:	08 f0       	brcs	.+2      	; 0x32f4 <__vector_6+0x154>
    32f2:	1b a2       	std	Y+35, r1	; 0x23
    32f4:	88 a1       	ldd	r24, Y+32	; 0x20
    32f6:	9d 89       	ldd	r25, Y+21	; 0x15
    32f8:	89 0f       	add	r24, r25
    32fa:	8c a3       	std	Y+36, r24	; 0x24
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	8d a3       	std	Y+37, r24	; 0x25
    3300:	9c a1       	ldd	r25, Y+36	; 0x24
    3302:	8d 89       	ldd	r24, Y+21	; 0x15
    3304:	98 17       	cp	r25, r24
    3306:	08 f0       	brcs	.+2      	; 0x330a <__vector_6+0x16a>
    3308:	1d a2       	std	Y+37, r1	; 0x25
    330a:	9b a1       	ldd	r25, Y+35	; 0x23
    330c:	8d a1       	ldd	r24, Y+37	; 0x25
    330e:	98 2b       	or	r25, r24
    3310:	9b a3       	std	Y+35, r25	; 0x23
    3312:	9c a1       	ldd	r25, Y+36	; 0x24
    3314:	9d 8b       	std	Y+21, r25	; 0x15
    3316:	8e 81       	ldd	r24, Y+6	; 0x06
    3318:	9e 85       	ldd	r25, Y+14	; 0x0e
    331a:	89 0f       	add	r24, r25
    331c:	8e 8b       	std	Y+22, r24	; 0x16
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	8e a3       	std	Y+38, r24	; 0x26
    3322:	9e 89       	ldd	r25, Y+22	; 0x16
    3324:	8e 81       	ldd	r24, Y+6	; 0x06
    3326:	98 17       	cp	r25, r24
    3328:	08 f0       	brcs	.+2      	; 0x332c <__vector_6+0x18c>
    332a:	1e a2       	std	Y+38, r1	; 0x26
    332c:	9b a1       	ldd	r25, Y+35	; 0x23
    332e:	8e 89       	ldd	r24, Y+22	; 0x16
    3330:	98 0f       	add	r25, r24
    3332:	9f a3       	std	Y+39, r25	; 0x27
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	98 a7       	std	Y+40, r25	; 0x28
    3338:	8f a1       	ldd	r24, Y+39	; 0x27
    333a:	9e 89       	ldd	r25, Y+22	; 0x16
    333c:	89 17       	cp	r24, r25
    333e:	08 f0       	brcs	.+2      	; 0x3342 <__vector_6+0x1a2>
    3340:	18 a6       	std	Y+40, r1	; 0x28
    3342:	8e a1       	ldd	r24, Y+38	; 0x26
    3344:	98 a5       	ldd	r25, Y+40	; 0x28
    3346:	89 2b       	or	r24, r25
    3348:	8e a3       	std	Y+38, r24	; 0x26
    334a:	8f a1       	ldd	r24, Y+39	; 0x27
    334c:	8e 8b       	std	Y+22, r24	; 0x16
    334e:	9f 81       	ldd	r25, Y+7	; 0x07
    3350:	8f 85       	ldd	r24, Y+15	; 0x0f
    3352:	98 0f       	add	r25, r24
    3354:	9f 8b       	std	Y+23, r25	; 0x17
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	99 a7       	std	Y+41, r25	; 0x29
    335a:	8f 89       	ldd	r24, Y+23	; 0x17
    335c:	9f 81       	ldd	r25, Y+7	; 0x07
    335e:	89 17       	cp	r24, r25
    3360:	08 f0       	brcs	.+2      	; 0x3364 <__vector_6+0x1c4>
    3362:	19 a6       	std	Y+41, r1	; 0x29
    3364:	8e a1       	ldd	r24, Y+38	; 0x26
    3366:	9f 89       	ldd	r25, Y+23	; 0x17
    3368:	89 0f       	add	r24, r25
    336a:	8a a7       	std	Y+42, r24	; 0x2a
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	8b a7       	std	Y+43, r24	; 0x2b
    3370:	9a a5       	ldd	r25, Y+42	; 0x2a
    3372:	8f 89       	ldd	r24, Y+23	; 0x17
    3374:	98 17       	cp	r25, r24
    3376:	08 f0       	brcs	.+2      	; 0x337a <__vector_6+0x1da>
    3378:	1b a6       	std	Y+43, r1	; 0x2b
    337a:	99 a5       	ldd	r25, Y+41	; 0x29
    337c:	8b a5       	ldd	r24, Y+43	; 0x2b
    337e:	98 2b       	or	r25, r24
    3380:	99 a7       	std	Y+41, r25	; 0x29
    3382:	9a a5       	ldd	r25, Y+42	; 0x2a
    3384:	9f 8b       	std	Y+23, r25	; 0x17
    3386:	88 85       	ldd	r24, Y+8	; 0x08
    3388:	98 89       	ldd	r25, Y+16	; 0x10
    338a:	89 0f       	add	r24, r25
    338c:	88 8f       	std	Y+24, r24	; 0x18
    338e:	89 a5       	ldd	r24, Y+41	; 0x29
    3390:	98 8d       	ldd	r25, Y+24	; 0x18
    3392:	89 0f       	add	r24, r25
    3394:	88 8f       	std	Y+24, r24	; 0x18
    3396:	29 89       	ldd	r18, Y+17	; 0x11
    3398:	3a 89       	ldd	r19, Y+18	; 0x12
    339a:	4b 89       	ldd	r20, Y+19	; 0x13
    339c:	5c 89       	ldd	r21, Y+20	; 0x14
    339e:	6d 89       	ldd	r22, Y+21	; 0x15
    33a0:	7e 89       	ldd	r23, Y+22	; 0x16
    33a2:	8f 89       	ldd	r24, Y+23	; 0x17
    33a4:	98 8d       	ldd	r25, Y+24	; 0x18
    33a6:	20 93 91 03 	sts	0x0391, r18
    33aa:	30 93 92 03 	sts	0x0392, r19
    33ae:	40 93 93 03 	sts	0x0393, r20
    33b2:	50 93 94 03 	sts	0x0394, r21
    33b6:	60 93 95 03 	sts	0x0395, r22
    33ba:	70 93 96 03 	sts	0x0396, r23
    33be:	80 93 97 03 	sts	0x0397, r24
    33c2:	90 93 98 03 	sts	0x0398, r25
	ShaftCountRight++;  //increment right shaft position count
    33c6:	80 91 5e 03 	lds	r24, 0x035E
    33ca:	90 91 5f 03 	lds	r25, 0x035F
    33ce:	a0 91 60 03 	lds	r26, 0x0360
    33d2:	b0 91 61 03 	lds	r27, 0x0361
    33d6:	01 96       	adiw	r24, 0x01	; 1
    33d8:	a1 1d       	adc	r26, r1
    33da:	b1 1d       	adc	r27, r1
    33dc:	80 93 5e 03 	sts	0x035E, r24
    33e0:	90 93 5f 03 	sts	0x035F, r25
    33e4:	a0 93 60 03 	sts	0x0360, r26
    33e8:	b0 93 61 03 	sts	0x0361, r27
}
    33ec:	ab 96       	adiw	r28, 0x2b	; 43
    33ee:	de bf       	out	0x3e, r29	; 62
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	bf 91       	pop	r27
    33f8:	af 91       	pop	r26
    33fa:	9f 91       	pop	r25
    33fc:	8f 91       	pop	r24
    33fe:	7f 91       	pop	r23
    3400:	6f 91       	pop	r22
    3402:	5f 91       	pop	r21
    3404:	4f 91       	pop	r20
    3406:	3f 91       	pop	r19
    3408:	2f 91       	pop	r18
    340a:	0f 90       	pop	r0
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	0f 90       	pop	r0
    3410:	1f 90       	pop	r1
    3412:	18 95       	reti

00003414 <__vector_5>:
//! Interrupt 4 - left wheel
    /*!
	 ISR for left position encoder
    */
ISR(INT4_vect)
{
    3414:	1f 92       	push	r1
    3416:	0f 92       	push	r0
    3418:	0f b6       	in	r0, 0x3f	; 63
    341a:	0f 92       	push	r0
    341c:	11 24       	eor	r1, r1
    341e:	2f 93       	push	r18
    3420:	3f 93       	push	r19
    3422:	4f 93       	push	r20
    3424:	5f 93       	push	r21
    3426:	6f 93       	push	r22
    3428:	7f 93       	push	r23
    342a:	8f 93       	push	r24
    342c:	9f 93       	push	r25
    342e:	af 93       	push	r26
    3430:	bf 93       	push	r27
    3432:	df 93       	push	r29
    3434:	cf 93       	push	r28
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	ab 97       	sbiw	r28, 0x2b	; 43
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	cd bf       	out	0x3d, r28	; 61
	leftInt++;
    3440:	80 91 73 03 	lds	r24, 0x0373
    3444:	90 91 74 03 	lds	r25, 0x0374
    3448:	01 96       	adiw	r24, 0x01	; 1
    344a:	90 93 74 03 	sts	0x0374, r25
    344e:	80 93 73 03 	sts	0x0373, r24
	curLeftCounter++;  //increment left shaft position count
    3452:	80 91 a1 03 	lds	r24, 0x03A1
    3456:	89 83       	std	Y+1, r24	; 0x01
    3458:	90 91 a2 03 	lds	r25, 0x03A2
    345c:	9a 83       	std	Y+2, r25	; 0x02
    345e:	80 91 a3 03 	lds	r24, 0x03A3
    3462:	8b 83       	std	Y+3, r24	; 0x03
    3464:	90 91 a4 03 	lds	r25, 0x03A4
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	80 91 a5 03 	lds	r24, 0x03A5
    346e:	8d 83       	std	Y+5, r24	; 0x05
    3470:	90 91 a6 03 	lds	r25, 0x03A6
    3474:	9e 83       	std	Y+6, r25	; 0x06
    3476:	80 91 a7 03 	lds	r24, 0x03A7
    347a:	8f 83       	std	Y+7, r24	; 0x07
    347c:	90 91 a8 03 	lds	r25, 0x03A8
    3480:	98 87       	std	Y+8, r25	; 0x08
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	89 87       	std	Y+9, r24	; 0x09
    3486:	1a 86       	std	Y+10, r1	; 0x0a
    3488:	1b 86       	std	Y+11, r1	; 0x0b
    348a:	1c 86       	std	Y+12, r1	; 0x0c
    348c:	1d 86       	std	Y+13, r1	; 0x0d
    348e:	1e 86       	std	Y+14, r1	; 0x0e
    3490:	1f 86       	std	Y+15, r1	; 0x0f
    3492:	18 8a       	std	Y+16, r1	; 0x10
    3494:	99 81       	ldd	r25, Y+1	; 0x01
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	98 0f       	add	r25, r24
    349a:	99 8b       	std	Y+17, r25	; 0x11
    349c:	91 e0       	ldi	r25, 0x01	; 1
    349e:	99 8f       	std	Y+25, r25	; 0x19
    34a0:	89 89       	ldd	r24, Y+17	; 0x11
    34a2:	99 81       	ldd	r25, Y+1	; 0x01
    34a4:	89 17       	cp	r24, r25
    34a6:	08 f0       	brcs	.+2      	; 0x34aa <__vector_5+0x96>
    34a8:	19 8e       	std	Y+25, r1	; 0x19
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	89 0f       	add	r24, r25
    34b0:	8a 8b       	std	Y+18, r24	; 0x12
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	8a 8f       	std	Y+26, r24	; 0x1a
    34b6:	9a 89       	ldd	r25, Y+18	; 0x12
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	98 17       	cp	r25, r24
    34bc:	08 f0       	brcs	.+2      	; 0x34c0 <__vector_5+0xac>
    34be:	1a 8e       	std	Y+26, r1	; 0x1a
    34c0:	99 8d       	ldd	r25, Y+25	; 0x19
    34c2:	8a 89       	ldd	r24, Y+18	; 0x12
    34c4:	98 0f       	add	r25, r24
    34c6:	9b 8f       	std	Y+27, r25	; 0x1b
    34c8:	91 e0       	ldi	r25, 0x01	; 1
    34ca:	9c 8f       	std	Y+28, r25	; 0x1c
    34cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ce:	9a 89       	ldd	r25, Y+18	; 0x12
    34d0:	89 17       	cp	r24, r25
    34d2:	08 f0       	brcs	.+2      	; 0x34d6 <__vector_5+0xc2>
    34d4:	1c 8e       	std	Y+28, r1	; 0x1c
    34d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34da:	89 2b       	or	r24, r25
    34dc:	8a 8f       	std	Y+26, r24	; 0x1a
    34de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34e0:	8a 8b       	std	Y+18, r24	; 0x12
    34e2:	9b 81       	ldd	r25, Y+3	; 0x03
    34e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    34e6:	98 0f       	add	r25, r24
    34e8:	9b 8b       	std	Y+19, r25	; 0x13
    34ea:	91 e0       	ldi	r25, 0x01	; 1
    34ec:	9d 8f       	std	Y+29, r25	; 0x1d
    34ee:	8b 89       	ldd	r24, Y+19	; 0x13
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	89 17       	cp	r24, r25
    34f4:	08 f0       	brcs	.+2      	; 0x34f8 <__vector_5+0xe4>
    34f6:	1d 8e       	std	Y+29, r1	; 0x1d
    34f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34fa:	9b 89       	ldd	r25, Y+19	; 0x13
    34fc:	89 0f       	add	r24, r25
    34fe:	8e 8f       	std	Y+30, r24	; 0x1e
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	8f 8f       	std	Y+31, r24	; 0x1f
    3504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3506:	8b 89       	ldd	r24, Y+19	; 0x13
    3508:	98 17       	cp	r25, r24
    350a:	08 f0       	brcs	.+2      	; 0x350e <__vector_5+0xfa>
    350c:	1f 8e       	std	Y+31, r1	; 0x1f
    350e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3510:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3512:	98 2b       	or	r25, r24
    3514:	9d 8f       	std	Y+29, r25	; 0x1d
    3516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3518:	9b 8b       	std	Y+19, r25	; 0x13
    351a:	8c 81       	ldd	r24, Y+4	; 0x04
    351c:	9c 85       	ldd	r25, Y+12	; 0x0c
    351e:	89 0f       	add	r24, r25
    3520:	8c 8b       	std	Y+20, r24	; 0x14
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	88 a3       	std	Y+32, r24	; 0x20
    3526:	9c 89       	ldd	r25, Y+20	; 0x14
    3528:	8c 81       	ldd	r24, Y+4	; 0x04
    352a:	98 17       	cp	r25, r24
    352c:	08 f0       	brcs	.+2      	; 0x3530 <__vector_5+0x11c>
    352e:	18 a2       	std	Y+32, r1	; 0x20
    3530:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3532:	8c 89       	ldd	r24, Y+20	; 0x14
    3534:	98 0f       	add	r25, r24
    3536:	99 a3       	std	Y+33, r25	; 0x21
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	9a a3       	std	Y+34, r25	; 0x22
    353c:	89 a1       	ldd	r24, Y+33	; 0x21
    353e:	9c 89       	ldd	r25, Y+20	; 0x14
    3540:	89 17       	cp	r24, r25
    3542:	08 f0       	brcs	.+2      	; 0x3546 <__vector_5+0x132>
    3544:	1a a2       	std	Y+34, r1	; 0x22
    3546:	88 a1       	ldd	r24, Y+32	; 0x20
    3548:	9a a1       	ldd	r25, Y+34	; 0x22
    354a:	89 2b       	or	r24, r25
    354c:	88 a3       	std	Y+32, r24	; 0x20
    354e:	89 a1       	ldd	r24, Y+33	; 0x21
    3550:	8c 8b       	std	Y+20, r24	; 0x14
    3552:	9d 81       	ldd	r25, Y+5	; 0x05
    3554:	8d 85       	ldd	r24, Y+13	; 0x0d
    3556:	98 0f       	add	r25, r24
    3558:	9d 8b       	std	Y+21, r25	; 0x15
    355a:	91 e0       	ldi	r25, 0x01	; 1
    355c:	9b a3       	std	Y+35, r25	; 0x23
    355e:	8d 89       	ldd	r24, Y+21	; 0x15
    3560:	9d 81       	ldd	r25, Y+5	; 0x05
    3562:	89 17       	cp	r24, r25
    3564:	08 f0       	brcs	.+2      	; 0x3568 <__vector_5+0x154>
    3566:	1b a2       	std	Y+35, r1	; 0x23
    3568:	88 a1       	ldd	r24, Y+32	; 0x20
    356a:	9d 89       	ldd	r25, Y+21	; 0x15
    356c:	89 0f       	add	r24, r25
    356e:	8c a3       	std	Y+36, r24	; 0x24
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	8d a3       	std	Y+37, r24	; 0x25
    3574:	9c a1       	ldd	r25, Y+36	; 0x24
    3576:	8d 89       	ldd	r24, Y+21	; 0x15
    3578:	98 17       	cp	r25, r24
    357a:	08 f0       	brcs	.+2      	; 0x357e <__vector_5+0x16a>
    357c:	1d a2       	std	Y+37, r1	; 0x25
    357e:	9b a1       	ldd	r25, Y+35	; 0x23
    3580:	8d a1       	ldd	r24, Y+37	; 0x25
    3582:	98 2b       	or	r25, r24
    3584:	9b a3       	std	Y+35, r25	; 0x23
    3586:	9c a1       	ldd	r25, Y+36	; 0x24
    3588:	9d 8b       	std	Y+21, r25	; 0x15
    358a:	8e 81       	ldd	r24, Y+6	; 0x06
    358c:	9e 85       	ldd	r25, Y+14	; 0x0e
    358e:	89 0f       	add	r24, r25
    3590:	8e 8b       	std	Y+22, r24	; 0x16
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	8e a3       	std	Y+38, r24	; 0x26
    3596:	9e 89       	ldd	r25, Y+22	; 0x16
    3598:	8e 81       	ldd	r24, Y+6	; 0x06
    359a:	98 17       	cp	r25, r24
    359c:	08 f0       	brcs	.+2      	; 0x35a0 <__vector_5+0x18c>
    359e:	1e a2       	std	Y+38, r1	; 0x26
    35a0:	9b a1       	ldd	r25, Y+35	; 0x23
    35a2:	8e 89       	ldd	r24, Y+22	; 0x16
    35a4:	98 0f       	add	r25, r24
    35a6:	9f a3       	std	Y+39, r25	; 0x27
    35a8:	91 e0       	ldi	r25, 0x01	; 1
    35aa:	98 a7       	std	Y+40, r25	; 0x28
    35ac:	8f a1       	ldd	r24, Y+39	; 0x27
    35ae:	9e 89       	ldd	r25, Y+22	; 0x16
    35b0:	89 17       	cp	r24, r25
    35b2:	08 f0       	brcs	.+2      	; 0x35b6 <__vector_5+0x1a2>
    35b4:	18 a6       	std	Y+40, r1	; 0x28
    35b6:	8e a1       	ldd	r24, Y+38	; 0x26
    35b8:	98 a5       	ldd	r25, Y+40	; 0x28
    35ba:	89 2b       	or	r24, r25
    35bc:	8e a3       	std	Y+38, r24	; 0x26
    35be:	8f a1       	ldd	r24, Y+39	; 0x27
    35c0:	8e 8b       	std	Y+22, r24	; 0x16
    35c2:	9f 81       	ldd	r25, Y+7	; 0x07
    35c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35c6:	98 0f       	add	r25, r24
    35c8:	9f 8b       	std	Y+23, r25	; 0x17
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	99 a7       	std	Y+41, r25	; 0x29
    35ce:	8f 89       	ldd	r24, Y+23	; 0x17
    35d0:	9f 81       	ldd	r25, Y+7	; 0x07
    35d2:	89 17       	cp	r24, r25
    35d4:	08 f0       	brcs	.+2      	; 0x35d8 <__vector_5+0x1c4>
    35d6:	19 a6       	std	Y+41, r1	; 0x29
    35d8:	8e a1       	ldd	r24, Y+38	; 0x26
    35da:	9f 89       	ldd	r25, Y+23	; 0x17
    35dc:	89 0f       	add	r24, r25
    35de:	8a a7       	std	Y+42, r24	; 0x2a
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	8b a7       	std	Y+43, r24	; 0x2b
    35e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    35e6:	8f 89       	ldd	r24, Y+23	; 0x17
    35e8:	98 17       	cp	r25, r24
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <__vector_5+0x1da>
    35ec:	1b a6       	std	Y+43, r1	; 0x2b
    35ee:	99 a5       	ldd	r25, Y+41	; 0x29
    35f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f2:	98 2b       	or	r25, r24
    35f4:	99 a7       	std	Y+41, r25	; 0x29
    35f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    35f8:	9f 8b       	std	Y+23, r25	; 0x17
    35fa:	88 85       	ldd	r24, Y+8	; 0x08
    35fc:	98 89       	ldd	r25, Y+16	; 0x10
    35fe:	89 0f       	add	r24, r25
    3600:	88 8f       	std	Y+24, r24	; 0x18
    3602:	89 a5       	ldd	r24, Y+41	; 0x29
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	89 0f       	add	r24, r25
    3608:	88 8f       	std	Y+24, r24	; 0x18
    360a:	29 89       	ldd	r18, Y+17	; 0x11
    360c:	3a 89       	ldd	r19, Y+18	; 0x12
    360e:	4b 89       	ldd	r20, Y+19	; 0x13
    3610:	5c 89       	ldd	r21, Y+20	; 0x14
    3612:	6d 89       	ldd	r22, Y+21	; 0x15
    3614:	7e 89       	ldd	r23, Y+22	; 0x16
    3616:	8f 89       	ldd	r24, Y+23	; 0x17
    3618:	98 8d       	ldd	r25, Y+24	; 0x18
    361a:	20 93 a1 03 	sts	0x03A1, r18
    361e:	30 93 a2 03 	sts	0x03A2, r19
    3622:	40 93 a3 03 	sts	0x03A3, r20
    3626:	50 93 a4 03 	sts	0x03A4, r21
    362a:	60 93 a5 03 	sts	0x03A5, r22
    362e:	70 93 a6 03 	sts	0x03A6, r23
    3632:	80 93 a7 03 	sts	0x03A7, r24
    3636:	90 93 a8 03 	sts	0x03A8, r25
	ShaftCountLeft++;  //increment left shaft position count
    363a:	80 91 5a 03 	lds	r24, 0x035A
    363e:	90 91 5b 03 	lds	r25, 0x035B
    3642:	a0 91 5c 03 	lds	r26, 0x035C
    3646:	b0 91 5d 03 	lds	r27, 0x035D
    364a:	01 96       	adiw	r24, 0x01	; 1
    364c:	a1 1d       	adc	r26, r1
    364e:	b1 1d       	adc	r27, r1
    3650:	80 93 5a 03 	sts	0x035A, r24
    3654:	90 93 5b 03 	sts	0x035B, r25
    3658:	a0 93 5c 03 	sts	0x035C, r26
    365c:	b0 93 5d 03 	sts	0x035D, r27
}
    3660:	ab 96       	adiw	r28, 0x2b	; 43
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	bf 91       	pop	r27
    366c:	af 91       	pop	r26
    366e:	9f 91       	pop	r25
    3670:	8f 91       	pop	r24
    3672:	7f 91       	pop	r23
    3674:	6f 91       	pop	r22
    3676:	5f 91       	pop	r21
    3678:	4f 91       	pop	r20
    367a:	3f 91       	pop	r19
    367c:	2f 91       	pop	r18
    367e:	0f 90       	pop	r0
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	0f 90       	pop	r0
    3684:	1f 90       	pop	r1
    3686:	18 95       	reti

00003688 <__vector_35>:
//! timer 3 overflow
    /*!
	 Interrupt on overflow of timer 3
    */
ISR(TIMER3_OVF_vect)
{
    3688:	1f 92       	push	r1
    368a:	0f 92       	push	r0
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	0f 92       	push	r0
    3690:	00 90 5b 00 	lds	r0, 0x005B
    3694:	0f 92       	push	r0
    3696:	11 24       	eor	r1, r1
    3698:	2f 93       	push	r18
    369a:	3f 93       	push	r19
    369c:	4f 93       	push	r20
    369e:	5f 93       	push	r21
    36a0:	6f 93       	push	r22
    36a2:	7f 93       	push	r23
    36a4:	8f 93       	push	r24
    36a6:	9f 93       	push	r25
    36a8:	af 93       	push	r26
    36aa:	bf 93       	push	r27
    36ac:	ef 93       	push	r30
    36ae:	ff 93       	push	r31
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62

(*timer3func)();
    36b8:	e0 91 38 0c 	lds	r30, 0x0C38
    36bc:	f0 91 39 0c 	lds	r31, 0x0C39
    36c0:	19 95       	eicall
}
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	ff 91       	pop	r31
    36c8:	ef 91       	pop	r30
    36ca:	bf 91       	pop	r27
    36cc:	af 91       	pop	r26
    36ce:	9f 91       	pop	r25
    36d0:	8f 91       	pop	r24
    36d2:	7f 91       	pop	r23
    36d4:	6f 91       	pop	r22
    36d6:	5f 91       	pop	r21
    36d8:	4f 91       	pop	r20
    36da:	3f 91       	pop	r19
    36dc:	2f 91       	pop	r18
    36de:	0f 90       	pop	r0
    36e0:	00 92 5b 00 	sts	0x005B, r0
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

000036ee <__vector_20>:
//! timer 1 overflow
    /*!
	 Interrupt on overflow of timer 1
    */
ISR(TIMER1_OVF_vect)
{
    36ee:	1f 92       	push	r1
    36f0:	0f 92       	push	r0
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	0f 92       	push	r0
    36f6:	00 90 5b 00 	lds	r0, 0x005B
    36fa:	0f 92       	push	r0
    36fc:	11 24       	eor	r1, r1
    36fe:	2f 93       	push	r18
    3700:	3f 93       	push	r19
    3702:	4f 93       	push	r20
    3704:	5f 93       	push	r21
    3706:	6f 93       	push	r22
    3708:	7f 93       	push	r23
    370a:	8f 93       	push	r24
    370c:	9f 93       	push	r25
    370e:	af 93       	push	r26
    3710:	bf 93       	push	r27
    3712:	ef 93       	push	r30
    3714:	ff 93       	push	r31
    3716:	df 93       	push	r29
    3718:	cf 93       	push	r28
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62

(*timer1func)();
    371e:	e0 91 c4 07 	lds	r30, 0x07C4
    3722:	f0 91 c5 07 	lds	r31, 0x07C5
    3726:	19 95       	eicall
}
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	ff 91       	pop	r31
    372e:	ef 91       	pop	r30
    3730:	bf 91       	pop	r27
    3732:	af 91       	pop	r26
    3734:	9f 91       	pop	r25
    3736:	8f 91       	pop	r24
    3738:	7f 91       	pop	r23
    373a:	6f 91       	pop	r22
    373c:	5f 91       	pop	r21
    373e:	4f 91       	pop	r20
    3740:	3f 91       	pop	r19
    3742:	2f 91       	pop	r18
    3744:	0f 90       	pop	r0
    3746:	00 92 5b 00 	sts	0x005B, r0
    374a:	0f 90       	pop	r0
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	0f 90       	pop	r0
    3750:	1f 90       	pop	r1
    3752:	18 95       	reti

00003754 <__vector_45>:
	 Function used for setting motor's direction
    */
//This ISR can be used to schedule events like refreshing ADC data, LCD data
//Timer 4 overflow interrupt
ISR(TIMER4_OVF_vect)
{
    3754:	1f 92       	push	r1
    3756:	0f 92       	push	r0
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	0f 92       	push	r0
    375c:	00 90 5b 00 	lds	r0, 0x005B
    3760:	0f 92       	push	r0
    3762:	11 24       	eor	r1, r1
    3764:	8f 93       	push	r24
    3766:	9f 93       	push	r25
    3768:	ef 93       	push	r30
    376a:	ff 93       	push	r31
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62

  if (stop_on_timer4_overflow) {
    3774:	80 91 8b 03 	lds	r24, 0x038B
    3778:	90 91 8c 03 	lds	r25, 0x038C
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	39 f0       	breq	.+14     	; 0x378e <__vector_45+0x3a>
	stop_on_timer4_overflow = 0;
    3780:	10 92 8c 03 	sts	0x038C, r1
    3784:	10 92 8b 03 	sts	0x038B, r1
    TCCR4B = 0x00;
    3788:	e1 ea       	ldi	r30, 0xA1	; 161
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	10 82       	st	Z, r1
  }
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	ff 91       	pop	r31
    3794:	ef 91       	pop	r30
    3796:	9f 91       	pop	r25
    3798:	8f 91       	pop	r24
    379a:	0f 90       	pop	r0
    379c:	00 92 5b 00 	sts	0x005B, r0
    37a0:	0f 90       	pop	r0
    37a2:	0f be       	out	0x3f, r0	; 63
    37a4:	0f 90       	pop	r0
    37a6:	1f 90       	pop	r1
    37a8:	18 95       	reti

000037aa <error>:

extern unsigned char Left_white_line;
extern unsigned char Center_white_line;
extern unsigned char Right_white_line;

void error () {
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
	//lcd_string ("error");
}
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <whiteline_follow_end>:

//Called when whiteline following needs to be disabled
void whiteline_follow_end() {
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
	stop();
    37c0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
	white_line_flag = 0;
    37c4:	10 92 7b 03 	sts	0x037B, r1
}
    37c8:	cf 91       	pop	r28
    37ca:	df 91       	pop	r29
    37cc:	08 95       	ret

000037ce <print_sensor_data>:

/**
  Prints White line sensor values on the screen
*/
void print_sensor_data()
{
    37ce:	df 93       	push	r29
    37d0:	cf 93       	push	r28
    37d2:	cd b7       	in	r28, 0x3d	; 61
    37d4:	de b7       	in	r29, 0x3e	; 62
		lcd_clear();
    37d6:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
		print_sensor(1,1,3);	//Prints value of White Line Sensor1
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	61 e0       	ldi	r22, 0x01	; 1
    37de:	43 e0       	ldi	r20, 0x03	; 3
    37e0:	0e 94 b2 18 	call	0x3164	; 0x3164 <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	65 e0       	ldi	r22, 0x05	; 5
    37e8:	42 e0       	ldi	r20, 0x02	; 2
    37ea:	0e 94 b2 18 	call	0x3164	; 0x3164 <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	69 e0       	ldi	r22, 0x09	; 9
    37f2:	41 e0       	ldi	r20, 0x01	; 1
    37f4:	0e 94 b2 18 	call	0x3164	; 0x3164 <print_sensor>
}
    37f8:	cf 91       	pop	r28
    37fa:	df 91       	pop	r29
    37fc:	08 95       	ret

000037fe <read_sensors>:

/**
  Reads all relevant sensor values and stores it in appropriate global variables.
*/
void read_sensors()
{
    37fe:	df 93       	push	r29
    3800:	cf 93       	push	r28
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
	Left_white_line = ADC_Conversion(LEFT_SENSOR);	
    3806:	83 e0       	ldi	r24, 0x03	; 3
    3808:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    380c:	80 93 66 03 	sts	0x0366, r24
	Center_white_line = ADC_Conversion(CENTER_SENSOR);	
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    3816:	80 93 67 03 	sts	0x0367, r24
	Right_white_line = ADC_Conversion(RIGHT_SENSOR);	
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    3820:	80 93 68 03 	sts	0x0368, r24
	Front_IR_Sensor = ADC_Conversion(FRONT_IR_SENSOR);
    3824:	86 e0       	ldi	r24, 0x06	; 6
    3826:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    382a:	80 93 6a 03 	sts	0x036A, r24
}
    382e:	cf 91       	pop	r28
    3830:	df 91       	pop	r29
    3832:	08 95       	ret

00003834 <reset_shaft_counters>:

/**
 * Reset shaft counters.
 */
void reset_shaft_counters()
{
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft = 0;
    383c:	10 92 5a 03 	sts	0x035A, r1
    3840:	10 92 5b 03 	sts	0x035B, r1
    3844:	10 92 5c 03 	sts	0x035C, r1
    3848:	10 92 5d 03 	sts	0x035D, r1
	ShaftCountRight = 0;
    384c:	10 92 5e 03 	sts	0x035E, r1
    3850:	10 92 5f 03 	sts	0x035F, r1
    3854:	10 92 60 03 	sts	0x0360, r1
    3858:	10 92 61 03 	sts	0x0361, r1
}
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <whiteline_follow_continue>:
			(1,1,1)			- Reached the intersection
			(0,0,0)			- Recovery mode. Move in the direction of the last sensor that was on white line
*/
//This is a non-blocking function. It is called once on every iteration of the main loop if "white_line_flag" is ON
//It reads the whiteline sensor values and determines what it should do next to stay on the white line
void whiteline_follow_continue() {
    3862:	df 93       	push	r29
    3864:	cf 93       	push	r28
    3866:	0f 92       	push	r0
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62

		read_sensors();
    386c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <read_sensors>

		flag=0;
    3870:	10 92 58 03 	sts	0x0358, r1
		print_sensor_data();
    3874:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <print_sensor_data>

		if(Center_white_line<W_THRESHOLD_STOP && Left_white_line<W_THRESHOLD_STOP && Right_white_line<W_THRESHOLD_STOP ){
    3878:	80 91 67 03 	lds	r24, 0x0367
    387c:	88 30       	cpi	r24, 0x08	; 8
    387e:	88 f4       	brcc	.+34     	; 0x38a2 <whiteline_follow_continue+0x40>
    3880:	80 91 66 03 	lds	r24, 0x0366
    3884:	88 30       	cpi	r24, 0x08	; 8
    3886:	68 f4       	brcc	.+26     	; 0x38a2 <whiteline_follow_continue+0x40>
    3888:	80 91 68 03 	lds	r24, 0x0368
    388c:	88 30       	cpi	r24, 0x08	; 8
    388e:	48 f4       	brcc	.+18     	; 0x38a2 <whiteline_follow_continue+0x40>
		 	if (whiteline_stop_intersection_flag) {
    3890:	80 91 7c 03 	lds	r24, 0x037C
    3894:	88 23       	and	r24, r24
    3896:	29 f0       	breq	.+10     	; 0x38a2 <whiteline_follow_continue+0x40>
				whiteline_follow_end();
    3898:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <whiteline_follow_end>
				send_char(SUCCESS);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
			}
			return;*/
		}

		
		if( Front_IR_Sensor<0xF0)
    38a2:	80 91 6a 03 	lds	r24, 0x036A
    38a6:	80 3f       	cpi	r24, 0xF0	; 240
    38a8:	28 f4       	brcc	.+10     	; 0x38b4 <whiteline_follow_continue+0x52>
		{
			stop();
    38aa:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
			buzzer_on();
    38ae:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
    38b2:	b3 c0       	rjmp	.+358    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}
		//Sensor config : 010
		else if(Left_white_line > W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line > W_THRESHOLD)
    38b4:	80 91 66 03 	lds	r24, 0x0366
    38b8:	80 31       	cpi	r24, 0x10	; 16
    38ba:	98 f0       	brcs	.+38     	; 0x38e2 <whiteline_follow_continue+0x80>
    38bc:	80 91 67 03 	lds	r24, 0x0367
    38c0:	8f 30       	cpi	r24, 0x0F	; 15
    38c2:	78 f4       	brcc	.+30     	; 0x38e2 <whiteline_follow_continue+0x80>
    38c4:	80 91 68 03 	lds	r24, 0x0368
    38c8:	80 31       	cpi	r24, 0x10	; 16
    38ca:	58 f0       	brcs	.+22     	; 0x38e2 <whiteline_follow_continue+0x80>
		{
			forward();
    38cc:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
			velocity(150,150);
    38d0:	86 e9       	ldi	r24, 0x96	; 150
    38d2:	66 e9       	ldi	r22, 0x96	; 150
    38d4:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
			black_flag = 0;
    38d8:	10 92 59 03 	sts	0x0359, r1
			buzzer_off();
    38dc:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    38e0:	9c c0       	rjmp	.+312    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}

		//Sensor config : 110
		else if(Left_white_line < W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line > W_THRESHOLD)
    38e2:	80 91 66 03 	lds	r24, 0x0366
    38e6:	8f 30       	cpi	r24, 0x0F	; 15
    38e8:	98 f4       	brcc	.+38     	; 0x3910 <whiteline_follow_continue+0xae>
    38ea:	80 91 67 03 	lds	r24, 0x0367
    38ee:	8f 30       	cpi	r24, 0x0F	; 15
    38f0:	78 f4       	brcc	.+30     	; 0x3910 <whiteline_follow_continue+0xae>
    38f2:	80 91 68 03 	lds	r24, 0x0368
    38f6:	80 31       	cpi	r24, 0x10	; 16
    38f8:	58 f0       	brcs	.+22     	; 0x3910 <whiteline_follow_continue+0xae>
		{
			forward();
    38fa:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
			velocity(120,150);
    38fe:	88 e7       	ldi	r24, 0x78	; 120
    3900:	66 e9       	ldi	r22, 0x96	; 150
    3902:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
			black_flag = 0;
    3906:	10 92 59 03 	sts	0x0359, r1
			buzzer_off();
    390a:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    390e:	85 c0       	rjmp	.+266    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}
		
		//Sensor config : 100
		else if(Left_white_line < W_THRESHOLD && Center_white_line > W_THRESHOLD && Right_white_line > W_THRESHOLD)
    3910:	80 91 66 03 	lds	r24, 0x0366
    3914:	8f 30       	cpi	r24, 0x0F	; 15
    3916:	c0 f4       	brcc	.+48     	; 0x3948 <whiteline_follow_continue+0xe6>
    3918:	80 91 67 03 	lds	r24, 0x0367
    391c:	80 31       	cpi	r24, 0x10	; 16
    391e:	a0 f0       	brcs	.+40     	; 0x3948 <whiteline_follow_continue+0xe6>
    3920:	80 91 68 03 	lds	r24, 0x0368
    3924:	80 31       	cpi	r24, 0x10	; 16
    3926:	80 f0       	brcs	.+32     	; 0x3948 <whiteline_follow_continue+0xe6>
		{
			PORTA = 0x05;
    3928:	e2 e2       	ldi	r30, 0x22	; 34
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	85 e0       	ldi	r24, 0x05	; 5
    392e:	80 83       	st	Z, r24
			velocity(50,130);
    3930:	82 e3       	ldi	r24, 0x32	; 50
    3932:	62 e8       	ldi	r22, 0x82	; 130
    3934:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
			last_on = LEFT_SENSOR;
    3938:	83 e0       	ldi	r24, 0x03	; 3
    393a:	80 93 37 02 	sts	0x0237, r24
			black_flag = 0;
    393e:	10 92 59 03 	sts	0x0359, r1
			buzzer_off();
    3942:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    3946:	69 c0       	rjmp	.+210    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}

		//Sensor config : 011
		else if(Left_white_line > W_THRESHOLD && Center_white_line < W_THRESHOLD && Right_white_line < W_THRESHOLD)
    3948:	80 91 66 03 	lds	r24, 0x0366
    394c:	80 31       	cpi	r24, 0x10	; 16
    394e:	98 f0       	brcs	.+38     	; 0x3976 <whiteline_follow_continue+0x114>
    3950:	80 91 67 03 	lds	r24, 0x0367
    3954:	8f 30       	cpi	r24, 0x0F	; 15
    3956:	78 f4       	brcc	.+30     	; 0x3976 <whiteline_follow_continue+0x114>
    3958:	80 91 68 03 	lds	r24, 0x0368
    395c:	8f 30       	cpi	r24, 0x0F	; 15
    395e:	58 f4       	brcc	.+22     	; 0x3976 <whiteline_follow_continue+0x114>
		{
			forward();
    3960:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
			velocity(150,120);
    3964:	86 e9       	ldi	r24, 0x96	; 150
    3966:	68 e7       	ldi	r22, 0x78	; 120
    3968:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
			black_flag = 0;
    396c:	10 92 59 03 	sts	0x0359, r1
			buzzer_off();
    3970:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    3974:	52 c0       	rjmp	.+164    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}

		//Sensor config : 001
		else if(Left_white_line > W_THRESHOLD && Center_white_line > W_THRESHOLD && Right_white_line < W_THRESHOLD)
    3976:	80 91 66 03 	lds	r24, 0x0366
    397a:	80 31       	cpi	r24, 0x10	; 16
    397c:	c0 f0       	brcs	.+48     	; 0x39ae <whiteline_follow_continue+0x14c>
    397e:	80 91 67 03 	lds	r24, 0x0367
    3982:	80 31       	cpi	r24, 0x10	; 16
    3984:	a0 f0       	brcs	.+40     	; 0x39ae <whiteline_follow_continue+0x14c>
    3986:	80 91 68 03 	lds	r24, 0x0368
    398a:	8f 30       	cpi	r24, 0x0F	; 15
    398c:	80 f4       	brcc	.+32     	; 0x39ae <whiteline_follow_continue+0x14c>
		{
			PORTA = 0x0A;
    398e:	e2 e2       	ldi	r30, 0x22	; 34
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	8a e0       	ldi	r24, 0x0A	; 10
    3994:	80 83       	st	Z, r24
			velocity(130,50);
    3996:	82 e8       	ldi	r24, 0x82	; 130
    3998:	62 e3       	ldi	r22, 0x32	; 50
    399a:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
			last_on = RIGHT_SENSOR;
    399e:	81 e0       	ldi	r24, 0x01	; 1
    39a0:	80 93 37 02 	sts	0x0237, r24
			black_flag = 0;
    39a4:	10 92 59 03 	sts	0x0359, r1
			buzzer_off();
    39a8:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    39ac:	36 c0       	rjmp	.+108    	; 0x3a1a <whiteline_follow_continue+0x1b8>
		}
		//Sensor config : 000
		else
		{
			buzzer_off();
    39ae:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
			if(black_flag >= CONT_BLACK)  {
    39b2:	80 91 59 03 	lds	r24, 0x0359
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	d8 f0       	brcs	.+54     	; 0x39f0 <whiteline_follow_continue+0x18e>
				if(last_on == LEFT_SENSOR)
    39ba:	80 91 37 02 	lds	r24, 0x0237
    39be:	83 30       	cpi	r24, 0x03	; 3
    39c0:	21 f4       	brne	.+8      	; 0x39ca <whiteline_follow_continue+0x168>
					motion_set(0x05);
    39c2:	85 e0       	ldi	r24, 0x05	; 5
    39c4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
    39c8:	07 c0       	rjmp	.+14     	; 0x39d8 <whiteline_follow_continue+0x176>
				else if(last_on == RIGHT_SENSOR)
    39ca:	80 91 37 02 	lds	r24, 0x0237
    39ce:	81 30       	cpi	r24, 0x01	; 1
    39d0:	19 f4       	brne	.+6      	; 0x39d8 <whiteline_follow_continue+0x176>
					motion_set(0x0A);
    39d2:	8a e0       	ldi	r24, 0x0A	; 10
    39d4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
				velocity(100,100);
    39d8:	84 e6       	ldi	r24, 0x64	; 100
    39da:	64 e6       	ldi	r22, 0x64	; 100
    39dc:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
				while(1){
					print_sensor_data();
    39e0:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <print_sensor_data>
					read_sensors();
    39e4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <read_sensors>
					if(Center_white_line < W_THRESHOLD) break;
    39e8:	80 91 67 03 	lds	r24, 0x0367
    39ec:	8f 30       	cpi	r24, 0x0F	; 15
    39ee:	c0 f7       	brcc	.-16     	; 0x39e0 <whiteline_follow_continue+0x17e>
				}
			}
			black_flag = (black_flag < CONT_BLACK)?black_flag+1:CONT_BLACK;
    39f0:	80 91 59 03 	lds	r24, 0x0359
    39f4:	82 30       	cpi	r24, 0x02	; 2
    39f6:	30 f4       	brcc	.+12     	; 0x3a04 <whiteline_follow_continue+0x1a2>
    39f8:	80 91 59 03 	lds	r24, 0x0359
    39fc:	98 2f       	mov	r25, r24
    39fe:	9f 5f       	subi	r25, 0xFF	; 255
    3a00:	99 83       	std	Y+1, r25	; 0x01
    3a02:	02 c0       	rjmp	.+4      	; 0x3a08 <whiteline_follow_continue+0x1a6>
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	89 83       	std	Y+1, r24	; 0x01
    3a08:	99 81       	ldd	r25, Y+1	; 0x01
    3a0a:	90 93 59 03 	sts	0x0359, r25
			forward();
    3a0e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
			velocity(0,0);
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	60 e0       	ldi	r22, 0x00	; 0
    3a16:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
		}
}
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <whiteline_follow_start>:

//Called when whiteline following needs to be enabled
void whiteline_follow_start() {
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
	white_line_flag = 1;
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	80 93 7b 03 	sts	0x037B, r24
	whiteline_follow_continue();
    3a30:	0e 94 31 1c 	call	0x3862	; 0x3862 <whiteline_follow_continue>
}
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <turn_right>:

/**
  Turn right at an intersection.
*/
void turn_right(){
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	2e 97       	sbiw	r28, 0x0e	; 14
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
	buzzer_off();
    3a4e:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
	motion_set(0x0A);
    3a52:	8a e0       	ldi	r24, 0x0A	; 10
    3a54:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
	velocity(100,100);
    3a58:	84 e6       	ldi	r24, 0x64	; 100
    3a5a:	64 e6       	ldi	r22, 0x64	; 100
    3a5c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	aa e7       	ldi	r26, 0x7A	; 122
    3a66:	b4 e4       	ldi	r27, 0x44	; 68
    3a68:	8b 87       	std	Y+11, r24	; 0x0b
    3a6a:	9c 87       	std	Y+12, r25	; 0x0c
    3a6c:	ad 87       	std	Y+13, r26	; 0x0d
    3a6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a78:	2d ec       	ldi	r18, 0xCD	; 205
    3a7a:	3c ec       	ldi	r19, 0xCC	; 204
    3a7c:	4c e2       	ldi	r20, 0x2C	; 44
    3a7e:	55 e4       	ldi	r21, 0x45	; 69
    3a80:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	8f 83       	std	Y+7, r24	; 0x07
    3a8a:	98 87       	std	Y+8, r25	; 0x08
    3a8c:	a9 87       	std	Y+9, r26	; 0x09
    3a8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a90:	6f 81       	ldd	r22, Y+7	; 0x07
    3a92:	78 85       	ldd	r23, Y+8	; 0x08
    3a94:	89 85       	ldd	r24, Y+9	; 0x09
    3a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	40 e8       	ldi	r20, 0x80	; 128
    3a9e:	5f e3       	ldi	r21, 0x3F	; 63
    3aa0:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    3aa4:	88 23       	and	r24, r24
    3aa6:	2c f4       	brge	.+10     	; 0x3ab2 <turn_right+0x78>
		__ticks = 1;
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	9e 83       	std	Y+6, r25	; 0x06
    3aae:	8d 83       	std	Y+5, r24	; 0x05
    3ab0:	3f c0       	rjmp	.+126    	; 0x3b30 <turn_right+0xf6>
	else if (__tmp > 65535)
    3ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab4:	78 85       	ldd	r23, Y+8	; 0x08
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	3f ef       	ldi	r19, 0xFF	; 255
    3abe:	4f e7       	ldi	r20, 0x7F	; 127
    3ac0:	57 e4       	ldi	r21, 0x47	; 71
    3ac2:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    3ac6:	18 16       	cp	r1, r24
    3ac8:	4c f5       	brge	.+82     	; 0x3b1c <turn_right+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aca:	6b 85       	ldd	r22, Y+11	; 0x0b
    3acc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ace:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e2       	ldi	r20, 0x20	; 32
    3ad8:	51 e4       	ldi	r21, 0x41	; 65
    3ada:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	cd 01       	movw	r24, r26
    3ae6:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9e 83       	std	Y+6, r25	; 0x06
    3af0:	8d 83       	std	Y+5, r24	; 0x05
    3af2:	0f c0       	rjmp	.+30     	; 0x3b12 <turn_right+0xd8>
    3af4:	84 e1       	ldi	r24, 0x14	; 20
    3af6:	91 e0       	ldi	r25, 0x01	; 1
    3af8:	9c 83       	std	Y+4, r25	; 0x04
    3afa:	8b 83       	std	Y+3, r24	; 0x03
    3afc:	8b 81       	ldd	r24, Y+3	; 0x03
    3afe:	9c 81       	ldd	r25, Y+4	; 0x04
    3b00:	01 97       	sbiw	r24, 0x01	; 1
    3b02:	f1 f7       	brne	.-4      	; 0x3b00 <turn_right+0xc6>
    3b04:	9c 83       	std	Y+4, r25	; 0x04
    3b06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b08:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	9e 83       	std	Y+6, r25	; 0x06
    3b10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b12:	8d 81       	ldd	r24, Y+5	; 0x05
    3b14:	9e 81       	ldd	r25, Y+6	; 0x06
    3b16:	00 97       	sbiw	r24, 0x00	; 0
    3b18:	69 f7       	brne	.-38     	; 0x3af4 <turn_right+0xba>
    3b1a:	14 c0       	rjmp	.+40     	; 0x3b44 <turn_right+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1e:	78 85       	ldd	r23, Y+8	; 0x08
    3b20:	89 85       	ldd	r24, Y+9	; 0x09
    3b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b24:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	9e 83       	std	Y+6, r25	; 0x06
    3b2e:	8d 83       	std	Y+5, r24	; 0x05
    3b30:	8d 81       	ldd	r24, Y+5	; 0x05
    3b32:	9e 81       	ldd	r25, Y+6	; 0x06
    3b34:	9a 83       	std	Y+2, r25	; 0x02
    3b36:	89 83       	std	Y+1, r24	; 0x01
    3b38:	89 81       	ldd	r24, Y+1	; 0x01
    3b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <turn_right+0x102>
    3b40:	9a 83       	std	Y+2, r25	; 0x02
    3b42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while(1){
		print_sensor_data();
    3b44:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <print_sensor_data>
		read_sensors();
    3b48:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <read_sensors>
		if(Center_white_line < W_THRESHOLD) break;
    3b4c:	80 91 67 03 	lds	r24, 0x0367
    3b50:	8f 30       	cpi	r24, 0x0F	; 15
    3b52:	c0 f7       	brcc	.-16     	; 0x3b44 <turn_right+0x10a>
	}
	velocity(0,0);
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	60 e0       	ldi	r22, 0x00	; 0
    3b58:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
}
    3b5c:	2e 96       	adiw	r28, 0x0e	; 14
    3b5e:	0f b6       	in	r0, 0x3f	; 63
    3b60:	f8 94       	cli
    3b62:	de bf       	out	0x3e, r29	; 62
    3b64:	0f be       	out	0x3f, r0	; 63
    3b66:	cd bf       	out	0x3d, r28	; 61
    3b68:	cf 91       	pop	r28
    3b6a:	df 91       	pop	r29
    3b6c:	08 95       	ret

00003b6e <turn_left>:

/**
  Turn left at an intersection.
*/
void turn_left(){
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	2e 97       	sbiw	r28, 0x0e	; 14
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
	buzzer_off();
    3b82:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
	motion_set(0x05);
    3b86:	85 e0       	ldi	r24, 0x05	; 5
    3b88:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <motion_set>
	velocity(100,100);
    3b8c:	84 e6       	ldi	r24, 0x64	; 100
    3b8e:	64 e6       	ldi	r22, 0x64	; 100
    3b90:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	aa e7       	ldi	r26, 0x7A	; 122
    3b9a:	b4 e4       	ldi	r27, 0x44	; 68
    3b9c:	8b 87       	std	Y+11, r24	; 0x0b
    3b9e:	9c 87       	std	Y+12, r25	; 0x0c
    3ba0:	ad 87       	std	Y+13, r26	; 0x0d
    3ba2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bac:	2d ec       	ldi	r18, 0xCD	; 205
    3bae:	3c ec       	ldi	r19, 0xCC	; 204
    3bb0:	4c e2       	ldi	r20, 0x2C	; 44
    3bb2:	55 e4       	ldi	r21, 0x45	; 69
    3bb4:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	8f 83       	std	Y+7, r24	; 0x07
    3bbe:	98 87       	std	Y+8, r25	; 0x08
    3bc0:	a9 87       	std	Y+9, r26	; 0x09
    3bc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bc6:	78 85       	ldd	r23, Y+8	; 0x08
    3bc8:	89 85       	ldd	r24, Y+9	; 0x09
    3bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	40 e8       	ldi	r20, 0x80	; 128
    3bd2:	5f e3       	ldi	r21, 0x3F	; 63
    3bd4:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    3bd8:	88 23       	and	r24, r24
    3bda:	2c f4       	brge	.+10     	; 0x3be6 <turn_left+0x78>
		__ticks = 1;
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	9e 83       	std	Y+6, r25	; 0x06
    3be2:	8d 83       	std	Y+5, r24	; 0x05
    3be4:	3f c0       	rjmp	.+126    	; 0x3c64 <turn_left+0xf6>
	else if (__tmp > 65535)
    3be6:	6f 81       	ldd	r22, Y+7	; 0x07
    3be8:	78 85       	ldd	r23, Y+8	; 0x08
    3bea:	89 85       	ldd	r24, Y+9	; 0x09
    3bec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	3f ef       	ldi	r19, 0xFF	; 255
    3bf2:	4f e7       	ldi	r20, 0x7F	; 127
    3bf4:	57 e4       	ldi	r21, 0x47	; 71
    3bf6:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    3bfa:	18 16       	cp	r1, r24
    3bfc:	4c f5       	brge	.+82     	; 0x3c50 <turn_left+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 e2       	ldi	r20, 0x20	; 32
    3c0c:	51 e4       	ldi	r21, 0x41	; 65
    3c0e:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3c1e:	dc 01       	movw	r26, r24
    3c20:	cb 01       	movw	r24, r22
    3c22:	9e 83       	std	Y+6, r25	; 0x06
    3c24:	8d 83       	std	Y+5, r24	; 0x05
    3c26:	0f c0       	rjmp	.+30     	; 0x3c46 <turn_left+0xd8>
    3c28:	84 e1       	ldi	r24, 0x14	; 20
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	9c 83       	std	Y+4, r25	; 0x04
    3c2e:	8b 83       	std	Y+3, r24	; 0x03
    3c30:	8b 81       	ldd	r24, Y+3	; 0x03
    3c32:	9c 81       	ldd	r25, Y+4	; 0x04
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	f1 f7       	brne	.-4      	; 0x3c34 <turn_left+0xc6>
    3c38:	9c 83       	std	Y+4, r25	; 0x04
    3c3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c40:	01 97       	sbiw	r24, 0x01	; 1
    3c42:	9e 83       	std	Y+6, r25	; 0x06
    3c44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c46:	8d 81       	ldd	r24, Y+5	; 0x05
    3c48:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	69 f7       	brne	.-38     	; 0x3c28 <turn_left+0xba>
    3c4e:	14 c0       	rjmp	.+40     	; 0x3c78 <turn_left+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c50:	6f 81       	ldd	r22, Y+7	; 0x07
    3c52:	78 85       	ldd	r23, Y+8	; 0x08
    3c54:	89 85       	ldd	r24, Y+9	; 0x09
    3c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c58:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	cb 01       	movw	r24, r22
    3c60:	9e 83       	std	Y+6, r25	; 0x06
    3c62:	8d 83       	std	Y+5, r24	; 0x05
    3c64:	8d 81       	ldd	r24, Y+5	; 0x05
    3c66:	9e 81       	ldd	r25, Y+6	; 0x06
    3c68:	9a 83       	std	Y+2, r25	; 0x02
    3c6a:	89 83       	std	Y+1, r24	; 0x01
    3c6c:	89 81       	ldd	r24, Y+1	; 0x01
    3c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	f1 f7       	brne	.-4      	; 0x3c70 <turn_left+0x102>
    3c74:	9a 83       	std	Y+2, r25	; 0x02
    3c76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	while(1){
		print_sensor_data();
    3c78:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <print_sensor_data>
		read_sensors();
    3c7c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <read_sensors>
		if(Center_white_line < W_THRESHOLD) break;
    3c80:	80 91 67 03 	lds	r24, 0x0367
    3c84:	8f 30       	cpi	r24, 0x0F	; 15
    3c86:	c0 f7       	brcc	.-16     	; 0x3c78 <turn_left+0x10a>
	}
	velocity(0,0);
    3c88:	80 e0       	ldi	r24, 0x00	; 0
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
}
    3c90:	2e 96       	adiw	r28, 0x0e	; 14
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <go_distance>:

/**
  Go forward by a certain specified number of steps.
*/
void go_distance(unsigned char x)
{
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	0f 92       	push	r0
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	89 83       	std	Y+1, r24	; 0x01
	reset_shaft_counters();
    3cae:	0e 94 1a 1c 	call	0x3834	; 0x3834 <reset_shaft_counters>
   forward();
    3cb2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
	velocity(100,100);
    3cb6:	84 e6       	ldi	r24, 0x64	; 100
    3cb8:	64 e6       	ldi	r22, 0x64	; 100
    3cba:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
	PORTJ = 0x00;
    3cbe:	e5 e0       	ldi	r30, 0x05	; 5
    3cc0:	f1 e0       	ldi	r31, 0x01	; 1
    3cc2:	10 82       	st	Z, r1
	while(1){
		read_sensors();
    3cc4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <read_sensors>
		print_sensor_data();
    3cc8:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <print_sensor_data>
		if( Front_IR_Sensor<0xF0)
    3ccc:	80 91 6a 03 	lds	r24, 0x036A
    3cd0:	80 3f       	cpi	r24, 0xF0	; 240
    3cd2:	28 f4       	brcc	.+10     	; 0x3cde <go_distance+0x3c>
		{
			stop();
    3cd4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
			buzzer_on();
    3cd8:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
    3cdc:	04 c0       	rjmp	.+8      	; 0x3ce6 <go_distance+0x44>
		}
		else
		{
			forward();
    3cde:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
			buzzer_off();
    3ce2:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
		}
		if((ShaftCountLeft + ShaftCountRight)*5 > x*10)
    3ce6:	20 91 5a 03 	lds	r18, 0x035A
    3cea:	30 91 5b 03 	lds	r19, 0x035B
    3cee:	40 91 5c 03 	lds	r20, 0x035C
    3cf2:	50 91 5d 03 	lds	r21, 0x035D
    3cf6:	80 91 5e 03 	lds	r24, 0x035E
    3cfa:	90 91 5f 03 	lds	r25, 0x035F
    3cfe:	a0 91 60 03 	lds	r26, 0x0360
    3d02:	b0 91 61 03 	lds	r27, 0x0361
    3d06:	28 0f       	add	r18, r24
    3d08:	39 1f       	adc	r19, r25
    3d0a:	4a 1f       	adc	r20, r26
    3d0c:	5b 1f       	adc	r21, r27
    3d0e:	da 01       	movw	r26, r20
    3d10:	c9 01       	movw	r24, r18
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	aa 1f       	adc	r26, r26
    3d18:	bb 1f       	adc	r27, r27
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	aa 1f       	adc	r26, r26
    3d20:	bb 1f       	adc	r27, r27
    3d22:	ba 01       	movw	r22, r20
    3d24:	a9 01       	movw	r20, r18
    3d26:	48 0f       	add	r20, r24
    3d28:	59 1f       	adc	r21, r25
    3d2a:	6a 1f       	adc	r22, r26
    3d2c:	7b 1f       	adc	r23, r27
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	88 2f       	mov	r24, r24
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	9c 01       	movw	r18, r24
    3d36:	22 0f       	add	r18, r18
    3d38:	33 1f       	adc	r19, r19
    3d3a:	c9 01       	movw	r24, r18
    3d3c:	88 0f       	add	r24, r24
    3d3e:	99 1f       	adc	r25, r25
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	82 0f       	add	r24, r18
    3d46:	93 1f       	adc	r25, r19
    3d48:	aa 27       	eor	r26, r26
    3d4a:	97 fd       	sbrc	r25, 7
    3d4c:	a0 95       	com	r26
    3d4e:	ba 2f       	mov	r27, r26
    3d50:	84 17       	cp	r24, r20
    3d52:	95 07       	cpc	r25, r21
    3d54:	a6 07       	cpc	r26, r22
    3d56:	b7 07       	cpc	r27, r23
    3d58:	08 f0       	brcs	.+2      	; 0x3d5c <go_distance+0xba>
    3d5a:	b4 cf       	rjmp	.-152    	; 0x3cc4 <go_distance+0x22>
			break;
	}
	velocity(0,0);
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	60 e0       	ldi	r22, 0x00	; 0
    3d60:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
}
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <position_encoder_init>:
//The required interrupt count on the shaft after which the "goal" i.e. the correct position would be reached
extern unsigned int ReqdShaftCountInt;
extern int not_reached_goal;

//Initialize the left and right position encoders
void position_encoder_init(){
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
	left_position_encoder_interrupt_init();
    3d74:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    3d78:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <right_position_encoder_interrupt_init>
	ShaftCountLeft = 0;
    3d7c:	10 92 5a 03 	sts	0x035A, r1
    3d80:	10 92 5b 03 	sts	0x035B, r1
    3d84:	10 92 5c 03 	sts	0x035C, r1
    3d88:	10 92 5d 03 	sts	0x035D, r1
	ShaftCountRight = 0;
    3d8c:	10 92 5e 03 	sts	0x035E, r1
    3d90:	10 92 5f 03 	sts	0x035F, r1
    3d94:	10 92 60 03 	sts	0x0360, r1
    3d98:	10 92 61 03 	sts	0x0361, r1
}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <position_encoder_disable>:

//Disable the left and right position encoders when not in use
void position_encoder_disable(){
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	cd b7       	in	r28, 0x3d	; 61
    3da8:	de b7       	in	r29, 0x3e	; 62
	left_position_encoder_interrupt_disable();
    3daa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <left_position_encoder_interrupt_disable>
	right_position_encoder_interrupt_disable();
    3dae:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <right_position_encoder_interrupt_disable>
}
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <checkPosition>:

//This is to check if the bot is in the required position as asked for by the command
void checkPosition(){
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
	if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
    3dc0:	80 91 7d 03 	lds	r24, 0x037D
    3dc4:	90 91 7e 03 	lds	r25, 0x037E
    3dc8:	9c 01       	movw	r18, r24
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	50 e0       	ldi	r21, 0x00	; 0
    3dce:	80 91 5e 03 	lds	r24, 0x035E
    3dd2:	90 91 5f 03 	lds	r25, 0x035F
    3dd6:	a0 91 60 03 	lds	r26, 0x0360
    3dda:	b0 91 61 03 	lds	r27, 0x0361
    3dde:	82 17       	cp	r24, r18
    3de0:	93 07       	cpc	r25, r19
    3de2:	a4 07       	cpc	r26, r20
    3de4:	b5 07       	cpc	r27, r21
    3de6:	a0 f4       	brcc	.+40     	; 0x3e10 <checkPosition+0x58>
    3de8:	80 91 7d 03 	lds	r24, 0x037D
    3dec:	90 91 7e 03 	lds	r25, 0x037E
    3df0:	9c 01       	movw	r18, r24
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	50 e0       	ldi	r21, 0x00	; 0
    3df6:	80 91 5a 03 	lds	r24, 0x035A
    3dfa:	90 91 5b 03 	lds	r25, 0x035B
    3dfe:	a0 91 5c 03 	lds	r26, 0x035C
    3e02:	b0 91 5d 03 	lds	r27, 0x035D
    3e06:	82 17       	cp	r24, r18
    3e08:	93 07       	cpc	r25, r19
    3e0a:	a4 07       	cpc	r26, r20
    3e0c:	b5 07       	cpc	r27, r21
    3e0e:	b0 f0       	brcs	.+44     	; 0x3e3c <checkPosition+0x84>
	{
		not_reached_goal = 0;
    3e10:	10 92 80 03 	sts	0x0380, r1
    3e14:	10 92 7f 03 	sts	0x037F, r1
		stop(); //Stop action
    3e18:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		ShaftCountRight = 0;
    3e1c:	10 92 5e 03 	sts	0x035E, r1
    3e20:	10 92 5f 03 	sts	0x035F, r1
    3e24:	10 92 60 03 	sts	0x0360, r1
    3e28:	10 92 61 03 	sts	0x0361, r1
		ShaftCountLeft = 0;
    3e2c:	10 92 5a 03 	sts	0x035A, r1
    3e30:	10 92 5b 03 	sts	0x035B, r1
    3e34:	10 92 5c 03 	sts	0x035C, r1
    3e38:	10 92 5d 03 	sts	0x035D, r1
	}
}
    3e3c:	cf 91       	pop	r28
    3e3e:	df 91       	pop	r29
    3e40:	08 95       	ret

00003e42 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	00 d0       	rcall	.+0      	; 0x3e48 <angle_rotate+0x6>
    3e48:	00 d0       	rcall	.+0      	; 0x3e4a <angle_rotate+0x8>
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
	position_encoder_init();
    3e52:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <position_encoder_init>
	float ReqdShaftCount = 0;
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	a0 e0       	ldi	r26, 0x00	; 0
    3e5c:	b0 e0       	ldi	r27, 0x00	; 0
    3e5e:	89 83       	std	Y+1, r24	; 0x01
    3e60:	9a 83       	std	Y+2, r25	; 0x02
    3e62:	ab 83       	std	Y+3, r26	; 0x03
    3e64:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = 0;
    3e66:	10 92 7e 03 	sts	0x037E, r1
    3e6a:	10 92 7d 03 	sts	0x037D, r1

	//Calculate the number of times the position encoder interrupt will need to fire
	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    3e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e70:	9e 81       	ldd	r25, Y+6	; 0x06
    3e72:	cc 01       	movw	r24, r24
    3e74:	a0 e0       	ldi	r26, 0x00	; 0
    3e76:	b0 e0       	ldi	r27, 0x00	; 0
    3e78:	bc 01       	movw	r22, r24
    3e7a:	cd 01       	movw	r24, r26
    3e7c:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	bc 01       	movw	r22, r24
    3e86:	cd 01       	movw	r24, r26
    3e88:	28 e4       	ldi	r18, 0x48	; 72
    3e8a:	31 ee       	ldi	r19, 0xE1	; 225
    3e8c:	42 e8       	ldi	r20, 0x82	; 130
    3e8e:	50 e4       	ldi	r21, 0x40	; 64
    3e90:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	9a 83       	std	Y+2, r25	; 0x02
    3e9c:	ab 83       	std	Y+3, r26	; 0x03
    3e9e:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    3ea0:	69 81       	ldd	r22, Y+1	; 0x01
    3ea2:	7a 81       	ldd	r23, Y+2	; 0x02
    3ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ea8:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	90 93 7e 03 	sts	0x037E, r25
    3eb4:	80 93 7d 03 	sts	0x037D, r24
	ShaftCountRight = 0; 
    3eb8:	10 92 5e 03 	sts	0x035E, r1
    3ebc:	10 92 5f 03 	sts	0x035F, r1
    3ec0:	10 92 60 03 	sts	0x0360, r1
    3ec4:	10 92 61 03 	sts	0x0361, r1
	ShaftCountLeft = 0; 
    3ec8:	10 92 5a 03 	sts	0x035A, r1
    3ecc:	10 92 5b 03 	sts	0x035B, r1
    3ed0:	10 92 5c 03 	sts	0x035C, r1
    3ed4:	10 92 5d 03 	sts	0x035D, r1

	not_reached_goal = 1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	90 93 80 03 	sts	0x0380, r25
    3ee0:	80 93 7f 03 	sts	0x037F, r24
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <angle_rotate+0xa8>

	while (not_reached_goal) {
		checkPosition();
    3ee6:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <checkPosition>
	ShaftCountRight = 0; 
	ShaftCountLeft = 0; 

	not_reached_goal = 1;

	while (not_reached_goal) {
    3eea:	80 91 7f 03 	lds	r24, 0x037F
    3eee:	90 91 80 03 	lds	r25, 0x0380
    3ef2:	00 97       	sbiw	r24, 0x00	; 0
    3ef4:	c1 f7       	brne	.-16     	; 0x3ee6 <angle_rotate+0xa4>
		checkPosition();
	}
}
    3ef6:	26 96       	adiw	r28, 0x06	; 6
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <linear_distance_mm>:

//Function used for moving robot forward by specified distance
void linear_distance_mm(unsigned int DistanceInMM)
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	00 d0       	rcall	.+0      	; 0x3f0e <linear_distance_mm+0x6>
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <linear_distance_mm+0x8>
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	9e 83       	std	Y+6, r25	; 0x06
    3f16:	8d 83       	std	Y+5, r24	; 0x05
	position_encoder_init();
    3f18:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <position_encoder_init>
	float ReqdShaftCount = 0;
    3f1c:	80 e0       	ldi	r24, 0x00	; 0
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	a0 e0       	ldi	r26, 0x00	; 0
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	89 83       	std	Y+1, r24	; 0x01
    3f26:	9a 83       	std	Y+2, r25	; 0x02
    3f28:	ab 83       	std	Y+3, r26	; 0x03
    3f2a:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = 0;
    3f2c:	10 92 7e 03 	sts	0x037E, r1
    3f30:	10 92 7d 03 	sts	0x037D, r1

	//Calculate the number of times the position encoder interrupt will need to fire
	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    3f34:	8d 81       	ldd	r24, Y+5	; 0x05
    3f36:	9e 81       	ldd	r25, Y+6	; 0x06
    3f38:	cc 01       	movw	r24, r24
    3f3a:	a0 e0       	ldi	r26, 0x00	; 0
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	bc 01       	movw	r22, r24
    3f40:	cd 01       	movw	r24, r26
    3f42:	0e 94 65 41 	call	0x82ca	; 0x82ca <__floatunsisf>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	bc 01       	movw	r22, r24
    3f4c:	cd 01       	movw	r24, r26
    3f4e:	25 ee       	ldi	r18, 0xE5	; 229
    3f50:	30 ed       	ldi	r19, 0xD0	; 208
    3f52:	4a ea       	ldi	r20, 0xAA	; 170
    3f54:	50 e4       	ldi	r21, 0x40	; 64
    3f56:	0e 94 77 3f 	call	0x7eee	; 0x7eee <__divsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	89 83       	std	Y+1, r24	; 0x01
    3f60:	9a 83       	std	Y+2, r25	; 0x02
    3f62:	ab 83       	std	Y+3, r26	; 0x03
    3f64:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    3f66:	69 81       	ldd	r22, Y+1	; 0x01
    3f68:	7a 81       	ldd	r23, Y+2	; 0x02
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    3f72:	dc 01       	movw	r26, r24
    3f74:	cb 01       	movw	r24, r22
    3f76:	90 93 7e 03 	sts	0x037E, r25
    3f7a:	80 93 7d 03 	sts	0x037D, r24

	ShaftCountRight = 0;
    3f7e:	10 92 5e 03 	sts	0x035E, r1
    3f82:	10 92 5f 03 	sts	0x035F, r1
    3f86:	10 92 60 03 	sts	0x0360, r1
    3f8a:	10 92 61 03 	sts	0x0361, r1
	not_reached_goal = 1;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	90 93 80 03 	sts	0x0380, r25
    3f96:	80 93 7f 03 	sts	0x037F, r24
}
    3f9a:	26 96       	adiw	r28, 0x06	; 6
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	f8 94       	cli
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	0f be       	out	0x3f, r0	; 63
    3fa4:	cd bf       	out	0x3d, r28	; 61
    3fa6:	cf 91       	pop	r28
    3fa8:	df 91       	pop	r29
    3faa:	08 95       	ret

00003fac <forward_mm>:

//Move forward by a specified distance
void forward_mm(unsigned int DistanceInMM)
{
    3fac:	df 93       	push	r29
    3fae:	cf 93       	push	r28
    3fb0:	0f 92       	push	r0
    3fb2:	0f 92       	push	r0
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	9a 83       	std	Y+2, r25	; 0x02
    3fba:	89 83       	std	Y+1, r24	; 0x01
 forward();
    3fbc:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
 linear_distance_mm(DistanceInMM);
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <linear_distance_mm>
}
    3fc8:	0f 90       	pop	r0
    3fca:	0f 90       	pop	r0
    3fcc:	cf 91       	pop	r28
    3fce:	df 91       	pop	r29
    3fd0:	08 95       	ret

00003fd2 <back_mm>:

//Move back by a specified distance
void back_mm(unsigned int DistanceInMM)
{
    3fd2:	df 93       	push	r29
    3fd4:	cf 93       	push	r28
    3fd6:	0f 92       	push	r0
    3fd8:	0f 92       	push	r0
    3fda:	cd b7       	in	r28, 0x3d	; 61
    3fdc:	de b7       	in	r29, 0x3e	; 62
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
 back();
    3fe2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <back>
 linear_distance_mm(DistanceInMM);
    3fe6:	89 81       	ldd	r24, Y+1	; 0x01
    3fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fea:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <linear_distance_mm>
}
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	cf 91       	pop	r28
    3ff4:	df 91       	pop	r29
    3ff6:	08 95       	ret

00003ff8 <left_degrees>:

//Turn left by specified degrees
void left_degrees(unsigned int Degrees) 
{
    3ff8:	df 93       	push	r29
    3ffa:	cf 93       	push	r28
    3ffc:	0f 92       	push	r0
    3ffe:	0f 92       	push	r0
    4000:	cd b7       	in	r28, 0x3d	; 61
    4002:	de b7       	in	r29, 0x3e	; 62
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 left(); //Turn left
    4008:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <left>
 angle_rotate(Degrees);
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	9a 81       	ldd	r25, Y+2	; 0x02
    4010:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <right_degrees>:

//Turn right by specified degrees
void right_degrees(unsigned int Degrees)
{
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	0f 92       	push	r0
    4024:	0f 92       	push	r0
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	9a 83       	std	Y+2, r25	; 0x02
    402c:	89 83       	std	Y+1, r24	; 0x01
// 88 pulses for 360 degrees rotation 4.090 degrees per count
 right(); //Turn right
    402e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <right>
 angle_rotate(Degrees);
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	9a 81       	ldd	r25, Y+2	; 0x02
    4036:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    403a:	0f 90       	pop	r0
    403c:	0f 90       	pop	r0
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <soft_left_degrees>:

//Soft Left by specified degrees (forward)
void soft_left_degrees(unsigned int Degrees)
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	0f 92       	push	r0
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	9a 83       	std	Y+2, r25	; 0x02
    4052:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left(); //Turn soft left
    4054:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <soft_left>
 Degrees=Degrees*2;
    4058:	89 81       	ldd	r24, Y+1	; 0x01
    405a:	9a 81       	ldd	r25, Y+2	; 0x02
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	9a 83       	std	Y+2, r25	; 0x02
    4062:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    406c:	0f 90       	pop	r0
    406e:	0f 90       	pop	r0
    4070:	cf 91       	pop	r28
    4072:	df 91       	pop	r29
    4074:	08 95       	ret

00004076 <soft_right_degrees>:

//Soft Right by specified degrees (forward)
void soft_right_degrees(unsigned int Degrees)
{
    4076:	df 93       	push	r29
    4078:	cf 93       	push	r28
    407a:	0f 92       	push	r0
    407c:	0f 92       	push	r0
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right();  //Turn soft right
    4086:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <soft_right>
 Degrees=Degrees*2;
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	88 0f       	add	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	9a 83       	std	Y+2, r25	; 0x02
    4094:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    4096:	89 81       	ldd	r24, Y+1	; 0x01
    4098:	9a 81       	ldd	r25, Y+2	; 0x02
    409a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    409e:	0f 90       	pop	r0
    40a0:	0f 90       	pop	r0
    40a2:	cf 91       	pop	r28
    40a4:	df 91       	pop	r29
    40a6:	08 95       	ret

000040a8 <soft_left_2_degrees>:

//Soft Left_2 by specified degrees (reverse)
void soft_left_2_degrees(unsigned int Degrees)
{
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	0f 92       	push	r0
    40ae:	0f 92       	push	r0
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	9a 83       	std	Y+2, r25	; 0x02
    40b6:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_left_2(); //Turn reverse soft left
    40b8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <soft_left_2>
 Degrees=Degrees*2;
    40bc:	89 81       	ldd	r24, Y+1	; 0x01
    40be:	9a 81       	ldd	r25, Y+2	; 0x02
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	9a 83       	std	Y+2, r25	; 0x02
    40c6:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	9a 81       	ldd	r25, Y+2	; 0x02
    40cc:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	cf 91       	pop	r28
    40d6:	df 91       	pop	r29
    40d8:	08 95       	ret

000040da <soft_right_2_degrees>:

//Soft Right_2 by specified degrees (reverse)
void soft_right_2_degrees(unsigned int Degrees)
{
    40da:	df 93       	push	r29
    40dc:	cf 93       	push	r28
    40de:	0f 92       	push	r0
    40e0:	0f 92       	push	r0
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	9a 83       	std	Y+2, r25	; 0x02
    40e8:	89 83       	std	Y+1, r24	; 0x01
 // 176 pulses for 360 degrees rotation 2.045 degrees per count
 soft_right_2();  //Turn reverse soft right
    40ea:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <soft_right_2>
 Degrees=Degrees*2;
    40ee:	89 81       	ldd	r24, Y+1	; 0x01
    40f0:	9a 81       	ldd	r25, Y+2	; 0x02
    40f2:	88 0f       	add	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	9a 83       	std	Y+2, r25	; 0x02
    40f8:	89 83       	std	Y+1, r24	; 0x01
 angle_rotate(Degrees);
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	9a 81       	ldd	r25, Y+2	; 0x02
    40fe:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <angle_rotate>
}
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	cf 91       	pop	r28
    4108:	df 91       	pop	r29
    410a:	08 95       	ret

0000410c <store_motion>:

//Used to restore the motion of the bot after the path has cleared. e.g. If bot was turning left and it stopped due to ACC, then it would use the value in this variable to make the bot start going left again after path gets cleared
unsigned char stored_direction;

//Store the current motion in "stored_direction"
void store_motion () {
    410c:	df 93       	push	r29
    410e:	cf 93       	push	r28
    4110:	cd b7       	in	r28, 0x3d	; 61
    4112:	de b7       	in	r29, 0x3e	; 62
	stored_direction = PORTA & 0x0F;
    4114:	e2 e2       	ldi	r30, 0x22	; 34
    4116:	f0 e0       	ldi	r31, 0x00	; 0
    4118:	80 81       	ld	r24, Z
    411a:	8f 70       	andi	r24, 0x0F	; 15
    411c:	80 93 31 08 	sts	0x0831, r24
}
    4120:	cf 91       	pop	r28
    4122:	df 91       	pop	r29
    4124:	08 95       	ret

00004126 <restore_motion>:

//Restore the motion of the bot using value in "stored_direction"
void restore_motion () {
    4126:	df 93       	push	r29
    4128:	cf 93       	push	r28
    412a:	cd b7       	in	r28, 0x3d	; 61
    412c:	de b7       	in	r29, 0x3e	; 62
	PORTA = PORTA | stored_direction;
    412e:	a2 e2       	ldi	r26, 0x22	; 34
    4130:	b0 e0       	ldi	r27, 0x00	; 0
    4132:	e2 e2       	ldi	r30, 0x22	; 34
    4134:	f0 e0       	ldi	r31, 0x00	; 0
    4136:	90 81       	ld	r25, Z
    4138:	80 91 31 08 	lds	r24, 0x0831
    413c:	89 2b       	or	r24, r25
    413e:	8c 93       	st	X, r24
}
    4140:	cf 91       	pop	r28
    4142:	df 91       	pop	r29
    4144:	08 95       	ret

00004146 <acc_continue>:

//Called on every iteration of the main loop is acc_flag is TRUE
//Checks if there is an obstacle in front of the bot using the front Sharp and IR sensor and stops the bot if there is
void acc_continue(){
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	00 d0       	rcall	.+0      	; 0x414c <acc_continue+0x6>
    414c:	0f 92       	push	r0
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
	int Front_Sharp_Sensor = ADC_Conversion(11);
    4152:	8b e0       	ldi	r24, 0x0B	; 11
    4154:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    4158:	88 2f       	mov	r24, r24
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	9c 83       	std	Y+4, r25	; 0x04
    415e:	8b 83       	std	Y+3, r24	; 0x03
	int Front_IR_Sensor = ADC_Conversion(6);
    4160:	86 e0       	ldi	r24, 0x06	; 6
    4162:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    4166:	88 2f       	mov	r24, r24
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	9a 83       	std	Y+2, r25	; 0x02
    416c:	89 83       	std	Y+1, r24	; 0x01

	if(Front_Sharp_Sensor>0x82 || Front_IR_Sensor<0xF0)
    416e:	8b 81       	ldd	r24, Y+3	; 0x03
    4170:	9c 81       	ldd	r25, Y+4	; 0x04
    4172:	83 38       	cpi	r24, 0x83	; 131
    4174:	91 05       	cpc	r25, r1
    4176:	2c f4       	brge	.+10     	; 0x4182 <acc_continue+0x3c>
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	9a 81       	ldd	r25, Y+2	; 0x02
    417c:	80 3f       	cpi	r24, 0xF0	; 240
    417e:	91 05       	cpc	r25, r1
    4180:	74 f4       	brge	.+28     	; 0x419e <acc_continue+0x58>
	{
		if (already_stopped) return;
    4182:	80 91 62 03 	lds	r24, 0x0362
    4186:	88 23       	and	r24, r24
    4188:	81 f4       	brne	.+32     	; 0x41aa <acc_continue+0x64>
		already_stopped = 1;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	80 93 62 03 	sts	0x0362, r24
		store_motion();
    4190:	0e 94 86 20 	call	0x410c	; 0x410c <store_motion>
		stop();
    4194:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		buzzer_on();
    4198:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
    419c:	06 c0       	rjmp	.+12     	; 0x41aa <acc_continue+0x64>
		
	}
	else{
		restore_motion();		
    419e:	0e 94 93 20 	call	0x4126	; 0x4126 <restore_motion>
		buzzer_off();
    41a2:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
		already_stopped = 0;
    41a6:	10 92 62 03 	sts	0x0362, r1
	}
}
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	0f 90       	pop	r0
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <acc_modified>:

//Called on every iteration of the main loop is acc_modified_flag is TRUE
//Checks if there is an obstacle in front of the bot using the front Sharp and IR sensor and stops the bot if there is
 void acc_modified(){
    41b8:	df 93       	push	r29
    41ba:	cf 93       	push	r28
    41bc:	00 d0       	rcall	.+0      	; 0x41be <acc_modified+0x6>
    41be:	0f 92       	push	r0
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
	int Front_Sharp_Sensor = ADC_Conversion(11);
    41c4:	8b e0       	ldi	r24, 0x0B	; 11
    41c6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    41ca:	88 2f       	mov	r24, r24
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	9c 83       	std	Y+4, r25	; 0x04
    41d0:	8b 83       	std	Y+3, r24	; 0x03
	int Front_IR_Sensor = ADC_Conversion(6);
    41d2:	86 e0       	ldi	r24, 0x06	; 6
    41d4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    41d8:	88 2f       	mov	r24, r24
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9a 83       	std	Y+2, r25	; 0x02
    41de:	89 83       	std	Y+1, r24	; 0x01

	if(Front_Sharp_Sensor>0x82 || Front_IR_Sensor<0xF0)
    41e0:	8b 81       	ldd	r24, Y+3	; 0x03
    41e2:	9c 81       	ldd	r25, Y+4	; 0x04
    41e4:	83 38       	cpi	r24, 0x83	; 131
    41e6:	91 05       	cpc	r25, r1
    41e8:	2c f4       	brge	.+10     	; 0x41f4 <acc_modified+0x3c>
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	9a 81       	ldd	r25, Y+2	; 0x02
    41ee:	80 3f       	cpi	r24, 0xF0	; 240
    41f0:	91 05       	cpc	r25, r1
    41f2:	44 f4       	brge	.+16     	; 0x4204 <acc_modified+0x4c>
	{
		//if (already_modified_stopped) return;
		already_modified_stopped = 1;
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	80 93 63 03 	sts	0x0363, r24
		
		stop();
    41fa:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		acc_modified_flag = 0;
    41fe:	10 92 82 03 	sts	0x0382, r1
    4202:	04 c0       	rjmp	.+8      	; 0x420c <acc_modified+0x54>
		//buzzer_on();
		
	}
	else{
		
		buzzer_off();
    4204:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
		already_modified_stopped = 0;
    4208:	10 92 63 03 	sts	0x0363, r1
	}


 }
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <LED_bargraph_config>:
char _rollLCD[100];
unsigned int leftInt=0,rightInt=0;

//Function to configure LDD bargraph display
void LED_bargraph_config (void)
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	cd b7       	in	r28, 0x3d	; 61
    4220:	de b7       	in	r29, 0x3e	; 62
 DDRJ = 0xFF;  //PORT J is configured as output
    4222:	e4 e0       	ldi	r30, 0x04	; 4
    4224:	f1 e0       	ldi	r31, 0x01	; 1
    4226:	8f ef       	ldi	r24, 0xFF	; 255
    4228:	80 83       	st	Z, r24
 PORTJ = 0x00; //Output is set to 0
    422a:	e5 e0       	ldi	r30, 0x05	; 5
    422c:	f1 e0       	ldi	r31, 0x01	; 1
    422e:	10 82       	st	Z, r1
}
    4230:	cf 91       	pop	r28
    4232:	df 91       	pop	r29
    4234:	08 95       	ret

00004236 <port_init>:
    /*!
	  the function to initialize ports for use of basic functionalities on the Bot
    */
//Function to Initialize PORTS
void port_init()
{
    4236:	df 93       	push	r29
    4238:	cf 93       	push	r28
    423a:	cd b7       	in	r28, 0x3d	; 61
    423c:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
    423e:	0e 94 4d 0a 	call	0x149a	; 0x149a <lcd_port_config>
	adc_pin_config();
    4242:	0e 94 4c 18 	call	0x3098	; 0x3098 <adc_pin_config>
	motion_pin_config();
    4246:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <motion_pin_config>
	left_encoder_pin_config();
    424a:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <left_encoder_pin_config>
	right_encoder_pin_config();
    424e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <right_encoder_pin_config>
	buzzer_pin_config();
    4252:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <buzzer_pin_config>
	//LED_bargraph_config();
}
    4256:	cf 91       	pop	r28
    4258:	df 91       	pop	r29
    425a:	08 95       	ret

0000425c <init_devices>:
//! initialize all devices
    /*!
	 initialize all devices. call all other initialization function
    */
void init_devices (void)
{
    425c:	df 93       	push	r29
    425e:	cf 93       	push	r28
    4260:	cd b7       	in	r28, 0x3d	; 61
    4262:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
    4264:	f8 94       	cli
	port_init();
    4266:	0e 94 1b 21 	call	0x4236	; 0x4236 <port_init>
	adc_init();
    426a:	0e 94 5f 18 	call	0x30be	; 0x30be <adc_init>
	uart3_init();
    426e:	0e 94 94 13 	call	0x2728	; 0x2728 <uart3_init>
	timer5_init();
    4272:	0e 94 b8 0b 	call	0x1770	; 0x1770 <timer5_init>
	timer4_init();
    4276:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <timer4_init>
	TCCR4B = 0x00;
    427a:	e1 ea       	ldi	r30, 0xA1	; 161
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	10 82       	st	Z, r1
	TIMSK4 = 0x01; //timer4 overflow interrupt enable
    4280:	e2 e7       	ldi	r30, 0x72	; 114
    4282:	f0 e0       	ldi	r31, 0x00	; 0
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	80 83       	st	Z, r24
	TIMSK3 = 0x01;
    4288:	e1 e7       	ldi	r30, 0x71	; 113
    428a:	f0 e0       	ldi	r31, 0x00	; 0
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	80 83       	st	Z, r24
	sei();   //Enables the global interrupts
    4290:	78 94       	sei
}
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	08 95       	ret

00004298 <get_char_from_input>:
//Received commands buffer
unsigned char command_buf[1024];
int command_buf_start = 0, command_buf_end = 0;

//Return the next byte from the command buffer
int get_char_from_input(unsigned char *c) {
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	00 d0       	rcall	.+0      	; 0x429e <get_char_from_input+0x6>
    429e:	0f 92       	push	r0
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	9a 83       	std	Y+2, r25	; 0x02
    42a6:	89 83       	std	Y+1, r24	; 0x01
	if (command_buf_start == command_buf_end) return -1;
    42a8:	20 91 87 03 	lds	r18, 0x0387
    42ac:	30 91 88 03 	lds	r19, 0x0388
    42b0:	80 91 89 03 	lds	r24, 0x0389
    42b4:	90 91 8a 03 	lds	r25, 0x038A
    42b8:	28 17       	cp	r18, r24
    42ba:	39 07       	cpc	r19, r25
    42bc:	29 f4       	brne	.+10     	; 0x42c8 <get_char_from_input+0x30>
    42be:	8f ef       	ldi	r24, 0xFF	; 255
    42c0:	9f ef       	ldi	r25, 0xFF	; 255
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03
    42c6:	22 c0       	rjmp	.+68     	; 0x430c <get_char_from_input+0x74>
	*c = command_buf[command_buf_start];
    42c8:	80 91 87 03 	lds	r24, 0x0387
    42cc:	90 91 88 03 	lds	r25, 0x0388
    42d0:	fc 01       	movw	r30, r24
    42d2:	ee 5c       	subi	r30, 0xCE	; 206
    42d4:	f7 4f       	sbci	r31, 0xF7	; 247
    42d6:	80 81       	ld	r24, Z
    42d8:	e9 81       	ldd	r30, Y+1	; 0x01
    42da:	fa 81       	ldd	r31, Y+2	; 0x02
    42dc:	80 83       	st	Z, r24
	command_buf_start++;
    42de:	80 91 87 03 	lds	r24, 0x0387
    42e2:	90 91 88 03 	lds	r25, 0x0388
    42e6:	01 96       	adiw	r24, 0x01	; 1
    42e8:	90 93 88 03 	sts	0x0388, r25
    42ec:	80 93 87 03 	sts	0x0387, r24
	if (command_buf_start == 1024) command_buf_start = 0;
    42f0:	80 91 87 03 	lds	r24, 0x0387
    42f4:	90 91 88 03 	lds	r25, 0x0388
    42f8:	24 e0       	ldi	r18, 0x04	; 4
    42fa:	80 30       	cpi	r24, 0x00	; 0
    42fc:	92 07       	cpc	r25, r18
    42fe:	21 f4       	brne	.+8      	; 0x4308 <get_char_from_input+0x70>
    4300:	10 92 88 03 	sts	0x0388, r1
    4304:	10 92 87 03 	sts	0x0387, r1
	return 0;
    4308:	1c 82       	std	Y+4, r1	; 0x04
    430a:	1b 82       	std	Y+3, r1	; 0x03
    430c:	8b 81       	ldd	r24, Y+3	; 0x03
    430e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4310:	0f 90       	pop	r0
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	08 95       	ret

0000431e <recieve_args>:

//Return back N arguments to a command from the command buffer
//For a multibyte command the protocol is : <COMMAND> <NUM_BYTES_TO_FOLLOW> <BYTE_1> <BYTE_2> ..
// So, this function takes the next byte <N>, and then takes the next <N> bytes from the command buffer and returns it back as a string
unsigned char* recieve_args(int* size){
    431e:	df 93       	push	r29
    4320:	cf 93       	push	r28
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	29 97       	sbiw	r28, 0x09	; 9
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	99 87       	std	Y+9, r25	; 0x09
    4334:	88 87       	std	Y+8, r24	; 0x08
	unsigned char ch;
    int error = get_char_from_input(&ch);
    4336:	ce 01       	movw	r24, r28
    4338:	07 96       	adiw	r24, 0x07	; 7
    433a:	0e 94 4c 21 	call	0x4298	; 0x4298 <get_char_from_input>
    433e:	9e 83       	std	Y+6, r25	; 0x06
    4340:	8d 83       	std	Y+5, r24	; 0x05
    if(error == -1)
    4342:	8d 81       	ldd	r24, Y+5	; 0x05
    4344:	9e 81       	ldd	r25, Y+6	; 0x06
    4346:	2f ef       	ldi	r18, 0xFF	; 255
    4348:	8f 3f       	cpi	r24, 0xFF	; 255
    434a:	92 07       	cpc	r25, r18
    434c:	31 f4       	brne	.+12     	; 0x435a <recieve_args+0x3c>
    {
   		lcd_clear();
    434e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
		lcd_string("error");
    4352:	88 e3       	ldi	r24, 0x38	; 56
    4354:	92 e0       	ldi	r25, 0x02	; 2
    4356:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
    }
    unsigned int i = 0;
    435a:	1c 82       	std	Y+4, r1	; 0x04
    435c:	1b 82       	std	Y+3, r1	; 0x03
	*size = (unsigned int)ch;
    435e:	8f 81       	ldd	r24, Y+7	; 0x07
    4360:	88 2f       	mov	r24, r24
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	e8 85       	ldd	r30, Y+8	; 0x08
    4366:	f9 85       	ldd	r31, Y+9	; 0x09
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	80 83       	st	Z, r24
	unsigned char* c = (unsigned char*)calloc(1,*size);
    436c:	e8 85       	ldd	r30, Y+8	; 0x08
    436e:	f9 85       	ldd	r31, Y+9	; 0x09
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	9c 01       	movw	r18, r24
    4376:	81 e0       	ldi	r24, 0x01	; 1
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	b9 01       	movw	r22, r18
    437c:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <calloc>
    4380:	9a 83       	std	Y+2, r25	; 0x02
    4382:	89 83       	std	Y+1, r24	; 0x01
    4384:	1b c0       	rjmp	.+54     	; 0x43bc <recieve_args+0x9e>
    for(;i< *size;i++)
    {
        error = get_char_from_input(c+i);
    4386:	29 81       	ldd	r18, Y+1	; 0x01
    4388:	3a 81       	ldd	r19, Y+2	; 0x02
    438a:	8b 81       	ldd	r24, Y+3	; 0x03
    438c:	9c 81       	ldd	r25, Y+4	; 0x04
    438e:	82 0f       	add	r24, r18
    4390:	93 1f       	adc	r25, r19
    4392:	0e 94 4c 21 	call	0x4298	; 0x4298 <get_char_from_input>
    4396:	9e 83       	std	Y+6, r25	; 0x06
    4398:	8d 83       	std	Y+5, r24	; 0x05
        if(error == -1)
    439a:	8d 81       	ldd	r24, Y+5	; 0x05
    439c:	9e 81       	ldd	r25, Y+6	; 0x06
    439e:	2f ef       	ldi	r18, 0xFF	; 255
    43a0:	8f 3f       	cpi	r24, 0xFF	; 255
    43a2:	92 07       	cpc	r25, r18
    43a4:	31 f4       	brne	.+12     	; 0x43b2 <recieve_args+0x94>
        {   
   			lcd_clear();
    43a6:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
			lcd_string("error");
    43aa:	88 e3       	ldi	r24, 0x38	; 56
    43ac:	92 e0       	ldi	r25, 0x02	; 2
    43ae:	0e 94 0a 09 	call	0x1214	; 0x1214 <lcd_string>
		lcd_string("error");
    }
    unsigned int i = 0;
	*size = (unsigned int)ch;
	unsigned char* c = (unsigned char*)calloc(1,*size);
    for(;i< *size;i++)
    43b2:	8b 81       	ldd	r24, Y+3	; 0x03
    43b4:	9c 81       	ldd	r25, Y+4	; 0x04
    43b6:	01 96       	adiw	r24, 0x01	; 1
    43b8:	9c 83       	std	Y+4, r25	; 0x04
    43ba:	8b 83       	std	Y+3, r24	; 0x03
    43bc:	e8 85       	ldd	r30, Y+8	; 0x08
    43be:	f9 85       	ldd	r31, Y+9	; 0x09
    43c0:	80 81       	ld	r24, Z
    43c2:	91 81       	ldd	r25, Z+1	; 0x01
    43c4:	9c 01       	movw	r18, r24
    43c6:	8b 81       	ldd	r24, Y+3	; 0x03
    43c8:	9c 81       	ldd	r25, Y+4	; 0x04
    43ca:	82 17       	cp	r24, r18
    43cc:	93 07       	cpc	r25, r19
    43ce:	d8 f2       	brcs	.-74     	; 0x4386 <recieve_args+0x68>
        {   
   			lcd_clear();
			lcd_string("error");
        }
    }
    return c;
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    43d4:	29 96       	adiw	r28, 0x09	; 9
    43d6:	0f b6       	in	r0, 0x3f	; 63
    43d8:	f8 94       	cli
    43da:	de bf       	out	0x3e, r29	; 62
    43dc:	0f be       	out	0x3f, r0	; 63
    43de:	cd bf       	out	0x3d, r28	; 61
    43e0:	cf 91       	pop	r28
    43e2:	df 91       	pop	r29
    43e4:	08 95       	ret

000043e6 <setPort>:

//Set a port to some specific value
void setPort(int portnum, unsigned char value){
    43e6:	df 93       	push	r29
    43e8:	cf 93       	push	r28
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <setPort+0x6>
    43ec:	cd b7       	in	r28, 0x3d	; 61
    43ee:	de b7       	in	r29, 0x3e	; 62
    43f0:	9a 83       	std	Y+2, r25	; 0x02
    43f2:	89 83       	std	Y+1, r24	; 0x01
    43f4:	6b 83       	std	Y+3, r22	; 0x03
	if(portnum==22) PORTA=value;
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	9a 81       	ldd	r25, Y+2	; 0x02
    43fa:	86 31       	cpi	r24, 0x16	; 22
    43fc:	91 05       	cpc	r25, r1
    43fe:	29 f4       	brne	.+10     	; 0x440a <setPort+0x24>
    4400:	e2 e2       	ldi	r30, 0x22	; 34
    4402:	f0 e0       	ldi	r31, 0x00	; 0
    4404:	8b 81       	ldd	r24, Y+3	; 0x03
    4406:	80 83       	st	Z, r24
    4408:	d1 c0       	rjmp	.+418    	; 0x45ac <setPort+0x1c6>
	else if(portnum==1) PORTB=value;
    440a:	89 81       	ldd	r24, Y+1	; 0x01
    440c:	9a 81       	ldd	r25, Y+2	; 0x02
    440e:	81 30       	cpi	r24, 0x01	; 1
    4410:	91 05       	cpc	r25, r1
    4412:	29 f4       	brne	.+10     	; 0x441e <setPort+0x38>
    4414:	e5 e2       	ldi	r30, 0x25	; 37
    4416:	f0 e0       	ldi	r31, 0x00	; 0
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	80 83       	st	Z, r24
    441c:	c7 c0       	rjmp	.+398    	; 0x45ac <setPort+0x1c6>
	else if(portnum==2) PORTC=value;
    441e:	89 81       	ldd	r24, Y+1	; 0x01
    4420:	9a 81       	ldd	r25, Y+2	; 0x02
    4422:	82 30       	cpi	r24, 0x02	; 2
    4424:	91 05       	cpc	r25, r1
    4426:	29 f4       	brne	.+10     	; 0x4432 <setPort+0x4c>
    4428:	e8 e2       	ldi	r30, 0x28	; 40
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	8b 81       	ldd	r24, Y+3	; 0x03
    442e:	80 83       	st	Z, r24
    4430:	bd c0       	rjmp	.+378    	; 0x45ac <setPort+0x1c6>
	else if(portnum==3) PORTD=value;
    4432:	89 81       	ldd	r24, Y+1	; 0x01
    4434:	9a 81       	ldd	r25, Y+2	; 0x02
    4436:	83 30       	cpi	r24, 0x03	; 3
    4438:	91 05       	cpc	r25, r1
    443a:	29 f4       	brne	.+10     	; 0x4446 <setPort+0x60>
    443c:	eb e2       	ldi	r30, 0x2B	; 43
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	8b 81       	ldd	r24, Y+3	; 0x03
    4442:	80 83       	st	Z, r24
    4444:	b3 c0       	rjmp	.+358    	; 0x45ac <setPort+0x1c6>
	else if(portnum==4) PORTE=value;
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	9a 81       	ldd	r25, Y+2	; 0x02
    444a:	84 30       	cpi	r24, 0x04	; 4
    444c:	91 05       	cpc	r25, r1
    444e:	29 f4       	brne	.+10     	; 0x445a <setPort+0x74>
    4450:	ee e2       	ldi	r30, 0x2E	; 46
    4452:	f0 e0       	ldi	r31, 0x00	; 0
    4454:	8b 81       	ldd	r24, Y+3	; 0x03
    4456:	80 83       	st	Z, r24
    4458:	a9 c0       	rjmp	.+338    	; 0x45ac <setPort+0x1c6>
	else if(portnum==5) PORTF=value;
    445a:	89 81       	ldd	r24, Y+1	; 0x01
    445c:	9a 81       	ldd	r25, Y+2	; 0x02
    445e:	85 30       	cpi	r24, 0x05	; 5
    4460:	91 05       	cpc	r25, r1
    4462:	29 f4       	brne	.+10     	; 0x446e <setPort+0x88>
    4464:	e1 e3       	ldi	r30, 0x31	; 49
    4466:	f0 e0       	ldi	r31, 0x00	; 0
    4468:	8b 81       	ldd	r24, Y+3	; 0x03
    446a:	80 83       	st	Z, r24
    446c:	9f c0       	rjmp	.+318    	; 0x45ac <setPort+0x1c6>
	else if(portnum==6) PORTG=value;
    446e:	89 81       	ldd	r24, Y+1	; 0x01
    4470:	9a 81       	ldd	r25, Y+2	; 0x02
    4472:	86 30       	cpi	r24, 0x06	; 6
    4474:	91 05       	cpc	r25, r1
    4476:	29 f4       	brne	.+10     	; 0x4482 <setPort+0x9c>
    4478:	e4 e3       	ldi	r30, 0x34	; 52
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	8b 81       	ldd	r24, Y+3	; 0x03
    447e:	80 83       	st	Z, r24
    4480:	95 c0       	rjmp	.+298    	; 0x45ac <setPort+0x1c6>
	else if(portnum==7) PORTH=value;
    4482:	89 81       	ldd	r24, Y+1	; 0x01
    4484:	9a 81       	ldd	r25, Y+2	; 0x02
    4486:	87 30       	cpi	r24, 0x07	; 7
    4488:	91 05       	cpc	r25, r1
    448a:	29 f4       	brne	.+10     	; 0x4496 <setPort+0xb0>
    448c:	e2 e0       	ldi	r30, 0x02	; 2
    448e:	f1 e0       	ldi	r31, 0x01	; 1
    4490:	8b 81       	ldd	r24, Y+3	; 0x03
    4492:	80 83       	st	Z, r24
    4494:	8b c0       	rjmp	.+278    	; 0x45ac <setPort+0x1c6>
	else if(portnum==8) PORTJ=value;
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	9a 81       	ldd	r25, Y+2	; 0x02
    449a:	88 30       	cpi	r24, 0x08	; 8
    449c:	91 05       	cpc	r25, r1
    449e:	29 f4       	brne	.+10     	; 0x44aa <setPort+0xc4>
    44a0:	e5 e0       	ldi	r30, 0x05	; 5
    44a2:	f1 e0       	ldi	r31, 0x01	; 1
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	80 83       	st	Z, r24
    44a8:	81 c0       	rjmp	.+258    	; 0x45ac <setPort+0x1c6>
	else if(portnum==9) PORTK=value;
    44aa:	89 81       	ldd	r24, Y+1	; 0x01
    44ac:	9a 81       	ldd	r25, Y+2	; 0x02
    44ae:	89 30       	cpi	r24, 0x09	; 9
    44b0:	91 05       	cpc	r25, r1
    44b2:	29 f4       	brne	.+10     	; 0x44be <setPort+0xd8>
    44b4:	e8 e0       	ldi	r30, 0x08	; 8
    44b6:	f1 e0       	ldi	r31, 0x01	; 1
    44b8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ba:	80 83       	st	Z, r24
    44bc:	77 c0       	rjmp	.+238    	; 0x45ac <setPort+0x1c6>
	else if(portnum==10) PORTL=value;
    44be:	89 81       	ldd	r24, Y+1	; 0x01
    44c0:	9a 81       	ldd	r25, Y+2	; 0x02
    44c2:	8a 30       	cpi	r24, 0x0A	; 10
    44c4:	91 05       	cpc	r25, r1
    44c6:	29 f4       	brne	.+10     	; 0x44d2 <setPort+0xec>
    44c8:	eb e0       	ldi	r30, 0x0B	; 11
    44ca:	f1 e0       	ldi	r31, 0x01	; 1
    44cc:	8b 81       	ldd	r24, Y+3	; 0x03
    44ce:	80 83       	st	Z, r24
    44d0:	6d c0       	rjmp	.+218    	; 0x45ac <setPort+0x1c6>
	else if(portnum==11) DDRA=value;
    44d2:	89 81       	ldd	r24, Y+1	; 0x01
    44d4:	9a 81       	ldd	r25, Y+2	; 0x02
    44d6:	8b 30       	cpi	r24, 0x0B	; 11
    44d8:	91 05       	cpc	r25, r1
    44da:	29 f4       	brne	.+10     	; 0x44e6 <setPort+0x100>
    44dc:	e1 e2       	ldi	r30, 0x21	; 33
    44de:	f0 e0       	ldi	r31, 0x00	; 0
    44e0:	8b 81       	ldd	r24, Y+3	; 0x03
    44e2:	80 83       	st	Z, r24
    44e4:	63 c0       	rjmp	.+198    	; 0x45ac <setPort+0x1c6>
	else if(portnum==12) DDRB=value;
    44e6:	89 81       	ldd	r24, Y+1	; 0x01
    44e8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ea:	8c 30       	cpi	r24, 0x0C	; 12
    44ec:	91 05       	cpc	r25, r1
    44ee:	29 f4       	brne	.+10     	; 0x44fa <setPort+0x114>
    44f0:	e4 e2       	ldi	r30, 0x24	; 36
    44f2:	f0 e0       	ldi	r31, 0x00	; 0
    44f4:	8b 81       	ldd	r24, Y+3	; 0x03
    44f6:	80 83       	st	Z, r24
    44f8:	59 c0       	rjmp	.+178    	; 0x45ac <setPort+0x1c6>
	else if(portnum==13) DDRC=value;
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	9a 81       	ldd	r25, Y+2	; 0x02
    44fe:	8d 30       	cpi	r24, 0x0D	; 13
    4500:	91 05       	cpc	r25, r1
    4502:	29 f4       	brne	.+10     	; 0x450e <setPort+0x128>
    4504:	e7 e2       	ldi	r30, 0x27	; 39
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	8b 81       	ldd	r24, Y+3	; 0x03
    450a:	80 83       	st	Z, r24
    450c:	4f c0       	rjmp	.+158    	; 0x45ac <setPort+0x1c6>
	else if(portnum==14) DDRD=value;
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	9a 81       	ldd	r25, Y+2	; 0x02
    4512:	8e 30       	cpi	r24, 0x0E	; 14
    4514:	91 05       	cpc	r25, r1
    4516:	29 f4       	brne	.+10     	; 0x4522 <setPort+0x13c>
    4518:	ea e2       	ldi	r30, 0x2A	; 42
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	8b 81       	ldd	r24, Y+3	; 0x03
    451e:	80 83       	st	Z, r24
    4520:	45 c0       	rjmp	.+138    	; 0x45ac <setPort+0x1c6>
	else if(portnum==15) DDRE=value;
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	8f 30       	cpi	r24, 0x0F	; 15
    4528:	91 05       	cpc	r25, r1
    452a:	29 f4       	brne	.+10     	; 0x4536 <setPort+0x150>
    452c:	ed e2       	ldi	r30, 0x2D	; 45
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	8b 81       	ldd	r24, Y+3	; 0x03
    4532:	80 83       	st	Z, r24
    4534:	3b c0       	rjmp	.+118    	; 0x45ac <setPort+0x1c6>
	else if(portnum==16) DDRF=value;
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	80 31       	cpi	r24, 0x10	; 16
    453c:	91 05       	cpc	r25, r1
    453e:	29 f4       	brne	.+10     	; 0x454a <setPort+0x164>
    4540:	e0 e3       	ldi	r30, 0x30	; 48
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	8b 81       	ldd	r24, Y+3	; 0x03
    4546:	80 83       	st	Z, r24
    4548:	31 c0       	rjmp	.+98     	; 0x45ac <setPort+0x1c6>
	else if(portnum==17) DDRG=value;
    454a:	89 81       	ldd	r24, Y+1	; 0x01
    454c:	9a 81       	ldd	r25, Y+2	; 0x02
    454e:	81 31       	cpi	r24, 0x11	; 17
    4550:	91 05       	cpc	r25, r1
    4552:	29 f4       	brne	.+10     	; 0x455e <setPort+0x178>
    4554:	e3 e3       	ldi	r30, 0x33	; 51
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	8b 81       	ldd	r24, Y+3	; 0x03
    455a:	80 83       	st	Z, r24
    455c:	27 c0       	rjmp	.+78     	; 0x45ac <setPort+0x1c6>
	else if(portnum==18) DDRG=value;
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	9a 81       	ldd	r25, Y+2	; 0x02
    4562:	82 31       	cpi	r24, 0x12	; 18
    4564:	91 05       	cpc	r25, r1
    4566:	29 f4       	brne	.+10     	; 0x4572 <setPort+0x18c>
    4568:	e3 e3       	ldi	r30, 0x33	; 51
    456a:	f0 e0       	ldi	r31, 0x00	; 0
    456c:	8b 81       	ldd	r24, Y+3	; 0x03
    456e:	80 83       	st	Z, r24
    4570:	1d c0       	rjmp	.+58     	; 0x45ac <setPort+0x1c6>
	else if(portnum==19) DDRJ=value;
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	9a 81       	ldd	r25, Y+2	; 0x02
    4576:	83 31       	cpi	r24, 0x13	; 19
    4578:	91 05       	cpc	r25, r1
    457a:	29 f4       	brne	.+10     	; 0x4586 <setPort+0x1a0>
    457c:	e4 e0       	ldi	r30, 0x04	; 4
    457e:	f1 e0       	ldi	r31, 0x01	; 1
    4580:	8b 81       	ldd	r24, Y+3	; 0x03
    4582:	80 83       	st	Z, r24
    4584:	13 c0       	rjmp	.+38     	; 0x45ac <setPort+0x1c6>
	else if(portnum==20) DDRK=value;
    4586:	89 81       	ldd	r24, Y+1	; 0x01
    4588:	9a 81       	ldd	r25, Y+2	; 0x02
    458a:	84 31       	cpi	r24, 0x14	; 20
    458c:	91 05       	cpc	r25, r1
    458e:	29 f4       	brne	.+10     	; 0x459a <setPort+0x1b4>
    4590:	e7 e0       	ldi	r30, 0x07	; 7
    4592:	f1 e0       	ldi	r31, 0x01	; 1
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	80 83       	st	Z, r24
    4598:	09 c0       	rjmp	.+18     	; 0x45ac <setPort+0x1c6>
	else if(portnum==21) DDRL=value;
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	9a 81       	ldd	r25, Y+2	; 0x02
    459e:	85 31       	cpi	r24, 0x15	; 21
    45a0:	91 05       	cpc	r25, r1
    45a2:	21 f4       	brne	.+8      	; 0x45ac <setPort+0x1c6>
    45a4:	ea e0       	ldi	r30, 0x0A	; 10
    45a6:	f1 e0       	ldi	r31, 0x01	; 1
    45a8:	8b 81       	ldd	r24, Y+3	; 0x03
    45aa:	80 83       	st	Z, r24
}
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	cf 91       	pop	r28
    45b4:	df 91       	pop	r29
    45b6:	08 95       	ret

000045b8 <getPort>:

//Get the value from some port
void getPort(int portnum){
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	00 d0       	rcall	.+0      	; 0x45be <getPort+0x6>
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	9b 83       	std	Y+3, r25	; 0x03
    45c4:	8a 83       	std	Y+2, r24	; 0x02
 
	unsigned char value;

	if(portnum==22) value=PORTA;
    45c6:	8a 81       	ldd	r24, Y+2	; 0x02
    45c8:	9b 81       	ldd	r25, Y+3	; 0x03
    45ca:	86 31       	cpi	r24, 0x16	; 22
    45cc:	91 05       	cpc	r25, r1
    45ce:	29 f4       	brne	.+10     	; 0x45da <getPort+0x22>
    45d0:	e2 e2       	ldi	r30, 0x22	; 34
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	80 81       	ld	r24, Z
    45d6:	89 83       	std	Y+1, r24	; 0x01
    45d8:	d1 c0       	rjmp	.+418    	; 0x477c <getPort+0x1c4>
	else if(portnum==1) value=PORTB;
    45da:	8a 81       	ldd	r24, Y+2	; 0x02
    45dc:	9b 81       	ldd	r25, Y+3	; 0x03
    45de:	81 30       	cpi	r24, 0x01	; 1
    45e0:	91 05       	cpc	r25, r1
    45e2:	29 f4       	brne	.+10     	; 0x45ee <getPort+0x36>
    45e4:	e5 e2       	ldi	r30, 0x25	; 37
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	80 81       	ld	r24, Z
    45ea:	89 83       	std	Y+1, r24	; 0x01
    45ec:	c7 c0       	rjmp	.+398    	; 0x477c <getPort+0x1c4>
	else if(portnum==2) value=PORTC;
    45ee:	8a 81       	ldd	r24, Y+2	; 0x02
    45f0:	9b 81       	ldd	r25, Y+3	; 0x03
    45f2:	82 30       	cpi	r24, 0x02	; 2
    45f4:	91 05       	cpc	r25, r1
    45f6:	29 f4       	brne	.+10     	; 0x4602 <getPort+0x4a>
    45f8:	e8 e2       	ldi	r30, 0x28	; 40
    45fa:	f0 e0       	ldi	r31, 0x00	; 0
    45fc:	80 81       	ld	r24, Z
    45fe:	89 83       	std	Y+1, r24	; 0x01
    4600:	bd c0       	rjmp	.+378    	; 0x477c <getPort+0x1c4>
	else if(portnum==3) value=PORTD;
    4602:	8a 81       	ldd	r24, Y+2	; 0x02
    4604:	9b 81       	ldd	r25, Y+3	; 0x03
    4606:	83 30       	cpi	r24, 0x03	; 3
    4608:	91 05       	cpc	r25, r1
    460a:	29 f4       	brne	.+10     	; 0x4616 <getPort+0x5e>
    460c:	eb e2       	ldi	r30, 0x2B	; 43
    460e:	f0 e0       	ldi	r31, 0x00	; 0
    4610:	80 81       	ld	r24, Z
    4612:	89 83       	std	Y+1, r24	; 0x01
    4614:	b3 c0       	rjmp	.+358    	; 0x477c <getPort+0x1c4>
	else if(portnum==4) value=PORTE;
    4616:	8a 81       	ldd	r24, Y+2	; 0x02
    4618:	9b 81       	ldd	r25, Y+3	; 0x03
    461a:	84 30       	cpi	r24, 0x04	; 4
    461c:	91 05       	cpc	r25, r1
    461e:	29 f4       	brne	.+10     	; 0x462a <getPort+0x72>
    4620:	ee e2       	ldi	r30, 0x2E	; 46
    4622:	f0 e0       	ldi	r31, 0x00	; 0
    4624:	80 81       	ld	r24, Z
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	a9 c0       	rjmp	.+338    	; 0x477c <getPort+0x1c4>
	else if(portnum==5) value=PORTF;
    462a:	8a 81       	ldd	r24, Y+2	; 0x02
    462c:	9b 81       	ldd	r25, Y+3	; 0x03
    462e:	85 30       	cpi	r24, 0x05	; 5
    4630:	91 05       	cpc	r25, r1
    4632:	29 f4       	brne	.+10     	; 0x463e <getPort+0x86>
    4634:	e1 e3       	ldi	r30, 0x31	; 49
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	80 81       	ld	r24, Z
    463a:	89 83       	std	Y+1, r24	; 0x01
    463c:	9f c0       	rjmp	.+318    	; 0x477c <getPort+0x1c4>
	else if(portnum==6) value=PORTG;
    463e:	8a 81       	ldd	r24, Y+2	; 0x02
    4640:	9b 81       	ldd	r25, Y+3	; 0x03
    4642:	86 30       	cpi	r24, 0x06	; 6
    4644:	91 05       	cpc	r25, r1
    4646:	29 f4       	brne	.+10     	; 0x4652 <getPort+0x9a>
    4648:	e4 e3       	ldi	r30, 0x34	; 52
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	80 81       	ld	r24, Z
    464e:	89 83       	std	Y+1, r24	; 0x01
    4650:	95 c0       	rjmp	.+298    	; 0x477c <getPort+0x1c4>
	else if(portnum==7) value=PORTH;
    4652:	8a 81       	ldd	r24, Y+2	; 0x02
    4654:	9b 81       	ldd	r25, Y+3	; 0x03
    4656:	87 30       	cpi	r24, 0x07	; 7
    4658:	91 05       	cpc	r25, r1
    465a:	29 f4       	brne	.+10     	; 0x4666 <getPort+0xae>
    465c:	e2 e0       	ldi	r30, 0x02	; 2
    465e:	f1 e0       	ldi	r31, 0x01	; 1
    4660:	80 81       	ld	r24, Z
    4662:	89 83       	std	Y+1, r24	; 0x01
    4664:	8b c0       	rjmp	.+278    	; 0x477c <getPort+0x1c4>
	else if(portnum==8) value=PORTJ;
    4666:	8a 81       	ldd	r24, Y+2	; 0x02
    4668:	9b 81       	ldd	r25, Y+3	; 0x03
    466a:	88 30       	cpi	r24, 0x08	; 8
    466c:	91 05       	cpc	r25, r1
    466e:	29 f4       	brne	.+10     	; 0x467a <getPort+0xc2>
    4670:	e5 e0       	ldi	r30, 0x05	; 5
    4672:	f1 e0       	ldi	r31, 0x01	; 1
    4674:	80 81       	ld	r24, Z
    4676:	89 83       	std	Y+1, r24	; 0x01
    4678:	81 c0       	rjmp	.+258    	; 0x477c <getPort+0x1c4>
	else if(portnum==9) value=PORTK;
    467a:	8a 81       	ldd	r24, Y+2	; 0x02
    467c:	9b 81       	ldd	r25, Y+3	; 0x03
    467e:	89 30       	cpi	r24, 0x09	; 9
    4680:	91 05       	cpc	r25, r1
    4682:	29 f4       	brne	.+10     	; 0x468e <getPort+0xd6>
    4684:	e8 e0       	ldi	r30, 0x08	; 8
    4686:	f1 e0       	ldi	r31, 0x01	; 1
    4688:	80 81       	ld	r24, Z
    468a:	89 83       	std	Y+1, r24	; 0x01
    468c:	77 c0       	rjmp	.+238    	; 0x477c <getPort+0x1c4>
	else if(portnum==10) value=PORTL;
    468e:	8a 81       	ldd	r24, Y+2	; 0x02
    4690:	9b 81       	ldd	r25, Y+3	; 0x03
    4692:	8a 30       	cpi	r24, 0x0A	; 10
    4694:	91 05       	cpc	r25, r1
    4696:	29 f4       	brne	.+10     	; 0x46a2 <getPort+0xea>
    4698:	eb e0       	ldi	r30, 0x0B	; 11
    469a:	f1 e0       	ldi	r31, 0x01	; 1
    469c:	80 81       	ld	r24, Z
    469e:	89 83       	std	Y+1, r24	; 0x01
    46a0:	6d c0       	rjmp	.+218    	; 0x477c <getPort+0x1c4>
	else if(portnum==11) value=DDRA;
    46a2:	8a 81       	ldd	r24, Y+2	; 0x02
    46a4:	9b 81       	ldd	r25, Y+3	; 0x03
    46a6:	8b 30       	cpi	r24, 0x0B	; 11
    46a8:	91 05       	cpc	r25, r1
    46aa:	29 f4       	brne	.+10     	; 0x46b6 <getPort+0xfe>
    46ac:	e1 e2       	ldi	r30, 0x21	; 33
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	80 81       	ld	r24, Z
    46b2:	89 83       	std	Y+1, r24	; 0x01
    46b4:	63 c0       	rjmp	.+198    	; 0x477c <getPort+0x1c4>
	else if(portnum==12) value=DDRB;
    46b6:	8a 81       	ldd	r24, Y+2	; 0x02
    46b8:	9b 81       	ldd	r25, Y+3	; 0x03
    46ba:	8c 30       	cpi	r24, 0x0C	; 12
    46bc:	91 05       	cpc	r25, r1
    46be:	29 f4       	brne	.+10     	; 0x46ca <getPort+0x112>
    46c0:	e4 e2       	ldi	r30, 0x24	; 36
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	80 81       	ld	r24, Z
    46c6:	89 83       	std	Y+1, r24	; 0x01
    46c8:	59 c0       	rjmp	.+178    	; 0x477c <getPort+0x1c4>
	else if(portnum==13) value=DDRC;
    46ca:	8a 81       	ldd	r24, Y+2	; 0x02
    46cc:	9b 81       	ldd	r25, Y+3	; 0x03
    46ce:	8d 30       	cpi	r24, 0x0D	; 13
    46d0:	91 05       	cpc	r25, r1
    46d2:	29 f4       	brne	.+10     	; 0x46de <getPort+0x126>
    46d4:	e7 e2       	ldi	r30, 0x27	; 39
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	80 81       	ld	r24, Z
    46da:	89 83       	std	Y+1, r24	; 0x01
    46dc:	4f c0       	rjmp	.+158    	; 0x477c <getPort+0x1c4>
	else if(portnum==14) value=DDRD;
    46de:	8a 81       	ldd	r24, Y+2	; 0x02
    46e0:	9b 81       	ldd	r25, Y+3	; 0x03
    46e2:	8e 30       	cpi	r24, 0x0E	; 14
    46e4:	91 05       	cpc	r25, r1
    46e6:	29 f4       	brne	.+10     	; 0x46f2 <getPort+0x13a>
    46e8:	ea e2       	ldi	r30, 0x2A	; 42
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	80 81       	ld	r24, Z
    46ee:	89 83       	std	Y+1, r24	; 0x01
    46f0:	45 c0       	rjmp	.+138    	; 0x477c <getPort+0x1c4>
	else if(portnum==15) value=DDRE;
    46f2:	8a 81       	ldd	r24, Y+2	; 0x02
    46f4:	9b 81       	ldd	r25, Y+3	; 0x03
    46f6:	8f 30       	cpi	r24, 0x0F	; 15
    46f8:	91 05       	cpc	r25, r1
    46fa:	29 f4       	brne	.+10     	; 0x4706 <getPort+0x14e>
    46fc:	ed e2       	ldi	r30, 0x2D	; 45
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
    4700:	80 81       	ld	r24, Z
    4702:	89 83       	std	Y+1, r24	; 0x01
    4704:	3b c0       	rjmp	.+118    	; 0x477c <getPort+0x1c4>
	else if(portnum==16) value=DDRF;
    4706:	8a 81       	ldd	r24, Y+2	; 0x02
    4708:	9b 81       	ldd	r25, Y+3	; 0x03
    470a:	80 31       	cpi	r24, 0x10	; 16
    470c:	91 05       	cpc	r25, r1
    470e:	29 f4       	brne	.+10     	; 0x471a <getPort+0x162>
    4710:	e0 e3       	ldi	r30, 0x30	; 48
    4712:	f0 e0       	ldi	r31, 0x00	; 0
    4714:	80 81       	ld	r24, Z
    4716:	89 83       	std	Y+1, r24	; 0x01
    4718:	31 c0       	rjmp	.+98     	; 0x477c <getPort+0x1c4>
	else if(portnum==17) value=DDRG;
    471a:	8a 81       	ldd	r24, Y+2	; 0x02
    471c:	9b 81       	ldd	r25, Y+3	; 0x03
    471e:	81 31       	cpi	r24, 0x11	; 17
    4720:	91 05       	cpc	r25, r1
    4722:	29 f4       	brne	.+10     	; 0x472e <getPort+0x176>
    4724:	e3 e3       	ldi	r30, 0x33	; 51
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	89 83       	std	Y+1, r24	; 0x01
    472c:	27 c0       	rjmp	.+78     	; 0x477c <getPort+0x1c4>
	else if(portnum==18) value=DDRG;
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	9b 81       	ldd	r25, Y+3	; 0x03
    4732:	82 31       	cpi	r24, 0x12	; 18
    4734:	91 05       	cpc	r25, r1
    4736:	29 f4       	brne	.+10     	; 0x4742 <getPort+0x18a>
    4738:	e3 e3       	ldi	r30, 0x33	; 51
    473a:	f0 e0       	ldi	r31, 0x00	; 0
    473c:	80 81       	ld	r24, Z
    473e:	89 83       	std	Y+1, r24	; 0x01
    4740:	1d c0       	rjmp	.+58     	; 0x477c <getPort+0x1c4>
	else if(portnum==19) value=DDRJ;
    4742:	8a 81       	ldd	r24, Y+2	; 0x02
    4744:	9b 81       	ldd	r25, Y+3	; 0x03
    4746:	83 31       	cpi	r24, 0x13	; 19
    4748:	91 05       	cpc	r25, r1
    474a:	29 f4       	brne	.+10     	; 0x4756 <getPort+0x19e>
    474c:	e4 e0       	ldi	r30, 0x04	; 4
    474e:	f1 e0       	ldi	r31, 0x01	; 1
    4750:	80 81       	ld	r24, Z
    4752:	89 83       	std	Y+1, r24	; 0x01
    4754:	13 c0       	rjmp	.+38     	; 0x477c <getPort+0x1c4>
	else if(portnum==20) value=DDRK;
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	9b 81       	ldd	r25, Y+3	; 0x03
    475a:	84 31       	cpi	r24, 0x14	; 20
    475c:	91 05       	cpc	r25, r1
    475e:	29 f4       	brne	.+10     	; 0x476a <getPort+0x1b2>
    4760:	e7 e0       	ldi	r30, 0x07	; 7
    4762:	f1 e0       	ldi	r31, 0x01	; 1
    4764:	80 81       	ld	r24, Z
    4766:	89 83       	std	Y+1, r24	; 0x01
    4768:	09 c0       	rjmp	.+18     	; 0x477c <getPort+0x1c4>
	else if(portnum==21) value=DDRL;
    476a:	8a 81       	ldd	r24, Y+2	; 0x02
    476c:	9b 81       	ldd	r25, Y+3	; 0x03
    476e:	85 31       	cpi	r24, 0x15	; 21
    4770:	91 05       	cpc	r25, r1
    4772:	21 f4       	brne	.+8      	; 0x477c <getPort+0x1c4>
    4774:	ea e0       	ldi	r30, 0x0A	; 10
    4776:	f1 e0       	ldi	r31, 0x01	; 1
    4778:	80 81       	ld	r24, Z
    477a:	89 83       	std	Y+1, r24	; 0x01
	send_char(value);
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
	//_delay_ms(1000);
}
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <getSensorValue>:

//Get the value of some sensor
void getSensorValue(int sensornum){
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	00 d0       	rcall	.+0      	; 0x4794 <getSensorValue+0x6>
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
    4798:	9b 83       	std	Y+3, r25	; 0x03
    479a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char value = ADC_Conversion(sensornum);
    479c:	8a 81       	ldd	r24, Y+2	; 0x02
    479e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <ADC_Conversion>
    47a2:	89 83       	std	Y+1, r24	; 0x01
	 send_char(value);
    47a4:	89 81       	ldd	r24, Y+1	; 0x01
    47a6:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
}
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	cf 91       	pop	r28
    47b2:	df 91       	pop	r29
    47b4:	08 95       	ret

000047b6 <disconnect>:
int state = START_BYTE;

int expected_127 = 3;

//Reset the firebird state - clear the buffers
void disconnect () {
    47b6:	df 93       	push	r29
    47b8:	cf 93       	push	r28
    47ba:	0f 92       	push	r0
    47bc:	0f 92       	push	r0
    47be:	cd b7       	in	r28, 0x3d	; 61
    47c0:	de b7       	in	r29, 0x3e	; 62
	stop_on_timer4_overflow = 0;
    47c2:	10 92 8c 03 	sts	0x038C, r1
    47c6:	10 92 8b 03 	sts	0x038B, r1
	accept = 0;
    47ca:	10 92 8e 03 	sts	0x038E, r1
    47ce:	10 92 8d 03 	sts	0x038D, r1
	bytes_remaining = 1;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	90 93 3f 02 	sts	0x023F, r25
    47da:	80 93 3e 02 	sts	0x023E, r24
	state = START_BYTE;
    47de:	10 92 90 03 	sts	0x0390, r1
    47e2:	10 92 8f 03 	sts	0x038F, r1
	rcvd_data_start = 0;
    47e6:	10 92 84 03 	sts	0x0384, r1
    47ea:	10 92 83 03 	sts	0x0383, r1
	rcvd_data_end = 0;
    47ee:	10 92 86 03 	sts	0x0386, r1
    47f2:	10 92 85 03 	sts	0x0385, r1
	command_buf_start = 0;
    47f6:	10 92 88 03 	sts	0x0388, r1
    47fa:	10 92 87 03 	sts	0x0387, r1
	command_buf_end = 0;
    47fe:	10 92 8a 03 	sts	0x038A, r1
    4802:	10 92 89 03 	sts	0x0389, r1
	int i = 0;
    4806:	1a 82       	std	Y+2, r1	; 0x02
    4808:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; i<1024; i++) {
    480a:	1a 82       	std	Y+2, r1	; 0x02
    480c:	19 82       	std	Y+1, r1	; 0x01
    480e:	11 c0       	rjmp	.+34     	; 0x4832 <disconnect+0x7c>
		command_buf[i] = 0;
    4810:	89 81       	ldd	r24, Y+1	; 0x01
    4812:	9a 81       	ldd	r25, Y+2	; 0x02
    4814:	fc 01       	movw	r30, r24
    4816:	ee 5c       	subi	r30, 0xCE	; 206
    4818:	f7 4f       	sbci	r31, 0xF7	; 247
    481a:	10 82       	st	Z, r1
		rcvd_data[i] = 0;
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	9a 81       	ldd	r25, Y+2	; 0x02
    4820:	fc 01       	movw	r30, r24
    4822:	e5 54       	subi	r30, 0x45	; 69
    4824:	fc 4f       	sbci	r31, 0xFC	; 252
    4826:	10 82       	st	Z, r1
	rcvd_data_start = 0;
	rcvd_data_end = 0;
	command_buf_start = 0;
	command_buf_end = 0;
	int i = 0;
	for (i = 0; i<1024; i++) {
    4828:	89 81       	ldd	r24, Y+1	; 0x01
    482a:	9a 81       	ldd	r25, Y+2	; 0x02
    482c:	01 96       	adiw	r24, 0x01	; 1
    482e:	9a 83       	std	Y+2, r25	; 0x02
    4830:	89 83       	std	Y+1, r24	; 0x01
    4832:	89 81       	ldd	r24, Y+1	; 0x01
    4834:	9a 81       	ldd	r25, Y+2	; 0x02
    4836:	24 e0       	ldi	r18, 0x04	; 4
    4838:	80 30       	cpi	r24, 0x00	; 0
    483a:	92 07       	cpc	r25, r18
    483c:	4c f3       	brlt	.-46     	; 0x4810 <disconnect+0x5a>
		command_buf[i] = 0;
		rcvd_data[i] = 0;
	}
	expected_127 = 3;
    483e:	83 e0       	ldi	r24, 0x03	; 3
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	90 93 41 02 	sts	0x0241, r25
    4846:	80 93 40 02 	sts	0x0240, r24
	//char reboot_cmd[32] = "\r\nAT+DCON=2,E4:B0:21:CE:7D:78\r\n";

}
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	cf 91       	pop	r28
    4850:	df 91       	pop	r29
    4852:	08 95       	ret

00004854 <my_invoker>:

//The main invoker routine. It takes as argument the next command to execute and does what is necessary
//Self-explanatory code!
void my_invoker (unsigned char command) {
    4854:	df 93       	push	r29
    4856:	cf 93       	push	r28
    4858:	cd b7       	in	r28, 0x3d	; 61
    485a:	de b7       	in	r29, 0x3e	; 62
    485c:	c5 58       	subi	r28, 0x85	; 133
    485e:	d0 40       	sbci	r29, 0x00	; 0
    4860:	0f b6       	in	r0, 0x3f	; 63
    4862:	f8 94       	cli
    4864:	de bf       	out	0x3e, r29	; 62
    4866:	0f be       	out	0x3f, r0	; 63
    4868:	cd bf       	out	0x3d, r28	; 61
    486a:	fe 01       	movw	r30, r28
    486c:	ef 57       	subi	r30, 0x7F	; 127
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	80 83       	st	Z, r24
	if(command == BUZZER_ON){
    4872:	fe 01       	movw	r30, r28
    4874:	ef 57       	subi	r30, 0x7F	; 127
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	80 81       	ld	r24, Z
    487a:	81 34       	cpi	r24, 0x41	; 65
    487c:	19 f4       	brne	.+6      	; 0x4884 <my_invoker+0x30>
		buzzer_on();
    487e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
    4882:	f3 c5       	rjmp	.+3046   	; 0x546a <my_invoker+0xc16>
		return;
	}
	else if(command == BUZZER_OFF){
    4884:	fe 01       	movw	r30, r28
    4886:	ef 57       	subi	r30, 0x7F	; 127
    4888:	ff 4f       	sbci	r31, 0xFF	; 255
    488a:	80 81       	ld	r24, Z
    488c:	82 34       	cpi	r24, 0x42	; 66
    488e:	19 f4       	brne	.+6      	; 0x4896 <my_invoker+0x42>
		buzzer_off();
    4890:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    4894:	ea c5       	rjmp	.+3028   	; 0x546a <my_invoker+0xc16>
		return;
	}
	else if(command == MOVE_FORWARD) 
    4896:	fe 01       	movw	r30, r28
    4898:	ef 57       	subi	r30, 0x7F	; 127
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	80 81       	ld	r24, Z
    489e:	83 34       	cpi	r24, 0x43	; 67
    48a0:	19 f4       	brne	.+6      	; 0x48a8 <my_invoker+0x54>
    {
        forward();  //forward
    48a2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
    48a6:	e1 c5       	rjmp	.+3010   	; 0x546a <my_invoker+0xc16>
        return;
    }

    else if(command == MOVE_BACKWARD)
    48a8:	fe 01       	movw	r30, r28
    48aa:	ef 57       	subi	r30, 0x7F	; 127
    48ac:	ff 4f       	sbci	r31, 0xFF	; 255
    48ae:	80 81       	ld	r24, Z
    48b0:	84 34       	cpi	r24, 0x44	; 68
    48b2:	19 f4       	brne	.+6      	; 0x48ba <my_invoker+0x66>
    {
        back(); //back
    48b4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <back>
    48b8:	d8 c5       	rjmp	.+2992   	; 0x546a <my_invoker+0xc16>
        return;
    }

    else if(command == MOVE_LEFT) 
    48ba:	fe 01       	movw	r30, r28
    48bc:	ef 57       	subi	r30, 0x7F	; 127
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	80 81       	ld	r24, Z
    48c2:	86 34       	cpi	r24, 0x46	; 70
    48c4:	19 f4       	brne	.+6      	; 0x48cc <my_invoker+0x78>
    {
        left();  //left
    48c6:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <left>
    48ca:	cf c5       	rjmp	.+2974   	; 0x546a <my_invoker+0xc16>
        return;
    }

    else if(command == MOVE_RIGHT)
    48cc:	fe 01       	movw	r30, r28
    48ce:	ef 57       	subi	r30, 0x7F	; 127
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	80 81       	ld	r24, Z
    48d4:	85 34       	cpi	r24, 0x45	; 69
    48d6:	19 f4       	brne	.+6      	; 0x48de <my_invoker+0x8a>
    {
        right(); //right
    48d8:	0e 94 77 0e 	call	0x1cee	; 0x1cee <right>
    48dc:	c6 c5       	rjmp	.+2956   	; 0x546a <my_invoker+0xc16>
        return;
    }

    else if(command == STOP) 
    48de:	fe 01       	movw	r30, r28
    48e0:	ef 57       	subi	r30, 0x7F	; 127
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	80 81       	ld	r24, Z
    48e6:	87 34       	cpi	r24, 0x47	; 71
    48e8:	19 f4       	brne	.+6      	; 0x48f0 <my_invoker+0x9c>
    {
        stop(); //stop
    48ea:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
    48ee:	bd c5       	rjmp	.+2938   	; 0x546a <my_invoker+0xc16>
        return;
    }
	
	else if(command == SET_VELOCITY) 
    48f0:	fe 01       	movw	r30, r28
    48f2:	ef 57       	subi	r30, 0x7F	; 127
    48f4:	ff 4f       	sbci	r31, 0xFF	; 255
    48f6:	80 81       	ld	r24, Z
    48f8:	84 32       	cpi	r24, 0x24	; 36
    48fa:	99 f5       	brne	.+102    	; 0x4962 <my_invoker+0x10e>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    48fc:	ce 01       	movw	r24, r28
    48fe:	83 59       	subi	r24, 0x93	; 147
    4900:	9f 4f       	sbci	r25, 0xFF	; 255
    4902:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    4906:	fe 01       	movw	r30, r28
    4908:	e5 59       	subi	r30, 0x95	; 149
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	91 83       	std	Z+1, r25	; 0x01
    490e:	80 83       	st	Z, r24
        
		//assert(numargs == 1);

		int velleft = (int)*(ch);
    4910:	fe 01       	movw	r30, r28
    4912:	e5 59       	subi	r30, 0x95	; 149
    4914:	ff 4f       	sbci	r31, 0xFF	; 255
    4916:	01 90       	ld	r0, Z+
    4918:	f0 81       	ld	r31, Z
    491a:	e0 2d       	mov	r30, r0
    491c:	80 81       	ld	r24, Z
    491e:	fe 01       	movw	r30, r28
    4920:	e7 59       	subi	r30, 0x97	; 151
    4922:	ff 4f       	sbci	r31, 0xFF	; 255
    4924:	88 2f       	mov	r24, r24
    4926:	90 e0       	ldi	r25, 0x00	; 0
    4928:	91 83       	std	Z+1, r25	; 0x01
    492a:	80 83       	st	Z, r24
		int velright = (int)*(ch+1);
    492c:	fe 01       	movw	r30, r28
    492e:	e5 59       	subi	r30, 0x95	; 149
    4930:	ff 4f       	sbci	r31, 0xFF	; 255
    4932:	80 81       	ld	r24, Z
    4934:	91 81       	ldd	r25, Z+1	; 0x01
    4936:	fc 01       	movw	r30, r24
    4938:	31 96       	adiw	r30, 0x01	; 1
    493a:	80 81       	ld	r24, Z
    493c:	fe 01       	movw	r30, r28
    493e:	e9 59       	subi	r30, 0x99	; 153
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	88 2f       	mov	r24, r24
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	91 83       	std	Z+1, r25	; 0x01
    4948:	80 83       	st	Z, r24
		velocity(velleft,velright);
    494a:	fe 01       	movw	r30, r28
    494c:	e7 59       	subi	r30, 0x97	; 151
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	80 81       	ld	r24, Z
    4952:	fe 01       	movw	r30, r28
    4954:	e9 59       	subi	r30, 0x99	; 153
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	90 81       	ld	r25, Z
    495a:	69 2f       	mov	r22, r25
    495c:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    4960:	84 c5       	rjmp	.+2824   	; 0x546a <my_invoker+0xc16>

        return;
    }
	
	else if(command == MOVE_BY) 
    4962:	fe 01       	movw	r30, r28
    4964:	ef 57       	subi	r30, 0x7F	; 127
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	80 81       	ld	r24, Z
    496a:	85 32       	cpi	r24, 0x25	; 37
    496c:	09 f0       	breq	.+2      	; 0x4970 <my_invoker+0x11c>
    496e:	82 c0       	rjmp	.+260    	; 0x4a74 <my_invoker+0x220>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    4970:	ce 01       	movw	r24, r28
    4972:	81 59       	subi	r24, 0x91	; 145
    4974:	9f 4f       	sbci	r25, 0xFF	; 255
    4976:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    497a:	fe 01       	movw	r30, r28
    497c:	eb 59       	subi	r30, 0x9B	; 155
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	80 83       	st	Z, r24
		int pos_a = (int)*(ch);
    4984:	fe 01       	movw	r30, r28
    4986:	eb 59       	subi	r30, 0x9B	; 155
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	01 90       	ld	r0, Z+
    498c:	f0 81       	ld	r31, Z
    498e:	e0 2d       	mov	r30, r0
    4990:	80 81       	ld	r24, Z
    4992:	fe 01       	movw	r30, r28
    4994:	ed 59       	subi	r30, 0x9D	; 157
    4996:	ff 4f       	sbci	r31, 0xFF	; 255
    4998:	88 2f       	mov	r24, r24
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	80 83       	st	Z, r24
		int pos_b = (int)*(ch+1);
    49a0:	fe 01       	movw	r30, r28
    49a2:	eb 59       	subi	r30, 0x9B	; 155
    49a4:	ff 4f       	sbci	r31, 0xFF	; 255
    49a6:	80 81       	ld	r24, Z
    49a8:	91 81       	ldd	r25, Z+1	; 0x01
    49aa:	fc 01       	movw	r30, r24
    49ac:	31 96       	adiw	r30, 0x01	; 1
    49ae:	80 81       	ld	r24, Z
    49b0:	fe 01       	movw	r30, r28
    49b2:	ef 59       	subi	r30, 0x9F	; 159
    49b4:	ff 4f       	sbci	r31, 0xFF	; 255
    49b6:	88 2f       	mov	r24, r24
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	91 83       	std	Z+1, r25	; 0x01
    49bc:	80 83       	st	Z, r24

		//int pos = 10;
		//while (pos_b--) pos *= 10;
		//pos *= pos_a;
		//forward_mm(pos);
		pos_a += (pos_b << 8);
    49be:	fe 01       	movw	r30, r28
    49c0:	ef 59       	subi	r30, 0x9F	; 159
    49c2:	ff 4f       	sbci	r31, 0xFF	; 255
    49c4:	80 81       	ld	r24, Z
    49c6:	91 81       	ldd	r25, Z+1	; 0x01
    49c8:	38 2f       	mov	r19, r24
    49ca:	22 27       	eor	r18, r18
    49cc:	de 01       	movw	r26, r28
    49ce:	ad 59       	subi	r26, 0x9D	; 157
    49d0:	bf 4f       	sbci	r27, 0xFF	; 255
    49d2:	fe 01       	movw	r30, r28
    49d4:	ed 59       	subi	r30, 0x9D	; 157
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	80 81       	ld	r24, Z
    49da:	91 81       	ldd	r25, Z+1	; 0x01
    49dc:	82 0f       	add	r24, r18
    49de:	93 1f       	adc	r25, r19
    49e0:	8d 93       	st	X+, r24
    49e2:	9c 93       	st	X, r25

		forward();
    49e4:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <forward>
		velocity(120,120);
    49e8:	88 e7       	ldi	r24, 0x78	; 120
    49ea:	68 e7       	ldi	r22, 0x78	; 120
    49ec:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    49f0:	0e c0       	rjmp	.+28     	; 0x4a0e <my_invoker+0x1ba>

		while (pos_a--) {
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	90 e0       	ldi	r25, 0x00	; 0
    49f6:	90 93 8c 03 	sts	0x038C, r25
    49fa:	80 93 8b 03 	sts	0x038B, r24
			start_timer4();
    49fe:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <start_timer4>
			while (stop_on_timer4_overflow != 0) {;}
    4a02:	80 91 8b 03 	lds	r24, 0x038B
    4a06:	90 91 8c 03 	lds	r25, 0x038C
    4a0a:	00 97       	sbiw	r24, 0x00	; 0
    4a0c:	d1 f7       	brne	.-12     	; 0x4a02 <my_invoker+0x1ae>
		pos_a += (pos_b << 8);

		forward();
		velocity(120,120);

		while (pos_a--) {
    4a0e:	cb 57       	subi	r28, 0x7B	; 123
    4a10:	df 4f       	sbci	r29, 0xFF	; 255
    4a12:	18 82       	st	Y, r1
    4a14:	c5 58       	subi	r28, 0x85	; 133
    4a16:	d0 40       	sbci	r29, 0x00	; 0
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ed 59       	subi	r30, 0x9D	; 157
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	91 81       	ldd	r25, Z+1	; 0x01
    4a22:	00 97       	sbiw	r24, 0x00	; 0
    4a24:	31 f0       	breq	.+12     	; 0x4a32 <my_invoker+0x1de>
    4a26:	81 e0       	ldi	r24, 0x01	; 1
    4a28:	cb 57       	subi	r28, 0x7B	; 123
    4a2a:	df 4f       	sbci	r29, 0xFF	; 255
    4a2c:	88 83       	st	Y, r24
    4a2e:	c5 58       	subi	r28, 0x85	; 133
    4a30:	d0 40       	sbci	r29, 0x00	; 0
    4a32:	de 01       	movw	r26, r28
    4a34:	ad 59       	subi	r26, 0x9D	; 157
    4a36:	bf 4f       	sbci	r27, 0xFF	; 255
    4a38:	fe 01       	movw	r30, r28
    4a3a:	ed 59       	subi	r30, 0x9D	; 157
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	80 81       	ld	r24, Z
    4a40:	91 81       	ldd	r25, Z+1	; 0x01
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	11 96       	adiw	r26, 0x01	; 1
    4a46:	9c 93       	st	X, r25
    4a48:	8e 93       	st	-X, r24
    4a4a:	cb 57       	subi	r28, 0x7B	; 123
    4a4c:	df 4f       	sbci	r29, 0xFF	; 255
    4a4e:	88 81       	ld	r24, Y
    4a50:	c5 58       	subi	r28, 0x85	; 133
    4a52:	d0 40       	sbci	r29, 0x00	; 0
    4a54:	88 23       	and	r24, r24
    4a56:	69 f6       	brne	.-102    	; 0x49f2 <my_invoker+0x19e>
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
			start_timer4();
			while (stop_on_timer4_overflow != 0) {;}
		}
		stop();
    4a58:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		send_char(SUCCESS);		
    4a5c:	81 e0       	ldi	r24, 0x01	; 1
    4a5e:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
		leftInt = 0;
    4a62:	10 92 74 03 	sts	0x0374, r1
    4a66:	10 92 73 03 	sts	0x0373, r1
		rightInt = 0;
    4a6a:	10 92 76 03 	sts	0x0376, r1
    4a6e:	10 92 75 03 	sts	0x0375, r1
    4a72:	fb c4       	rjmp	.+2550   	; 0x546a <my_invoker+0xc16>
		
		return;
    }

	else if(command == MOVE_BACK_BY) 
    4a74:	fe 01       	movw	r30, r28
    4a76:	ef 57       	subi	r30, 0x7F	; 127
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	80 81       	ld	r24, Z
    4a7c:	88 32       	cpi	r24, 0x28	; 40
    4a7e:	09 f0       	breq	.+2      	; 0x4a82 <my_invoker+0x22e>
    4a80:	82 c0       	rjmp	.+260    	; 0x4b86 <my_invoker+0x332>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    4a82:	ce 01       	movw	r24, r28
    4a84:	8f 58       	subi	r24, 0x8F	; 143
    4a86:	9f 4f       	sbci	r25, 0xFF	; 255
    4a88:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	e1 5a       	subi	r30, 0xA1	; 161
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	91 83       	std	Z+1, r25	; 0x01
    4a94:	80 83       	st	Z, r24
		int pos_a = (int)*(ch);
    4a96:	fe 01       	movw	r30, r28
    4a98:	e1 5a       	subi	r30, 0xA1	; 161
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	01 90       	ld	r0, Z+
    4a9e:	f0 81       	ld	r31, Z
    4aa0:	e0 2d       	mov	r30, r0
    4aa2:	80 81       	ld	r24, Z
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	e3 5a       	subi	r30, 0xA3	; 163
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	88 2f       	mov	r24, r24
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	91 83       	std	Z+1, r25	; 0x01
    4ab0:	80 83       	st	Z, r24
		int pos_b = (int)*(ch+1);
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	e1 5a       	subi	r30, 0xA1	; 161
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	80 81       	ld	r24, Z
    4aba:	91 81       	ldd	r25, Z+1	; 0x01
    4abc:	fc 01       	movw	r30, r24
    4abe:	31 96       	adiw	r30, 0x01	; 1
    4ac0:	80 81       	ld	r24, Z
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	e5 5a       	subi	r30, 0xA5	; 165
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	88 2f       	mov	r24, r24
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	91 83       	std	Z+1, r25	; 0x01
    4ace:	80 83       	st	Z, r24

		//int pos = 10;
		//while (pos_b--) pos *= 10;
		//pos *= pos_a;
		//forward_mm(pos);
		pos_a += (pos_b << 8);
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e5 5a       	subi	r30, 0xA5	; 165
    4ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	38 2f       	mov	r19, r24
    4adc:	22 27       	eor	r18, r18
    4ade:	de 01       	movw	r26, r28
    4ae0:	a3 5a       	subi	r26, 0xA3	; 163
    4ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e3 5a       	subi	r30, 0xA3	; 163
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	80 81       	ld	r24, Z
    4aec:	91 81       	ldd	r25, Z+1	; 0x01
    4aee:	82 0f       	add	r24, r18
    4af0:	93 1f       	adc	r25, r19
    4af2:	8d 93       	st	X+, r24
    4af4:	9c 93       	st	X, r25

		back();
    4af6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <back>
		velocity(120,120);
    4afa:	88 e7       	ldi	r24, 0x78	; 120
    4afc:	68 e7       	ldi	r22, 0x78	; 120
    4afe:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    4b02:	0e c0       	rjmp	.+28     	; 0x4b20 <my_invoker+0x2cc>

		while (pos_a--) {
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	90 93 8c 03 	sts	0x038C, r25
    4b0c:	80 93 8b 03 	sts	0x038B, r24
			start_timer4();
    4b10:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <start_timer4>
			while (stop_on_timer4_overflow != 0) {;}
    4b14:	80 91 8b 03 	lds	r24, 0x038B
    4b18:	90 91 8c 03 	lds	r25, 0x038C
    4b1c:	00 97       	sbiw	r24, 0x00	; 0
    4b1e:	d1 f7       	brne	.-12     	; 0x4b14 <my_invoker+0x2c0>
		pos_a += (pos_b << 8);

		back();
		velocity(120,120);

		while (pos_a--) {
    4b20:	cc 57       	subi	r28, 0x7C	; 124
    4b22:	df 4f       	sbci	r29, 0xFF	; 255
    4b24:	18 82       	st	Y, r1
    4b26:	c4 58       	subi	r28, 0x84	; 132
    4b28:	d0 40       	sbci	r29, 0x00	; 0
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	e3 5a       	subi	r30, 0xA3	; 163
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	80 81       	ld	r24, Z
    4b32:	91 81       	ldd	r25, Z+1	; 0x01
    4b34:	00 97       	sbiw	r24, 0x00	; 0
    4b36:	31 f0       	breq	.+12     	; 0x4b44 <my_invoker+0x2f0>
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	cc 57       	subi	r28, 0x7C	; 124
    4b3c:	df 4f       	sbci	r29, 0xFF	; 255
    4b3e:	88 83       	st	Y, r24
    4b40:	c4 58       	subi	r28, 0x84	; 132
    4b42:	d0 40       	sbci	r29, 0x00	; 0
    4b44:	de 01       	movw	r26, r28
    4b46:	a3 5a       	subi	r26, 0xA3	; 163
    4b48:	bf 4f       	sbci	r27, 0xFF	; 255
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e3 5a       	subi	r30, 0xA3	; 163
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	80 81       	ld	r24, Z
    4b52:	91 81       	ldd	r25, Z+1	; 0x01
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	11 96       	adiw	r26, 0x01	; 1
    4b58:	9c 93       	st	X, r25
    4b5a:	8e 93       	st	-X, r24
    4b5c:	cc 57       	subi	r28, 0x7C	; 124
    4b5e:	df 4f       	sbci	r29, 0xFF	; 255
    4b60:	88 81       	ld	r24, Y
    4b62:	c4 58       	subi	r28, 0x84	; 132
    4b64:	d0 40       	sbci	r29, 0x00	; 0
    4b66:	88 23       	and	r24, r24
    4b68:	69 f6       	brne	.-102    	; 0x4b04 <my_invoker+0x2b0>
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
			start_timer4();
			while (stop_on_timer4_overflow != 0) {;}
		}
		stop();
    4b6a:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		send_char(SUCCESS);		
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
		leftInt = 0;
    4b74:	10 92 74 03 	sts	0x0374, r1
    4b78:	10 92 73 03 	sts	0x0373, r1
		rightInt = 0;
    4b7c:	10 92 76 03 	sts	0x0376, r1
    4b80:	10 92 75 03 	sts	0x0375, r1
    4b84:	72 c4       	rjmp	.+2276   	; 0x546a <my_invoker+0xc16>
		
		return;
    }
	
	else if(command == TURN_LEFT_BY) 
    4b86:	fe 01       	movw	r30, r28
    4b88:	ef 57       	subi	r30, 0x7F	; 127
    4b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8c:	80 81       	ld	r24, Z
    4b8e:	86 32       	cpi	r24, 0x26	; 38
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <my_invoker+0x340>
    4b92:	f8 c0       	rjmp	.+496    	; 0x4d84 <my_invoker+0x530>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    4b94:	ce 01       	movw	r24, r28
    4b96:	8d 58       	subi	r24, 0x8D	; 141
    4b98:	9f 4f       	sbci	r25, 0xFF	; 255
    4b9a:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    4b9e:	fe 01       	movw	r30, r28
    4ba0:	e7 5a       	subi	r30, 0xA7	; 167
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	91 83       	std	Z+1, r25	; 0x01
    4ba6:	80 83       	st	Z, r24
        already_stopped = 0;
    4ba8:	10 92 62 03 	sts	0x0362, r1
		int pos_a = (int)*(ch);
    4bac:	fe 01       	movw	r30, r28
    4bae:	e7 5a       	subi	r30, 0xA7	; 167
    4bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb2:	01 90       	ld	r0, Z+
    4bb4:	f0 81       	ld	r31, Z
    4bb6:	e0 2d       	mov	r30, r0
    4bb8:	80 81       	ld	r24, Z
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e9 5a       	subi	r30, 0xA9	; 169
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	88 2f       	mov	r24, r24
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	91 83       	std	Z+1, r25	; 0x01
    4bc6:	80 83       	st	Z, r24
		int pos_b = (int)*(ch+1);
    4bc8:	fe 01       	movw	r30, r28
    4bca:	e7 5a       	subi	r30, 0xA7	; 167
    4bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bce:	80 81       	ld	r24, Z
    4bd0:	91 81       	ldd	r25, Z+1	; 0x01
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	31 96       	adiw	r30, 0x01	; 1
    4bd6:	80 81       	ld	r24, Z
    4bd8:	fe 01       	movw	r30, r28
    4bda:	eb 5a       	subi	r30, 0xAB	; 171
    4bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bde:	88 2f       	mov	r24, r24
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	80 83       	st	Z, r24

		pos_a += (pos_b << 8);
    4be6:	fe 01       	movw	r30, r28
    4be8:	eb 5a       	subi	r30, 0xAB	; 171
    4bea:	ff 4f       	sbci	r31, 0xFF	; 255
    4bec:	80 81       	ld	r24, Z
    4bee:	91 81       	ldd	r25, Z+1	; 0x01
    4bf0:	38 2f       	mov	r19, r24
    4bf2:	22 27       	eor	r18, r18
    4bf4:	de 01       	movw	r26, r28
    4bf6:	a9 5a       	subi	r26, 0xA9	; 169
    4bf8:	bf 4f       	sbci	r27, 0xFF	; 255
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	e9 5a       	subi	r30, 0xA9	; 169
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	80 81       	ld	r24, Z
    4c02:	91 81       	ldd	r25, Z+1	; 0x01
    4c04:	82 0f       	add	r24, r18
    4c06:	93 1f       	adc	r25, r19
    4c08:	8d 93       	st	X+, r24
    4c0a:	9c 93       	st	X, r25
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	aa ef       	ldi	r26, 0xFA	; 250
    4c12:	b3 e4       	ldi	r27, 0x43	; 67
    4c14:	8d ab       	std	Y+53, r24	; 0x35
    4c16:	9e ab       	std	Y+54, r25	; 0x36
    4c18:	af ab       	std	Y+55, r26	; 0x37
    4c1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c1c:	6d a9       	ldd	r22, Y+53	; 0x35
    4c1e:	7e a9       	ldd	r23, Y+54	; 0x36
    4c20:	8f a9       	ldd	r24, Y+55	; 0x37
    4c22:	98 ad       	ldd	r25, Y+56	; 0x38
    4c24:	2d ec       	ldi	r18, 0xCD	; 205
    4c26:	3c ec       	ldi	r19, 0xCC	; 204
    4c28:	4c e2       	ldi	r20, 0x2C	; 44
    4c2a:	55 e4       	ldi	r21, 0x45	; 69
    4c2c:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    4c30:	dc 01       	movw	r26, r24
    4c32:	cb 01       	movw	r24, r22
    4c34:	89 ab       	std	Y+49, r24	; 0x31
    4c36:	9a ab       	std	Y+50, r25	; 0x32
    4c38:	ab ab       	std	Y+51, r26	; 0x33
    4c3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c3c:	69 a9       	ldd	r22, Y+49	; 0x31
    4c3e:	7a a9       	ldd	r23, Y+50	; 0x32
    4c40:	8b a9       	ldd	r24, Y+51	; 0x33
    4c42:	9c a9       	ldd	r25, Y+52	; 0x34
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	40 e8       	ldi	r20, 0x80	; 128
    4c4a:	5f e3       	ldi	r21, 0x3F	; 63
    4c4c:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    4c50:	88 23       	and	r24, r24
    4c52:	2c f4       	brge	.+10     	; 0x4c5e <my_invoker+0x40a>
		__ticks = 1;
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	98 ab       	std	Y+48, r25	; 0x30
    4c5a:	8f a7       	std	Y+47, r24	; 0x2f
    4c5c:	3f c0       	rjmp	.+126    	; 0x4cdc <my_invoker+0x488>
	else if (__tmp > 65535)
    4c5e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c60:	7a a9       	ldd	r23, Y+50	; 0x32
    4c62:	8b a9       	ldd	r24, Y+51	; 0x33
    4c64:	9c a9       	ldd	r25, Y+52	; 0x34
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	3f ef       	ldi	r19, 0xFF	; 255
    4c6a:	4f e7       	ldi	r20, 0x7F	; 127
    4c6c:	57 e4       	ldi	r21, 0x47	; 71
    4c6e:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    4c72:	18 16       	cp	r1, r24
    4c74:	4c f5       	brge	.+82     	; 0x4cc8 <my_invoker+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c76:	6d a9       	ldd	r22, Y+53	; 0x35
    4c78:	7e a9       	ldd	r23, Y+54	; 0x36
    4c7a:	8f a9       	ldd	r24, Y+55	; 0x37
    4c7c:	98 ad       	ldd	r25, Y+56	; 0x38
    4c7e:	20 e0       	ldi	r18, 0x00	; 0
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	40 e2       	ldi	r20, 0x20	; 32
    4c84:	51 e4       	ldi	r21, 0x41	; 65
    4c86:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	bc 01       	movw	r22, r24
    4c90:	cd 01       	movw	r24, r26
    4c92:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    4c96:	dc 01       	movw	r26, r24
    4c98:	cb 01       	movw	r24, r22
    4c9a:	98 ab       	std	Y+48, r25	; 0x30
    4c9c:	8f a7       	std	Y+47, r24	; 0x2f
    4c9e:	0f c0       	rjmp	.+30     	; 0x4cbe <my_invoker+0x46a>
    4ca0:	84 e1       	ldi	r24, 0x14	; 20
    4ca2:	91 e0       	ldi	r25, 0x01	; 1
    4ca4:	9e a7       	std	Y+46, r25	; 0x2e
    4ca6:	8d a7       	std	Y+45, r24	; 0x2d
    4ca8:	8d a5       	ldd	r24, Y+45	; 0x2d
    4caa:	9e a5       	ldd	r25, Y+46	; 0x2e
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	f1 f7       	brne	.-4      	; 0x4cac <my_invoker+0x458>
    4cb0:	9e a7       	std	Y+46, r25	; 0x2e
    4cb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    4cb8:	01 97       	sbiw	r24, 0x01	; 1
    4cba:	98 ab       	std	Y+48, r25	; 0x30
    4cbc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    4cc2:	00 97       	sbiw	r24, 0x00	; 0
    4cc4:	69 f7       	brne	.-38     	; 0x4ca0 <my_invoker+0x44c>
    4cc6:	14 c0       	rjmp	.+40     	; 0x4cf0 <my_invoker+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    4cca:	7a a9       	ldd	r23, Y+50	; 0x32
    4ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    4cce:	9c a9       	ldd	r25, Y+52	; 0x34
    4cd0:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    4cd4:	dc 01       	movw	r26, r24
    4cd6:	cb 01       	movw	r24, r22
    4cd8:	98 ab       	std	Y+48, r25	; 0x30
    4cda:	8f a7       	std	Y+47, r24	; 0x2f
    4cdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cde:	98 a9       	ldd	r25, Y+48	; 0x30
    4ce0:	9c a7       	std	Y+44, r25	; 0x2c
    4ce2:	8b a7       	std	Y+43, r24	; 0x2b
    4ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
    4ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
    4ce8:	01 97       	sbiw	r24, 0x01	; 1
    4cea:	f1 f7       	brne	.-4      	; 0x4ce8 <my_invoker+0x494>
    4cec:	9c a7       	std	Y+44, r25	; 0x2c
    4cee:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(500);
		left();
    4cf0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <left>
		velocity(200,200);
    4cf4:	88 ec       	ldi	r24, 0xC8	; 200
    4cf6:	68 ec       	ldi	r22, 0xC8	; 200
    4cf8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    4cfc:	0e c0       	rjmp	.+28     	; 0x4d1a <my_invoker+0x4c6>

		while (pos_a--) {
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
    4cfe:	81 e0       	ldi	r24, 0x01	; 1
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	90 93 8c 03 	sts	0x038C, r25
    4d06:	80 93 8b 03 	sts	0x038B, r24
			start_timer4();
    4d0a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <start_timer4>
			while (stop_on_timer4_overflow != 0) {;}
    4d0e:	80 91 8b 03 	lds	r24, 0x038B
    4d12:	90 91 8c 03 	lds	r25, 0x038C
    4d16:	00 97       	sbiw	r24, 0x00	; 0
    4d18:	d1 f7       	brne	.-12     	; 0x4d0e <my_invoker+0x4ba>

		_delay_ms(500);
		left();
		velocity(200,200);

		while (pos_a--) {
    4d1a:	cd 57       	subi	r28, 0x7D	; 125
    4d1c:	df 4f       	sbci	r29, 0xFF	; 255
    4d1e:	18 82       	st	Y, r1
    4d20:	c3 58       	subi	r28, 0x83	; 131
    4d22:	d0 40       	sbci	r29, 0x00	; 0
    4d24:	fe 01       	movw	r30, r28
    4d26:	e9 5a       	subi	r30, 0xA9	; 169
    4d28:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2a:	80 81       	ld	r24, Z
    4d2c:	91 81       	ldd	r25, Z+1	; 0x01
    4d2e:	00 97       	sbiw	r24, 0x00	; 0
    4d30:	31 f0       	breq	.+12     	; 0x4d3e <my_invoker+0x4ea>
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	cd 57       	subi	r28, 0x7D	; 125
    4d36:	df 4f       	sbci	r29, 0xFF	; 255
    4d38:	88 83       	st	Y, r24
    4d3a:	c3 58       	subi	r28, 0x83	; 131
    4d3c:	d0 40       	sbci	r29, 0x00	; 0
    4d3e:	de 01       	movw	r26, r28
    4d40:	a9 5a       	subi	r26, 0xA9	; 169
    4d42:	bf 4f       	sbci	r27, 0xFF	; 255
    4d44:	fe 01       	movw	r30, r28
    4d46:	e9 5a       	subi	r30, 0xA9	; 169
    4d48:	ff 4f       	sbci	r31, 0xFF	; 255
    4d4a:	80 81       	ld	r24, Z
    4d4c:	91 81       	ldd	r25, Z+1	; 0x01
    4d4e:	01 97       	sbiw	r24, 0x01	; 1
    4d50:	11 96       	adiw	r26, 0x01	; 1
    4d52:	9c 93       	st	X, r25
    4d54:	8e 93       	st	-X, r24
    4d56:	cd 57       	subi	r28, 0x7D	; 125
    4d58:	df 4f       	sbci	r29, 0xFF	; 255
    4d5a:	88 81       	ld	r24, Y
    4d5c:	c3 58       	subi	r28, 0x83	; 131
    4d5e:	d0 40       	sbci	r29, 0x00	; 0
    4d60:	88 23       	and	r24, r24
    4d62:	69 f6       	brne	.-102    	; 0x4cfe <my_invoker+0x4aa>
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
			start_timer4();
			while (stop_on_timer4_overflow != 0) {;}
		}
		stop();
    4d64:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		send_char(SUCCESS);		
    4d68:	81 e0       	ldi	r24, 0x01	; 1
    4d6a:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
		leftInt = 0;
    4d6e:	10 92 74 03 	sts	0x0374, r1
    4d72:	10 92 73 03 	sts	0x0373, r1
		rightInt = 0;
    4d76:	10 92 76 03 	sts	0x0376, r1
    4d7a:	10 92 75 03 	sts	0x0375, r1
		already_modified_stopped = 0;
    4d7e:	10 92 63 03 	sts	0x0363, r1
    4d82:	73 c3       	rjmp	.+1766   	; 0x546a <my_invoker+0xc16>

        return;
    }

	else if(command == TURN_RIGHT_BY) 
    4d84:	fe 01       	movw	r30, r28
    4d86:	ef 57       	subi	r30, 0x7F	; 127
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	87 32       	cpi	r24, 0x27	; 39
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <my_invoker+0x53e>
    4d90:	f6 c0       	rjmp	.+492    	; 0x4f7e <my_invoker+0x72a>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    4d92:	ce 01       	movw	r24, r28
    4d94:	8b 58       	subi	r24, 0x8B	; 139
    4d96:	9f 4f       	sbci	r25, 0xFF	; 255
    4d98:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    4d9c:	fe 01       	movw	r30, r28
    4d9e:	ed 5a       	subi	r30, 0xAD	; 173
    4da0:	ff 4f       	sbci	r31, 0xFF	; 255
    4da2:	91 83       	std	Z+1, r25	; 0x01
    4da4:	80 83       	st	Z, r24
        
		//assert(numargs == 2);

		int pos_a = (int)*(ch);
    4da6:	fe 01       	movw	r30, r28
    4da8:	ed 5a       	subi	r30, 0xAD	; 173
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	01 90       	ld	r0, Z+
    4dae:	f0 81       	ld	r31, Z
    4db0:	e0 2d       	mov	r30, r0
    4db2:	80 81       	ld	r24, Z
    4db4:	fe 01       	movw	r30, r28
    4db6:	ef 5a       	subi	r30, 0xAF	; 175
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	88 2f       	mov	r24, r24
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	91 83       	std	Z+1, r25	; 0x01
    4dc0:	80 83       	st	Z, r24
		int pos_b = (int)*(ch+1);
    4dc2:	fe 01       	movw	r30, r28
    4dc4:	ed 5a       	subi	r30, 0xAD	; 173
    4dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc8:	80 81       	ld	r24, Z
    4dca:	91 81       	ldd	r25, Z+1	; 0x01
    4dcc:	fc 01       	movw	r30, r24
    4dce:	31 96       	adiw	r30, 0x01	; 1
    4dd0:	80 81       	ld	r24, Z
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	e1 5b       	subi	r30, 0xB1	; 177
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	88 2f       	mov	r24, r24
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	91 83       	std	Z+1, r25	; 0x01
    4dde:	80 83       	st	Z, r24

		pos_a += (pos_b << 8);
    4de0:	fe 01       	movw	r30, r28
    4de2:	e1 5b       	subi	r30, 0xB1	; 177
    4de4:	ff 4f       	sbci	r31, 0xFF	; 255
    4de6:	80 81       	ld	r24, Z
    4de8:	91 81       	ldd	r25, Z+1	; 0x01
    4dea:	38 2f       	mov	r19, r24
    4dec:	22 27       	eor	r18, r18
    4dee:	de 01       	movw	r26, r28
    4df0:	af 5a       	subi	r26, 0xAF	; 175
    4df2:	bf 4f       	sbci	r27, 0xFF	; 255
    4df4:	fe 01       	movw	r30, r28
    4df6:	ef 5a       	subi	r30, 0xAF	; 175
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 81       	ld	r24, Z
    4dfc:	91 81       	ldd	r25, Z+1	; 0x01
    4dfe:	82 0f       	add	r24, r18
    4e00:	93 1f       	adc	r25, r19
    4e02:	8d 93       	st	X+, r24
    4e04:	9c 93       	st	X, r25
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	aa ef       	ldi	r26, 0xFA	; 250
    4e0c:	b3 e4       	ldi	r27, 0x43	; 67
    4e0e:	8f a3       	std	Y+39, r24	; 0x27
    4e10:	98 a7       	std	Y+40, r25	; 0x28
    4e12:	a9 a7       	std	Y+41, r26	; 0x29
    4e14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e16:	6f a1       	ldd	r22, Y+39	; 0x27
    4e18:	78 a5       	ldd	r23, Y+40	; 0x28
    4e1a:	89 a5       	ldd	r24, Y+41	; 0x29
    4e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e1e:	2d ec       	ldi	r18, 0xCD	; 205
    4e20:	3c ec       	ldi	r19, 0xCC	; 204
    4e22:	4c e2       	ldi	r20, 0x2C	; 44
    4e24:	55 e4       	ldi	r21, 0x45	; 69
    4e26:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	8b a3       	std	Y+35, r24	; 0x23
    4e30:	9c a3       	std	Y+36, r25	; 0x24
    4e32:	ad a3       	std	Y+37, r26	; 0x25
    4e34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e36:	6b a1       	ldd	r22, Y+35	; 0x23
    4e38:	7c a1       	ldd	r23, Y+36	; 0x24
    4e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    4e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	40 e8       	ldi	r20, 0x80	; 128
    4e44:	5f e3       	ldi	r21, 0x3F	; 63
    4e46:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    4e4a:	88 23       	and	r24, r24
    4e4c:	2c f4       	brge	.+10     	; 0x4e58 <my_invoker+0x604>
		__ticks = 1;
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	9a a3       	std	Y+34, r25	; 0x22
    4e54:	89 a3       	std	Y+33, r24	; 0x21
    4e56:	3f c0       	rjmp	.+126    	; 0x4ed6 <my_invoker+0x682>
	else if (__tmp > 65535)
    4e58:	6b a1       	ldd	r22, Y+35	; 0x23
    4e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    4e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    4e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	3f ef       	ldi	r19, 0xFF	; 255
    4e64:	4f e7       	ldi	r20, 0x7F	; 127
    4e66:	57 e4       	ldi	r21, 0x47	; 71
    4e68:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    4e6c:	18 16       	cp	r1, r24
    4e6e:	4c f5       	brge	.+82     	; 0x4ec2 <my_invoker+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e70:	6f a1       	ldd	r22, Y+39	; 0x27
    4e72:	78 a5       	ldd	r23, Y+40	; 0x28
    4e74:	89 a5       	ldd	r24, Y+41	; 0x29
    4e76:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e2       	ldi	r20, 0x20	; 32
    4e7e:	51 e4       	ldi	r21, 0x41	; 65
    4e80:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    4e84:	dc 01       	movw	r26, r24
    4e86:	cb 01       	movw	r24, r22
    4e88:	bc 01       	movw	r22, r24
    4e8a:	cd 01       	movw	r24, r26
    4e8c:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    4e90:	dc 01       	movw	r26, r24
    4e92:	cb 01       	movw	r24, r22
    4e94:	9a a3       	std	Y+34, r25	; 0x22
    4e96:	89 a3       	std	Y+33, r24	; 0x21
    4e98:	0f c0       	rjmp	.+30     	; 0x4eb8 <my_invoker+0x664>
    4e9a:	84 e1       	ldi	r24, 0x14	; 20
    4e9c:	91 e0       	ldi	r25, 0x01	; 1
    4e9e:	98 a3       	std	Y+32, r25	; 0x20
    4ea0:	8f 8f       	std	Y+31, r24	; 0x1f
    4ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ea4:	98 a1       	ldd	r25, Y+32	; 0x20
    4ea6:	01 97       	sbiw	r24, 0x01	; 1
    4ea8:	f1 f7       	brne	.-4      	; 0x4ea6 <my_invoker+0x652>
    4eaa:	98 a3       	std	Y+32, r25	; 0x20
    4eac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eae:	89 a1       	ldd	r24, Y+33	; 0x21
    4eb0:	9a a1       	ldd	r25, Y+34	; 0x22
    4eb2:	01 97       	sbiw	r24, 0x01	; 1
    4eb4:	9a a3       	std	Y+34, r25	; 0x22
    4eb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    4eba:	9a a1       	ldd	r25, Y+34	; 0x22
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	69 f7       	brne	.-38     	; 0x4e9a <my_invoker+0x646>
    4ec0:	14 c0       	rjmp	.+40     	; 0x4eea <my_invoker+0x696>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    4ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    4ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    4ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    4eca:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	9a a3       	std	Y+34, r25	; 0x22
    4ed4:	89 a3       	std	Y+33, r24	; 0x21
    4ed6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ed8:	9a a1       	ldd	r25, Y+34	; 0x22
    4eda:	9e 8f       	std	Y+30, r25	; 0x1e
    4edc:	8d 8f       	std	Y+29, r24	; 0x1d
    4ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ee2:	01 97       	sbiw	r24, 0x01	; 1
    4ee4:	f1 f7       	brne	.-4      	; 0x4ee2 <my_invoker+0x68e>
    4ee6:	9e 8f       	std	Y+30, r25	; 0x1e
    4ee8:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(500);
		right();
    4eea:	0e 94 77 0e 	call	0x1cee	; 0x1cee <right>
		velocity(200,200);
    4eee:	88 ec       	ldi	r24, 0xC8	; 200
    4ef0:	68 ec       	ldi	r22, 0xC8	; 200
    4ef2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <velocity>
    4ef6:	0e c0       	rjmp	.+28     	; 0x4f14 <my_invoker+0x6c0>


		while (pos_a--) {
			//delay on 5 ms
			stop_on_timer4_overflow = 1;
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	90 93 8c 03 	sts	0x038C, r25
    4f00:	80 93 8b 03 	sts	0x038B, r24
			start_timer4();
    4f04:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <start_timer4>
			while (stop_on_timer4_overflow != 0) {;}
    4f08:	80 91 8b 03 	lds	r24, 0x038B
    4f0c:	90 91 8c 03 	lds	r25, 0x038C
    4f10:	00 97       	sbiw	r24, 0x00	; 0
    4f12:	d1 f7       	brne	.-12     	; 0x4f08 <my_invoker+0x6b4>
		_delay_ms(500);
		right();
		velocity(200,200);


		while (pos_a--) {
    4f14:	ce 57       	subi	r28, 0x7E	; 126
    4f16:	df 4f       	sbci	r29, 0xFF	; 255
    4f18:	18 82       	st	Y, r1
    4f1a:	c2 58       	subi	r28, 0x82	; 130
    4f1c:	d0 40       	sbci	r29, 0x00	; 0
    4f1e:	fe 01       	movw	r30, r28
    4f20:	ef 5a       	subi	r30, 0xAF	; 175
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	80 81       	ld	r24, Z
    4f26:	91 81       	ldd	r25, Z+1	; 0x01
    4f28:	00 97       	sbiw	r24, 0x00	; 0
    4f2a:	31 f0       	breq	.+12     	; 0x4f38 <my_invoker+0x6e4>
    4f2c:	81 e0       	ldi	r24, 0x01	; 1
    4f2e:	ce 57       	subi	r28, 0x7E	; 126
    4f30:	df 4f       	sbci	r29, 0xFF	; 255
    4f32:	88 83       	st	Y, r24
    4f34:	c2 58       	subi	r28, 0x82	; 130
    4f36:	d0 40       	sbci	r29, 0x00	; 0
    4f38:	de 01       	movw	r26, r28
    4f3a:	af 5a       	subi	r26, 0xAF	; 175
    4f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    4f3e:	fe 01       	movw	r30, r28
    4f40:	ef 5a       	subi	r30, 0xAF	; 175
    4f42:	ff 4f       	sbci	r31, 0xFF	; 255
    4f44:	80 81       	ld	r24, Z
    4f46:	91 81       	ldd	r25, Z+1	; 0x01
    4f48:	01 97       	sbiw	r24, 0x01	; 1
    4f4a:	11 96       	adiw	r26, 0x01	; 1
    4f4c:	9c 93       	st	X, r25
    4f4e:	8e 93       	st	-X, r24
    4f50:	ce 57       	subi	r28, 0x7E	; 126
    4f52:	df 4f       	sbci	r29, 0xFF	; 255
    4f54:	88 81       	ld	r24, Y
    4f56:	c2 58       	subi	r28, 0x82	; 130
    4f58:	d0 40       	sbci	r29, 0x00	; 0
    4f5a:	88 23       	and	r24, r24
    4f5c:	69 f6       	brne	.-102    	; 0x4ef8 <my_invoker+0x6a4>
			stop_on_timer4_overflow = 1;
			start_timer4();
			while (stop_on_timer4_overflow != 0) {;}
		}		

		stop();
    4f5e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <stop>
		send_char(SUCCESS);
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
		leftInt = 0;
    4f68:	10 92 74 03 	sts	0x0374, r1
    4f6c:	10 92 73 03 	sts	0x0373, r1
		rightInt = 0;
    4f70:	10 92 76 03 	sts	0x0376, r1
    4f74:	10 92 75 03 	sts	0x0375, r1
		already_modified_stopped = 0;
    4f78:	10 92 63 03 	sts	0x0363, r1
    4f7c:	76 c2       	rjmp	.+1260   	; 0x546a <my_invoker+0xc16>
        return;
    }

    else if(command == LCD_SET_STRING) 
    4f7e:	fe 01       	movw	r30, r28
    4f80:	ef 57       	subi	r30, 0x7F	; 127
    4f82:	ff 4f       	sbci	r31, 0xFF	; 255
    4f84:	80 81       	ld	r24, Z
    4f86:	80 32       	cpi	r24, 0x20	; 32
    4f88:	e1 f5       	brne	.+120    	; 0x5002 <my_invoker+0x7ae>
    {
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	89 58       	subi	r24, 0x89	; 137
    4f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f90:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    4f94:	fe 01       	movw	r30, r28
    4f96:	e3 5b       	subi	r30, 0xB3	; 179
    4f98:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9a:	91 83       	std	Z+1, r25	; 0x01
    4f9c:	80 83       	st	Z, r24
        
        int i =0;
    4f9e:	fe 01       	movw	r30, r28
    4fa0:	e5 5b       	subi	r30, 0xB5	; 181
    4fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa4:	11 82       	std	Z+1, r1	; 0x01
    4fa6:	10 82       	st	Z, r1
		lcd_clear();
    4fa8:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
    4fac:	1c c0       	rjmp	.+56     	; 0x4fe6 <my_invoker+0x792>
        for(;i<numargs;i++)
        {
            lcd_wr_char(*(ch+i));
    4fae:	fe 01       	movw	r30, r28
    4fb0:	e5 5b       	subi	r30, 0xB5	; 181
    4fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb4:	20 81       	ld	r18, Z
    4fb6:	31 81       	ldd	r19, Z+1	; 0x01
    4fb8:	fe 01       	movw	r30, r28
    4fba:	e3 5b       	subi	r30, 0xB3	; 179
    4fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fbe:	80 81       	ld	r24, Z
    4fc0:	91 81       	ldd	r25, Z+1	; 0x01
    4fc2:	fc 01       	movw	r30, r24
    4fc4:	e2 0f       	add	r30, r18
    4fc6:	f3 1f       	adc	r31, r19
    4fc8:	80 81       	ld	r24, Z
    4fca:	0e 94 a6 07 	call	0xf4c	; 0xf4c <lcd_wr_char>
        int numargs;
		unsigned char * ch = recieve_args(&numargs);
        
        int i =0;
		lcd_clear();
        for(;i<numargs;i++)
    4fce:	de 01       	movw	r26, r28
    4fd0:	a5 5b       	subi	r26, 0xB5	; 181
    4fd2:	bf 4f       	sbci	r27, 0xFF	; 255
    4fd4:	fe 01       	movw	r30, r28
    4fd6:	e5 5b       	subi	r30, 0xB5	; 181
    4fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4fda:	80 81       	ld	r24, Z
    4fdc:	91 81       	ldd	r25, Z+1	; 0x01
    4fde:	01 96       	adiw	r24, 0x01	; 1
    4fe0:	11 96       	adiw	r26, 0x01	; 1
    4fe2:	9c 93       	st	X, r25
    4fe4:	8e 93       	st	-X, r24
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e9 58       	subi	r30, 0x89	; 137
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	20 81       	ld	r18, Z
    4fee:	31 81       	ldd	r19, Z+1	; 0x01
    4ff0:	fe 01       	movw	r30, r28
    4ff2:	e5 5b       	subi	r30, 0xB5	; 181
    4ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff6:	80 81       	ld	r24, Z
    4ff8:	91 81       	ldd	r25, Z+1	; 0x01
    4ffa:	82 17       	cp	r24, r18
    4ffc:	93 07       	cpc	r25, r19
    4ffe:	bc f2       	brlt	.-82     	; 0x4fae <my_invoker+0x75a>
    5000:	34 c2       	rjmp	.+1128   	; 0x546a <my_invoker+0xc16>
            lcd_wr_char(*(ch+i));
        }
        return;
    }
	
	else if (command == SET_PORT){
    5002:	fe 01       	movw	r30, r28
    5004:	ef 57       	subi	r30, 0x7F	; 127
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	80 81       	ld	r24, Z
    500a:	81 32       	cpi	r24, 0x21	; 33
    500c:	81 f5       	brne	.+96     	; 0x506e <my_invoker+0x81a>
    	int numargs;
    	unsigned char * ch = recieve_args(&numargs); ; 
    500e:	ce 01       	movw	r24, r28
    5010:	87 58       	subi	r24, 0x87	; 135
    5012:	9f 4f       	sbci	r25, 0xFF	; 255
    5014:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    5018:	fe 01       	movw	r30, r28
    501a:	e7 5b       	subi	r30, 0xB7	; 183
    501c:	ff 4f       	sbci	r31, 0xFF	; 255
    501e:	91 83       	std	Z+1, r25	; 0x01
    5020:	80 83       	st	Z, r24
    	if (numargs != 2){
   
	    }
    	int portnum = (int) *(ch);
    5022:	fe 01       	movw	r30, r28
    5024:	e7 5b       	subi	r30, 0xB7	; 183
    5026:	ff 4f       	sbci	r31, 0xFF	; 255
    5028:	01 90       	ld	r0, Z+
    502a:	f0 81       	ld	r31, Z
    502c:	e0 2d       	mov	r30, r0
    502e:	80 81       	ld	r24, Z
    5030:	fe 01       	movw	r30, r28
    5032:	e9 5b       	subi	r30, 0xB9	; 185
    5034:	ff 4f       	sbci	r31, 0xFF	; 255
    5036:	88 2f       	mov	r24, r24
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	91 83       	std	Z+1, r25	; 0x01
    503c:	80 83       	st	Z, r24
    	unsigned char value = (unsigned char) *(ch+1); 
    503e:	fe 01       	movw	r30, r28
    5040:	e7 5b       	subi	r30, 0xB7	; 183
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	80 81       	ld	r24, Z
    5046:	91 81       	ldd	r25, Z+1	; 0x01
    5048:	fc 01       	movw	r30, r24
    504a:	31 96       	adiw	r30, 0x01	; 1
    504c:	de 01       	movw	r26, r28
    504e:	aa 5b       	subi	r26, 0xBA	; 186
    5050:	bf 4f       	sbci	r27, 0xFF	; 255
    5052:	80 81       	ld	r24, Z
    5054:	8c 93       	st	X, r24
    
		setPort(portnum,value);
    5056:	fe 01       	movw	r30, r28
    5058:	e9 5b       	subi	r30, 0xB9	; 185
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	80 81       	ld	r24, Z
    505e:	91 81       	ldd	r25, Z+1	; 0x01
    5060:	fe 01       	movw	r30, r28
    5062:	ea 5b       	subi	r30, 0xBA	; 186
    5064:	ff 4f       	sbci	r31, 0xFF	; 255
    5066:	60 81       	ld	r22, Z
    5068:	0e 94 f3 21 	call	0x43e6	; 0x43e6 <setPort>
    506c:	fe c1       	rjmp	.+1020   	; 0x546a <my_invoker+0xc16>
    }

    else if(command == GET_SENSOR_VALUE)
    506e:	fe 01       	movw	r30, r28
    5070:	ef 57       	subi	r30, 0x7F	; 127
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	80 81       	ld	r24, Z
    5076:	82 32       	cpi	r24, 0x22	; 34
    5078:	01 f5       	brne	.+64     	; 0x50ba <my_invoker+0x866>
    {
    	int numargs;
    	unsigned char * ch = recieve_args(&numargs); ; 
    507a:	ce 01       	movw	r24, r28
    507c:	85 58       	subi	r24, 0x85	; 133
    507e:	9f 4f       	sbci	r25, 0xFF	; 255
    5080:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    5084:	fe 01       	movw	r30, r28
    5086:	ec 5b       	subi	r30, 0xBC	; 188
    5088:	ff 4f       	sbci	r31, 0xFF	; 255
    508a:	91 83       	std	Z+1, r25	; 0x01
    508c:	80 83       	st	Z, r24
    	if (numargs != 1){
   
	    }
    	int sensornum = (int) *(ch);
    508e:	fe 01       	movw	r30, r28
    5090:	ec 5b       	subi	r30, 0xBC	; 188
    5092:	ff 4f       	sbci	r31, 0xFF	; 255
    5094:	01 90       	ld	r0, Z+
    5096:	f0 81       	ld	r31, Z
    5098:	e0 2d       	mov	r30, r0
    509a:	80 81       	ld	r24, Z
    509c:	fe 01       	movw	r30, r28
    509e:	ee 5b       	subi	r30, 0xBE	; 190
    50a0:	ff 4f       	sbci	r31, 0xFF	; 255
    50a2:	88 2f       	mov	r24, r24
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	91 83       	std	Z+1, r25	; 0x01
    50a8:	80 83       	st	Z, r24
    
		//setPort(portnum,value);
		getSensorValue(sensornum);
    50aa:	fe 01       	movw	r30, r28
    50ac:	ee 5b       	subi	r30, 0xBE	; 190
    50ae:	ff 4f       	sbci	r31, 0xFF	; 255
    50b0:	80 81       	ld	r24, Z
    50b2:	91 81       	ldd	r25, Z+1	; 0x01
    50b4:	0e 94 c7 23 	call	0x478e	; 0x478e <getSensorValue>
    50b8:	d8 c1       	rjmp	.+944    	; 0x546a <my_invoker+0xc16>
       
    }
    else if(command == GET_PORT)
    50ba:	fe 01       	movw	r30, r28
    50bc:	ef 57       	subi	r30, 0x7F	; 127
    50be:	ff 4f       	sbci	r31, 0xFF	; 255
    50c0:	80 81       	ld	r24, Z
    50c2:	83 32       	cpi	r24, 0x23	; 35
    50c4:	d1 f4       	brne	.+52     	; 0x50fa <my_invoker+0x8a6>
    {
      	int numargs;
    	unsigned char * ch = recieve_args(&numargs); ; 
    50c6:	ce 01       	movw	r24, r28
    50c8:	83 58       	subi	r24, 0x83	; 131
    50ca:	9f 4f       	sbci	r25, 0xFF	; 255
    50cc:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    50d0:	fe 01       	movw	r30, r28
    50d2:	e0 5c       	subi	r30, 0xC0	; 192
    50d4:	ff 4f       	sbci	r31, 0xFF	; 255
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	80 83       	st	Z, r24
    	if (numargs != 1){
   
	    }
    	int portnum = (int) *(ch); 
    50da:	fe 01       	movw	r30, r28
    50dc:	e0 5c       	subi	r30, 0xC0	; 192
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	01 90       	ld	r0, Z+
    50e2:	f0 81       	ld	r31, Z
    50e4:	e0 2d       	mov	r30, r0
    50e6:	80 81       	ld	r24, Z
    50e8:	88 2f       	mov	r24, r24
    50ea:	90 e0       	ldi	r25, 0x00	; 0
    50ec:	9f af       	std	Y+63, r25	; 0x3f
    50ee:	8e af       	std	Y+62, r24	; 0x3e
    
		getPort(portnum);
    50f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    50f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    50f4:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <getPort>
    50f8:	b8 c1       	rjmp	.+880    	; 0x546a <my_invoker+0xc16>
        
    }
    else if (command == WHITELINE_FOLLOW_START) {
    50fa:	fe 01       	movw	r30, r28
    50fc:	ef 57       	subi	r30, 0x7F	; 127
    50fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5100:	80 81       	ld	r24, Z
    5102:	8a 34       	cpi	r24, 0x4A	; 74
    5104:	19 f4       	brne	.+6      	; 0x510c <my_invoker+0x8b8>
		whiteline_follow_start();
    5106:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <whiteline_follow_start>
    510a:	af c1       	rjmp	.+862    	; 0x546a <my_invoker+0xc16>
	}
	else if(command == PRINT_STATE){
    510c:	fe 01       	movw	r30, r28
    510e:	ef 57       	subi	r30, 0x7F	; 127
    5110:	ff 4f       	sbci	r31, 0xFF	; 255
    5112:	80 81       	ld	r24, Z
    5114:	8a 35       	cpi	r24, 0x5A	; 90
    5116:	09 f0       	breq	.+2      	; 0x511a <my_invoker+0x8c6>
    5118:	7d c0       	rjmp	.+250    	; 0x5214 <my_invoker+0x9c0>
		buzzer_on();
    511a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
		lcd_num(state);
    511e:	80 91 8f 03 	lds	r24, 0x038F
    5122:	90 91 90 03 	lds	r25, 0x0390
    5126:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	aa e7       	ldi	r26, 0x7A	; 122
    5130:	b4 e4       	ldi	r27, 0x44	; 68
    5132:	89 8f       	std	Y+25, r24	; 0x19
    5134:	9a 8f       	std	Y+26, r25	; 0x1a
    5136:	ab 8f       	std	Y+27, r26	; 0x1b
    5138:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    513a:	69 8d       	ldd	r22, Y+25	; 0x19
    513c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    513e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5142:	2d ec       	ldi	r18, 0xCD	; 205
    5144:	3c ec       	ldi	r19, 0xCC	; 204
    5146:	4c e2       	ldi	r20, 0x2C	; 44
    5148:	55 e4       	ldi	r21, 0x45	; 69
    514a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	8d 8b       	std	Y+21, r24	; 0x15
    5154:	9e 8b       	std	Y+22, r25	; 0x16
    5156:	af 8b       	std	Y+23, r26	; 0x17
    5158:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    515a:	6d 89       	ldd	r22, Y+21	; 0x15
    515c:	7e 89       	ldd	r23, Y+22	; 0x16
    515e:	8f 89       	ldd	r24, Y+23	; 0x17
    5160:	98 8d       	ldd	r25, Y+24	; 0x18
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	40 e8       	ldi	r20, 0x80	; 128
    5168:	5f e3       	ldi	r21, 0x3F	; 63
    516a:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    516e:	88 23       	and	r24, r24
    5170:	2c f4       	brge	.+10     	; 0x517c <my_invoker+0x928>
		__ticks = 1;
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	9c 8b       	std	Y+20, r25	; 0x14
    5178:	8b 8b       	std	Y+19, r24	; 0x13
    517a:	3f c0       	rjmp	.+126    	; 0x51fa <my_invoker+0x9a6>
	else if (__tmp > 65535)
    517c:	6d 89       	ldd	r22, Y+21	; 0x15
    517e:	7e 89       	ldd	r23, Y+22	; 0x16
    5180:	8f 89       	ldd	r24, Y+23	; 0x17
    5182:	98 8d       	ldd	r25, Y+24	; 0x18
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	3f ef       	ldi	r19, 0xFF	; 255
    5188:	4f e7       	ldi	r20, 0x7F	; 127
    518a:	57 e4       	ldi	r21, 0x47	; 71
    518c:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    5190:	18 16       	cp	r1, r24
    5192:	4c f5       	brge	.+82     	; 0x51e6 <my_invoker+0x992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5194:	69 8d       	ldd	r22, Y+25	; 0x19
    5196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    519a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	40 e2       	ldi	r20, 0x20	; 32
    51a2:	51 e4       	ldi	r21, 0x41	; 65
    51a4:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    51b4:	dc 01       	movw	r26, r24
    51b6:	cb 01       	movw	r24, r22
    51b8:	9c 8b       	std	Y+20, r25	; 0x14
    51ba:	8b 8b       	std	Y+19, r24	; 0x13
    51bc:	0f c0       	rjmp	.+30     	; 0x51dc <my_invoker+0x988>
    51be:	84 e1       	ldi	r24, 0x14	; 20
    51c0:	91 e0       	ldi	r25, 0x01	; 1
    51c2:	9a 8b       	std	Y+18, r25	; 0x12
    51c4:	89 8b       	std	Y+17, r24	; 0x11
    51c6:	89 89       	ldd	r24, Y+17	; 0x11
    51c8:	9a 89       	ldd	r25, Y+18	; 0x12
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	f1 f7       	brne	.-4      	; 0x51ca <my_invoker+0x976>
    51ce:	9a 8b       	std	Y+18, r25	; 0x12
    51d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d2:	8b 89       	ldd	r24, Y+19	; 0x13
    51d4:	9c 89       	ldd	r25, Y+20	; 0x14
    51d6:	01 97       	sbiw	r24, 0x01	; 1
    51d8:	9c 8b       	std	Y+20, r25	; 0x14
    51da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51dc:	8b 89       	ldd	r24, Y+19	; 0x13
    51de:	9c 89       	ldd	r25, Y+20	; 0x14
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	69 f7       	brne	.-38     	; 0x51be <my_invoker+0x96a>
    51e4:	14 c0       	rjmp	.+40     	; 0x520e <my_invoker+0x9ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51e6:	6d 89       	ldd	r22, Y+21	; 0x15
    51e8:	7e 89       	ldd	r23, Y+22	; 0x16
    51ea:	8f 89       	ldd	r24, Y+23	; 0x17
    51ec:	98 8d       	ldd	r25, Y+24	; 0x18
    51ee:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	9c 8b       	std	Y+20, r25	; 0x14
    51f8:	8b 8b       	std	Y+19, r24	; 0x13
    51fa:	8b 89       	ldd	r24, Y+19	; 0x13
    51fc:	9c 89       	ldd	r25, Y+20	; 0x14
    51fe:	98 8b       	std	Y+16, r25	; 0x10
    5200:	8f 87       	std	Y+15, r24	; 0x0f
    5202:	8f 85       	ldd	r24, Y+15	; 0x0f
    5204:	98 89       	ldd	r25, Y+16	; 0x10
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	f1 f7       	brne	.-4      	; 0x5206 <my_invoker+0x9b2>
    520a:	98 8b       	std	Y+16, r25	; 0x10
    520c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		buzzer_off();
    520e:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    5212:	2b c1       	rjmp	.+598    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == WHITELINE_FOLLOW_END) {
    5214:	fe 01       	movw	r30, r28
    5216:	ef 57       	subi	r30, 0x7F	; 127
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	80 81       	ld	r24, Z
    521c:	8b 34       	cpi	r24, 0x4B	; 75
    521e:	19 f4       	brne	.+6      	; 0x5226 <my_invoker+0x9d2>
		whiteline_follow_end();
    5220:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <whiteline_follow_end>
    5224:	22 c1       	rjmp	.+580    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == WHITELINE_STOP_INTERSECTION) {
    5226:	fe 01       	movw	r30, r28
    5228:	ef 57       	subi	r30, 0x7F	; 127
    522a:	ff 4f       	sbci	r31, 0xFF	; 255
    522c:	80 81       	ld	r24, Z
    522e:	8c 34       	cpi	r24, 0x4C	; 76
    5230:	21 f4       	brne	.+8      	; 0x523a <my_invoker+0x9e6>
		whiteline_stop_intersection_flag = 1;
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	80 93 7c 03 	sts	0x037C, r24
    5238:	18 c1       	rjmp	.+560    	; 0x546a <my_invoker+0xc16>
	}
    else if(command == ACC_START) {
    523a:	fe 01       	movw	r30, r28
    523c:	ef 57       	subi	r30, 0x7F	; 127
    523e:	ff 4f       	sbci	r31, 0xFF	; 255
    5240:	80 81       	ld	r24, Z
    5242:	8d 34       	cpi	r24, 0x4D	; 77
    5244:	21 f4       	brne	.+8      	; 0x524e <my_invoker+0x9fa>
   		acc_flag = 1;
    5246:	81 e0       	ldi	r24, 0x01	; 1
    5248:	80 93 81 03 	sts	0x0381, r24
    524c:	0e c1       	rjmp	.+540    	; 0x546a <my_invoker+0xc16>
		
   
    }
	else if(command == ACC_STOP) {
    524e:	fe 01       	movw	r30, r28
    5250:	ef 57       	subi	r30, 0x7F	; 127
    5252:	ff 4f       	sbci	r31, 0xFF	; 255
    5254:	80 81       	ld	r24, Z
    5256:	8e 34       	cpi	r24, 0x4E	; 78
    5258:	39 f4       	brne	.+14     	; 0x5268 <my_invoker+0xa14>
		acc_flag = 0;
    525a:	10 92 81 03 	sts	0x0381, r1
		acc_modified_flag = 0;
    525e:	10 92 82 03 	sts	0x0382, r1
		buzzer_off();
    5262:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
    5266:	01 c1       	rjmp	.+514    	; 0x546a <my_invoker+0xc16>
	}
	else if(command == ACC_MODIFIED){
    5268:	fe 01       	movw	r30, r28
    526a:	ef 57       	subi	r30, 0x7F	; 127
    526c:	ff 4f       	sbci	r31, 0xFF	; 255
    526e:	80 81       	ld	r24, Z
    5270:	80 35       	cpi	r24, 0x50	; 80
    5272:	31 f4       	brne	.+12     	; 0x5280 <my_invoker+0xa2c>
		acc_modified_flag = 1;
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	80 93 82 03 	sts	0x0382, r24
		already_modified_stopped = 0;
    527a:	10 92 63 03 	sts	0x0363, r1
    527e:	f5 c0       	rjmp	.+490    	; 0x546a <my_invoker+0xc16>
	}
	else if(command == ACC_CHECK){
    5280:	fe 01       	movw	r30, r28
    5282:	ef 57       	subi	r30, 0x7F	; 127
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	80 81       	ld	r24, Z
    5288:	8f 34       	cpi	r24, 0x4F	; 79
    528a:	d9 f4       	brne	.+54     	; 0x52c2 <my_invoker+0xa6e>
		if (acc_modified_flag == 1 && already_modified_stopped == 1){
    528c:	80 91 82 03 	lds	r24, 0x0382
    5290:	81 30       	cpi	r24, 0x01	; 1
    5292:	41 f4       	brne	.+16     	; 0x52a4 <my_invoker+0xa50>
    5294:	80 91 63 03 	lds	r24, 0x0363
    5298:	81 30       	cpi	r24, 0x01	; 1
    529a:	21 f4       	brne	.+8      	; 0x52a4 <my_invoker+0xa50>
			send_char((char)1);
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
    52a2:	e3 c0       	rjmp	.+454    	; 0x546a <my_invoker+0xc16>
		}
		else {
			char value = PORTA;
    52a4:	e2 e2       	ldi	r30, 0x22	; 34
    52a6:	f0 e0       	ldi	r31, 0x00	; 0
    52a8:	80 81       	ld	r24, Z
    52aa:	8d af       	std	Y+61, r24	; 0x3d
			if (value == 0) send_char((char)2);
    52ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    52ae:	88 23       	and	r24, r24
    52b0:	21 f4       	brne	.+8      	; 0x52ba <my_invoker+0xa66>
    52b2:	82 e0       	ldi	r24, 0x02	; 2
    52b4:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
    52b8:	d8 c0       	rjmp	.+432    	; 0x546a <my_invoker+0xc16>
			else send_char((char)0);
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	0e 94 13 18 	call	0x3026	; 0x3026 <send_char>
    52c0:	d4 c0       	rjmp	.+424    	; 0x546a <my_invoker+0xc16>
		}
	}
	else if (command == ENABLE_LEFT_WHEEL_INTERRUPT) {
    52c2:	fe 01       	movw	r30, r28
    52c4:	ef 57       	subi	r30, 0x7F	; 127
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	83 35       	cpi	r24, 0x53	; 83
    52cc:	39 f4       	brne	.+14     	; 0x52dc <my_invoker+0xa88>
		leftInt = 0;
    52ce:	10 92 74 03 	sts	0x0374, r1
    52d2:	10 92 73 03 	sts	0x0373, r1
		left_position_encoder_interrupt_init();
    52d6:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <left_position_encoder_interrupt_init>
    52da:	c7 c0       	rjmp	.+398    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == ENABLE_RIGHT_WHEEL_INTERRUPT) {
    52dc:	fe 01       	movw	r30, r28
    52de:	ef 57       	subi	r30, 0x7F	; 127
    52e0:	ff 4f       	sbci	r31, 0xFF	; 255
    52e2:	80 81       	ld	r24, Z
    52e4:	84 35       	cpi	r24, 0x54	; 84
    52e6:	39 f4       	brne	.+14     	; 0x52f6 <my_invoker+0xaa2>
		rightInt = 0;
    52e8:	10 92 76 03 	sts	0x0376, r1
    52ec:	10 92 75 03 	sts	0x0375, r1
		right_position_encoder_interrupt_init();
    52f0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <right_position_encoder_interrupt_init>
    52f4:	ba c0       	rjmp	.+372    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == GET_LEFT_WHEEL_INTERRUPT_COUNT) {
    52f6:	fe 01       	movw	r30, r28
    52f8:	ef 57       	subi	r30, 0x7F	; 127
    52fa:	ff 4f       	sbci	r31, 0xFF	; 255
    52fc:	80 81       	ld	r24, Z
    52fe:	81 35       	cpi	r24, 0x51	; 81
    5300:	59 f4       	brne	.+22     	; 0x5318 <my_invoker+0xac4>
		send_int (leftInt);
    5302:	80 91 73 03 	lds	r24, 0x0373
    5306:	90 91 74 03 	lds	r25, 0x0374
    530a:	0e 94 20 18 	call	0x3040	; 0x3040 <send_int>
		leftInt = 0;
    530e:	10 92 74 03 	sts	0x0374, r1
    5312:	10 92 73 03 	sts	0x0373, r1
    5316:	a9 c0       	rjmp	.+338    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == GET_RIGHT_WHEEL_INTERRUPT_COUNT) {
    5318:	fe 01       	movw	r30, r28
    531a:	ef 57       	subi	r30, 0x7F	; 127
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	80 81       	ld	r24, Z
    5320:	82 35       	cpi	r24, 0x52	; 82
    5322:	59 f4       	brne	.+22     	; 0x533a <my_invoker+0xae6>
		send_int (rightInt);
    5324:	80 91 75 03 	lds	r24, 0x0375
    5328:	90 91 76 03 	lds	r25, 0x0376
    532c:	0e 94 20 18 	call	0x3040	; 0x3040 <send_int>
		rightInt = 0;
    5330:	10 92 76 03 	sts	0x0376, r1
    5334:	10 92 75 03 	sts	0x0375, r1
    5338:	98 c0       	rjmp	.+304    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == SET_TIMER) {
    533a:	fe 01       	movw	r30, r28
    533c:	ef 57       	subi	r30, 0x7F	; 127
    533e:	ff 4f       	sbci	r31, 0xFF	; 255
    5340:	80 81       	ld	r24, Z
    5342:	85 35       	cpi	r24, 0x55	; 85
    5344:	99 f4       	brne	.+38     	; 0x536c <my_invoker+0xb18>
	int numargs;
    	unsigned char * ch = recieve_args(&numargs); ; 
    5346:	ce 01       	movw	r24, r28
    5348:	81 58       	subi	r24, 0x81	; 129
    534a:	9f 4f       	sbci	r25, 0xFF	; 255
    534c:	0e 94 8f 21 	call	0x431e	; 0x431e <recieve_args>
    5350:	9c af       	std	Y+60, r25	; 0x3c
    5352:	8b af       	std	Y+59, r24	; 0x3b
    	if (numargs != 1){
   
	    }
    	int time = (int) *(ch); 
    5354:	eb ad       	ldd	r30, Y+59	; 0x3b
    5356:	fc ad       	ldd	r31, Y+60	; 0x3c
    5358:	80 81       	ld	r24, Z
    535a:	88 2f       	mov	r24, r24
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	9a af       	std	Y+58, r25	; 0x3a
    5360:	89 af       	std	Y+57, r24	; 0x39
    
		timer4_init2(time);
    5362:	89 ad       	ldd	r24, Y+57	; 0x39
    5364:	9a ad       	ldd	r25, Y+58	; 0x3a
    5366:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <timer4_init2>
    536a:	7f c0       	rjmp	.+254    	; 0x546a <my_invoker+0xc16>
	}
	else if (command == DISCONNECT) {
    536c:	fe 01       	movw	r30, r28
    536e:	ef 57       	subi	r30, 0x7F	; 127
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	80 81       	ld	r24, Z
    5374:	88 37       	cpi	r24, 0x78	; 120
    5376:	19 f4       	brne	.+6      	; 0x537e <my_invoker+0xb2a>
		disconnect();
    5378:	0e 94 db 23 	call	0x47b6	; 0x47b6 <disconnect>
    537c:	76 c0       	rjmp	.+236    	; 0x546a <my_invoker+0xc16>
	}
	else { //Error!!! Unrecognized Command
		buzzer_on();
    537e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <buzzer_on>
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	aa e7       	ldi	r26, 0x7A	; 122
    5388:	b4 e4       	ldi	r27, 0x44	; 68
    538a:	8b 87       	std	Y+11, r24	; 0x0b
    538c:	9c 87       	std	Y+12, r25	; 0x0c
    538e:	ad 87       	std	Y+13, r26	; 0x0d
    5390:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5392:	6b 85       	ldd	r22, Y+11	; 0x0b
    5394:	7c 85       	ldd	r23, Y+12	; 0x0c
    5396:	8d 85       	ldd	r24, Y+13	; 0x0d
    5398:	9e 85       	ldd	r25, Y+14	; 0x0e
    539a:	2d ec       	ldi	r18, 0xCD	; 205
    539c:	3c ec       	ldi	r19, 0xCC	; 204
    539e:	4c e2       	ldi	r20, 0x2C	; 44
    53a0:	55 e4       	ldi	r21, 0x45	; 69
    53a2:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	8f 83       	std	Y+7, r24	; 0x07
    53ac:	98 87       	std	Y+8, r25	; 0x08
    53ae:	a9 87       	std	Y+9, r26	; 0x09
    53b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    53b2:	6f 81       	ldd	r22, Y+7	; 0x07
    53b4:	78 85       	ldd	r23, Y+8	; 0x08
    53b6:	89 85       	ldd	r24, Y+9	; 0x09
    53b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ba:	20 e0       	ldi	r18, 0x00	; 0
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	40 e8       	ldi	r20, 0x80	; 128
    53c0:	5f e3       	ldi	r21, 0x3F	; 63
    53c2:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    53c6:	88 23       	and	r24, r24
    53c8:	2c f4       	brge	.+10     	; 0x53d4 <my_invoker+0xb80>
		__ticks = 1;
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	9e 83       	std	Y+6, r25	; 0x06
    53d0:	8d 83       	std	Y+5, r24	; 0x05
    53d2:	3f c0       	rjmp	.+126    	; 0x5452 <my_invoker+0xbfe>
	else if (__tmp > 65535)
    53d4:	6f 81       	ldd	r22, Y+7	; 0x07
    53d6:	78 85       	ldd	r23, Y+8	; 0x08
    53d8:	89 85       	ldd	r24, Y+9	; 0x09
    53da:	9a 85       	ldd	r25, Y+10	; 0x0a
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	3f ef       	ldi	r19, 0xFF	; 255
    53e0:	4f e7       	ldi	r20, 0x7F	; 127
    53e2:	57 e4       	ldi	r21, 0x47	; 71
    53e4:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    53e8:	18 16       	cp	r1, r24
    53ea:	4c f5       	brge	.+82     	; 0x543e <my_invoker+0xbea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    53ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    53f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    53f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    53f4:	20 e0       	ldi	r18, 0x00	; 0
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	40 e2       	ldi	r20, 0x20	; 32
    53fa:	51 e4       	ldi	r21, 0x41	; 65
    53fc:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    5400:	dc 01       	movw	r26, r24
    5402:	cb 01       	movw	r24, r22
    5404:	bc 01       	movw	r22, r24
    5406:	cd 01       	movw	r24, r26
    5408:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	9e 83       	std	Y+6, r25	; 0x06
    5412:	8d 83       	std	Y+5, r24	; 0x05
    5414:	0f c0       	rjmp	.+30     	; 0x5434 <my_invoker+0xbe0>
    5416:	84 e1       	ldi	r24, 0x14	; 20
    5418:	91 e0       	ldi	r25, 0x01	; 1
    541a:	9c 83       	std	Y+4, r25	; 0x04
    541c:	8b 83       	std	Y+3, r24	; 0x03
    541e:	8b 81       	ldd	r24, Y+3	; 0x03
    5420:	9c 81       	ldd	r25, Y+4	; 0x04
    5422:	01 97       	sbiw	r24, 0x01	; 1
    5424:	f1 f7       	brne	.-4      	; 0x5422 <my_invoker+0xbce>
    5426:	9c 83       	std	Y+4, r25	; 0x04
    5428:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    542a:	8d 81       	ldd	r24, Y+5	; 0x05
    542c:	9e 81       	ldd	r25, Y+6	; 0x06
    542e:	01 97       	sbiw	r24, 0x01	; 1
    5430:	9e 83       	std	Y+6, r25	; 0x06
    5432:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5434:	8d 81       	ldd	r24, Y+5	; 0x05
    5436:	9e 81       	ldd	r25, Y+6	; 0x06
    5438:	00 97       	sbiw	r24, 0x00	; 0
    543a:	69 f7       	brne	.-38     	; 0x5416 <my_invoker+0xbc2>
    543c:	14 c0       	rjmp	.+40     	; 0x5466 <my_invoker+0xc12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    543e:	6f 81       	ldd	r22, Y+7	; 0x07
    5440:	78 85       	ldd	r23, Y+8	; 0x08
    5442:	89 85       	ldd	r24, Y+9	; 0x09
    5444:	9a 85       	ldd	r25, Y+10	; 0x0a
    5446:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	9e 83       	std	Y+6, r25	; 0x06
    5450:	8d 83       	std	Y+5, r24	; 0x05
    5452:	8d 81       	ldd	r24, Y+5	; 0x05
    5454:	9e 81       	ldd	r25, Y+6	; 0x06
    5456:	9a 83       	std	Y+2, r25	; 0x02
    5458:	89 83       	std	Y+1, r24	; 0x01
    545a:	89 81       	ldd	r24, Y+1	; 0x01
    545c:	9a 81       	ldd	r25, Y+2	; 0x02
    545e:	01 97       	sbiw	r24, 0x01	; 1
    5460:	f1 f7       	brne	.-4      	; 0x545e <my_invoker+0xc0a>
    5462:	9a 83       	std	Y+2, r25	; 0x02
    5464:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		buzzer_off();
    5466:	0e 94 10 0b 	call	0x1620	; 0x1620 <buzzer_off>
	}
}
    546a:	cb 57       	subi	r28, 0x7B	; 123
    546c:	df 4f       	sbci	r29, 0xFF	; 255
    546e:	0f b6       	in	r0, 0x3f	; 63
    5470:	f8 94       	cli
    5472:	de bf       	out	0x3e, r29	; 62
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	cd bf       	out	0x3d, r28	; 61
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	08 95       	ret

0000547e <print_inputs>:

//Debugging function to print the received commands on the lcd
void print_inputs () {
    547e:	df 93       	push	r29
    5480:	cf 93       	push	r28
    5482:	00 d0       	rcall	.+0      	; 0x5484 <print_inputs+0x6>
    5484:	0f 92       	push	r0
    5486:	0f 92       	push	r0
    5488:	cd b7       	in	r28, 0x3d	; 61
    548a:	de b7       	in	r29, 0x3e	; 62
	lcd_clear();
    548c:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_clear>
	int t = command_buf_end - command_buf_start;
    5490:	80 91 89 03 	lds	r24, 0x0389
    5494:	90 91 8a 03 	lds	r25, 0x038A
    5498:	20 91 87 03 	lds	r18, 0x0387
    549c:	30 91 88 03 	lds	r19, 0x0388
    54a0:	82 1b       	sub	r24, r18
    54a2:	93 0b       	sbc	r25, r19
    54a4:	9c 83       	std	Y+4, r25	; 0x04
    54a6:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0;
    54a8:	1a 82       	std	Y+2, r1	; 0x02
    54aa:	19 82       	std	Y+1, r1	; 0x01
    54ac:	0f c0       	rjmp	.+30     	; 0x54cc <print_inputs+0x4e>
	while (t--) {
		lcd_num ((int)command_buf[i]);
    54ae:	89 81       	ldd	r24, Y+1	; 0x01
    54b0:	9a 81       	ldd	r25, Y+2	; 0x02
    54b2:	fc 01       	movw	r30, r24
    54b4:	ee 5c       	subi	r30, 0xCE	; 206
    54b6:	f7 4f       	sbci	r31, 0xF7	; 247
    54b8:	80 81       	ld	r24, Z
    54ba:	88 2f       	mov	r24, r24
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
		i++;
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	9a 81       	ldd	r25, Y+2	; 0x02
    54c6:	01 96       	adiw	r24, 0x01	; 1
    54c8:	9a 83       	std	Y+2, r25	; 0x02
    54ca:	89 83       	std	Y+1, r24	; 0x01
//Debugging function to print the received commands on the lcd
void print_inputs () {
	lcd_clear();
	int t = command_buf_end - command_buf_start;
	int i = 0;
	while (t--) {
    54cc:	1d 82       	std	Y+5, r1	; 0x05
    54ce:	8b 81       	ldd	r24, Y+3	; 0x03
    54d0:	9c 81       	ldd	r25, Y+4	; 0x04
    54d2:	00 97       	sbiw	r24, 0x00	; 0
    54d4:	11 f0       	breq	.+4      	; 0x54da <print_inputs+0x5c>
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	8d 83       	std	Y+5, r24	; 0x05
    54da:	8b 81       	ldd	r24, Y+3	; 0x03
    54dc:	9c 81       	ldd	r25, Y+4	; 0x04
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	9c 83       	std	Y+4, r25	; 0x04
    54e2:	8b 83       	std	Y+3, r24	; 0x03
    54e4:	8d 81       	ldd	r24, Y+5	; 0x05
    54e6:	88 23       	and	r24, r24
    54e8:	11 f7       	brne	.-60     	; 0x54ae <print_inputs+0x30>
		lcd_num ((int)command_buf[i]);
		i++;
	}
	lcd_num (command_buf_start);
    54ea:	80 91 87 03 	lds	r24, 0x0387
    54ee:	90 91 88 03 	lds	r25, 0x0388
    54f2:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
	lcd_num (command_buf_end);
    54f6:	80 91 89 03 	lds	r24, 0x0389
    54fa:	90 91 8a 03 	lds	r25, 0x038A
    54fe:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
	lcd_num (state);
    5502:	80 91 8f 03 	lds	r24, 0x038F
    5506:	90 91 90 03 	lds	r25, 0x0390
    550a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <lcd_num>
	return;
}
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	0f 90       	pop	r0
    5514:	0f 90       	pop	r0
    5516:	0f 90       	pop	r0
    5518:	cf 91       	pop	r28
    551a:	df 91       	pop	r29
    551c:	08 95       	ret

0000551e <process_rcvd_data>:
//This function is called every time the main loop executes
//It takes input data from the received data buffer
//Applies the protocol  and extracts out the commands
//it stores these in the command buffer
//which is then used by the invoker to execute
void process_rcvd_data () {
    551e:	df 93       	push	r29
    5520:	cf 93       	push	r28
    5522:	00 d0       	rcall	.+0      	; 0x5524 <process_rcvd_data+0x6>
    5524:	0f 92       	push	r0
    5526:	0f 92       	push	r0
    5528:	cd b7       	in	r28, 0x3d	; 61
    552a:	de b7       	in	r29, 0x3e	; 62

	int start = rcvd_data_start;
    552c:	80 91 83 03 	lds	r24, 0x0383
    5530:	90 91 84 03 	lds	r25, 0x0384
    5534:	9d 83       	std	Y+5, r25	; 0x05
    5536:	8c 83       	std	Y+4, r24	; 0x04
	int end = rcvd_data_end;
    5538:	80 91 85 03 	lds	r24, 0x0385
    553c:	90 91 86 03 	lds	r25, 0x0386
    5540:	9b 83       	std	Y+3, r25	; 0x03
    5542:	8a 83       	std	Y+2, r24	; 0x02
    5544:	aa c0       	rjmp	.+340    	; 0x569a <process_rcvd_data+0x17c>
	unsigned char data;
	while (start != end) {
		
		data = rcvd_data[start++];
    5546:	8c 81       	ldd	r24, Y+4	; 0x04
    5548:	9d 81       	ldd	r25, Y+5	; 0x05
    554a:	fc 01       	movw	r30, r24
    554c:	e5 54       	subi	r30, 0x45	; 69
    554e:	fc 4f       	sbci	r31, 0xFC	; 252
    5550:	80 81       	ld	r24, Z
    5552:	89 83       	std	Y+1, r24	; 0x01
    5554:	8c 81       	ldd	r24, Y+4	; 0x04
    5556:	9d 81       	ldd	r25, Y+5	; 0x05
    5558:	01 96       	adiw	r24, 0x01	; 1
    555a:	9d 83       	std	Y+5, r25	; 0x05
    555c:	8c 83       	std	Y+4, r24	; 0x04
		if (start == 1024) start = 0;		
    555e:	8c 81       	ldd	r24, Y+4	; 0x04
    5560:	9d 81       	ldd	r25, Y+5	; 0x05
    5562:	24 e0       	ldi	r18, 0x04	; 4
    5564:	80 30       	cpi	r24, 0x00	; 0
    5566:	92 07       	cpc	r25, r18
    5568:	11 f4       	brne	.+4      	; 0x556e <process_rcvd_data+0x50>
    556a:	1d 82       	std	Y+5, r1	; 0x05
    556c:	1c 82       	std	Y+4, r1	; 0x04

		if (expected_127 > 0) {
    556e:	80 91 40 02 	lds	r24, 0x0240
    5572:	90 91 41 02 	lds	r25, 0x0241
    5576:	18 16       	cp	r1, r24
    5578:	19 06       	cpc	r1, r25
    557a:	74 f4       	brge	.+28     	; 0x5598 <process_rcvd_data+0x7a>
			if (data == 127) {
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	8f 37       	cpi	r24, 0x7F	; 127
    5580:	09 f0       	breq	.+2      	; 0x5584 <process_rcvd_data+0x66>
    5582:	8b c0       	rjmp	.+278    	; 0x569a <process_rcvd_data+0x17c>
				expected_127--;
    5584:	80 91 40 02 	lds	r24, 0x0240
    5588:	90 91 41 02 	lds	r25, 0x0241
    558c:	01 97       	sbiw	r24, 0x01	; 1
    558e:	90 93 41 02 	sts	0x0241, r25
    5592:	80 93 40 02 	sts	0x0240, r24
    5596:	81 c0       	rjmp	.+258    	; 0x569a <process_rcvd_data+0x17c>
			}
			continue;
		}

		command_buf[command_buf_end] = data;
    5598:	80 91 89 03 	lds	r24, 0x0389
    559c:	90 91 8a 03 	lds	r25, 0x038A
    55a0:	fc 01       	movw	r30, r24
    55a2:	ee 5c       	subi	r30, 0xCE	; 206
    55a4:	f7 4f       	sbci	r31, 0xF7	; 247
    55a6:	89 81       	ldd	r24, Y+1	; 0x01
    55a8:	80 83       	st	Z, r24
		command_buf_end++;
    55aa:	80 91 89 03 	lds	r24, 0x0389
    55ae:	90 91 8a 03 	lds	r25, 0x038A
    55b2:	01 96       	adiw	r24, 0x01	; 1
    55b4:	90 93 8a 03 	sts	0x038A, r25
    55b8:	80 93 89 03 	sts	0x0389, r24
		if (command_buf_end == 1024) command_buf_end = 0;
    55bc:	80 91 89 03 	lds	r24, 0x0389
    55c0:	90 91 8a 03 	lds	r25, 0x038A
    55c4:	24 e0       	ldi	r18, 0x04	; 4
    55c6:	80 30       	cpi	r24, 0x00	; 0
    55c8:	92 07       	cpc	r25, r18
    55ca:	21 f4       	brne	.+8      	; 0x55d4 <process_rcvd_data+0xb6>
    55cc:	10 92 8a 03 	sts	0x038A, r1
    55d0:	10 92 89 03 	sts	0x0389, r1

		/* check if you are done with the current command */
		if (--bytes_remaining) continue;
    55d4:	80 91 3e 02 	lds	r24, 0x023E
    55d8:	90 91 3f 02 	lds	r25, 0x023F
    55dc:	01 97       	sbiw	r24, 0x01	; 1
    55de:	90 93 3f 02 	sts	0x023F, r25
    55e2:	80 93 3e 02 	sts	0x023E, r24
    55e6:	80 91 3e 02 	lds	r24, 0x023E
    55ea:	90 91 3f 02 	lds	r25, 0x023F
    55ee:	00 97       	sbiw	r24, 0x00	; 0
    55f0:	09 f0       	breq	.+2      	; 0x55f4 <process_rcvd_data+0xd6>
    55f2:	53 c0       	rjmp	.+166    	; 0x569a <process_rcvd_data+0x17c>
		
		/* next state */
		if (state == START_BYTE){
    55f4:	80 91 8f 03 	lds	r24, 0x038F
    55f8:	90 91 90 03 	lds	r25, 0x0390
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	f1 f4       	brne	.+60     	; 0x563c <process_rcvd_data+0x11e>
				
			if (!(data & 0xC0)){ //multiple bytes expected
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	88 2f       	mov	r24, r24
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	80 7c       	andi	r24, 0xC0	; 192
    5608:	90 70       	andi	r25, 0x00	; 0
    560a:	00 97       	sbiw	r24, 0x00	; 0
    560c:	39 f4       	brne	.+14     	; 0x561c <process_rcvd_data+0xfe>
				state = SIZE_BYTE;
    560e:	81 e0       	ldi	r24, 0x01	; 1
    5610:	90 e0       	ldi	r25, 0x00	; 0
    5612:	90 93 90 03 	sts	0x0390, r25
    5616:	80 93 8f 03 	sts	0x038F, r24
    561a:	09 c0       	rjmp	.+18     	; 0x562e <process_rcvd_data+0x110>
			}
			else command_rcvd++;
    561c:	80 91 79 03 	lds	r24, 0x0379
    5620:	90 91 7a 03 	lds	r25, 0x037A
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	90 93 7a 03 	sts	0x037A, r25
    562a:	80 93 79 03 	sts	0x0379, r24
			bytes_remaining = 1;
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	90 93 3f 02 	sts	0x023F, r25
    5636:	80 93 3e 02 	sts	0x023E, r24
    563a:	2f c0       	rjmp	.+94     	; 0x569a <process_rcvd_data+0x17c>
		}
		else if (state == SIZE_BYTE){
    563c:	80 91 8f 03 	lds	r24, 0x038F
    5640:	90 91 90 03 	lds	r25, 0x0390
    5644:	81 30       	cpi	r24, 0x01	; 1
    5646:	91 05       	cpc	r25, r1
    5648:	71 f4       	brne	.+28     	; 0x5666 <process_rcvd_data+0x148>
			bytes_remaining = data;
    564a:	89 81       	ldd	r24, Y+1	; 0x01
    564c:	88 2f       	mov	r24, r24
    564e:	90 e0       	ldi	r25, 0x00	; 0
    5650:	90 93 3f 02 	sts	0x023F, r25
    5654:	80 93 3e 02 	sts	0x023E, r24
			//buzzer_prompt();
			state = MULT_BYTE;
    5658:	82 e0       	ldi	r24, 0x02	; 2
    565a:	90 e0       	ldi	r25, 0x00	; 0
    565c:	90 93 90 03 	sts	0x0390, r25
    5660:	80 93 8f 03 	sts	0x038F, r24
    5664:	1a c0       	rjmp	.+52     	; 0x569a <process_rcvd_data+0x17c>
		} 
		else if (state == MULT_BYTE){
    5666:	80 91 8f 03 	lds	r24, 0x038F
    566a:	90 91 90 03 	lds	r25, 0x0390
    566e:	82 30       	cpi	r24, 0x02	; 2
    5670:	91 05       	cpc	r25, r1
    5672:	99 f4       	brne	.+38     	; 0x569a <process_rcvd_data+0x17c>
			bytes_remaining = 1;
    5674:	81 e0       	ldi	r24, 0x01	; 1
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	90 93 3f 02 	sts	0x023F, r25
    567c:	80 93 3e 02 	sts	0x023E, r24
			state = START_BYTE;
    5680:	10 92 90 03 	sts	0x0390, r1
    5684:	10 92 8f 03 	sts	0x038F, r1
			command_rcvd++;
    5688:	80 91 79 03 	lds	r24, 0x0379
    568c:	90 91 7a 03 	lds	r25, 0x037A
    5690:	01 96       	adiw	r24, 0x01	; 1
    5692:	90 93 7a 03 	sts	0x037A, r25
    5696:	80 93 79 03 	sts	0x0379, r24
void process_rcvd_data () {

	int start = rcvd_data_start;
	int end = rcvd_data_end;
	unsigned char data;
	while (start != end) {
    569a:	2c 81       	ldd	r18, Y+4	; 0x04
    569c:	3d 81       	ldd	r19, Y+5	; 0x05
    569e:	8a 81       	ldd	r24, Y+2	; 0x02
    56a0:	9b 81       	ldd	r25, Y+3	; 0x03
    56a2:	28 17       	cp	r18, r24
    56a4:	39 07       	cpc	r19, r25
    56a6:	09 f0       	breq	.+2      	; 0x56aa <process_rcvd_data+0x18c>
    56a8:	4e cf       	rjmp	.-356    	; 0x5546 <process_rcvd_data+0x28>
			bytes_remaining = 1;
			state = START_BYTE;
			command_rcvd++;
		}
	}
	rcvd_data_start = start;
    56aa:	8c 81       	ldd	r24, Y+4	; 0x04
    56ac:	9d 81       	ldd	r25, Y+5	; 0x05
    56ae:	90 93 84 03 	sts	0x0384, r25
    56b2:	80 93 83 03 	sts	0x0383, r24
}
    56b6:	0f 90       	pop	r0
    56b8:	0f 90       	pop	r0
    56ba:	0f 90       	pop	r0
    56bc:	0f 90       	pop	r0
    56be:	0f 90       	pop	r0
    56c0:	cf 91       	pop	r28
    56c2:	df 91       	pop	r29
    56c4:	08 95       	ret

000056c6 <main>:

//The main loop!
int main()
{
    56c6:	df 93       	push	r29
    56c8:	cf 93       	push	r28
    56ca:	cd b7       	in	r28, 0x3d	; 61
    56cc:	de b7       	in	r29, 0x3e	; 62
    56ce:	61 97       	sbiw	r28, 0x11	; 17
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	f8 94       	cli
    56d4:	de bf       	out	0x3e, r29	; 62
    56d6:	0f be       	out	0x3f, r0	; 63
    56d8:	cd bf       	out	0x3d, r28	; 61
	//Initialize all devices
	init_devices();
    56da:	0e 94 2e 21 	call	0x425c	; 0x425c <init_devices>
	lcd_set_4bit();
    56de:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
    56e2:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
	leftVel=100;
    56e6:	84 e6       	ldi	r24, 0x64	; 100
    56e8:	80 93 b1 03 	sts	0x03B1, r24
	rightVel=100;
    56ec:	84 e6       	ldi	r24, 0x64	; 100
    56ee:	80 93 b4 03 	sts	0x03B4, r24
	functionFlag=0;
    56f2:	10 92 6b 03 	sts	0x036B, r1
    56f6:	10 92 6c 03 	sts	0x036C, r1
    56fa:	10 92 6d 03 	sts	0x036D, r1
    56fe:	10 92 6e 03 	sts	0x036E, r1
    5702:	10 92 6f 03 	sts	0x036F, r1
    5706:	10 92 70 03 	sts	0x0370, r1
    570a:	10 92 71 03 	sts	0x0371, r1
    570e:	10 92 72 03 	sts	0x0372, r1

	while(1)
	{	
		//Extract out commands from received data
		process_rcvd_data();
    5712:	0e 94 8f 2a 	call	0x551e	; 0x551e <process_rcvd_data>

		//Perform certain actions according to the state of the Firebird
		if (white_line_flag) {
    5716:	80 91 7b 03 	lds	r24, 0x037B
    571a:	88 23       	and	r24, r24
    571c:	11 f0       	breq	.+4      	; 0x5722 <main+0x5c>
			whiteline_follow_continue();
    571e:	0e 94 31 1c 	call	0x3862	; 0x3862 <whiteline_follow_continue>
		}

		if (acc_flag) {
    5722:	80 91 81 03 	lds	r24, 0x0381
    5726:	88 23       	and	r24, r24
    5728:	11 f0       	breq	.+4      	; 0x572e <main+0x68>
			acc_continue();
    572a:	0e 94 a3 20 	call	0x4146	; 0x4146 <acc_continue>
		}
		
		if (acc_modified_flag) {			
    572e:	80 91 82 03 	lds	r24, 0x0382
    5732:	88 23       	and	r24, r24
    5734:	11 f0       	breq	.+4      	; 0x573a <main+0x74>
			acc_modified();
    5736:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <acc_modified>
		}	
		
		//If there exists a command on the command buffer, call the invoker on it
		if(command_rcvd >= 1){
    573a:	80 91 79 03 	lds	r24, 0x0379
    573e:	90 91 7a 03 	lds	r25, 0x037A
    5742:	18 16       	cp	r1, r24
    5744:	19 06       	cpc	r1, r25
    5746:	2c f7       	brge	.-54     	; 0x5712 <main+0x4c>
			unsigned char a;
			int error = get_char_from_input(&a);
    5748:	ce 01       	movw	r24, r28
    574a:	41 96       	adiw	r24, 0x11	; 17
    574c:	0e 94 4c 21 	call	0x4298	; 0x4298 <get_char_from_input>
    5750:	98 8b       	std	Y+16, r25	; 0x10
    5752:	8f 87       	std	Y+15, r24	; 0x0f
			if (error == -1) {
    5754:	8f 85       	ldd	r24, Y+15	; 0x0f
    5756:	98 89       	ldd	r25, Y+16	; 0x10
    5758:	2f ef       	ldi	r18, 0xFF	; 255
    575a:	8f 3f       	cpi	r24, 0xFF	; 255
    575c:	92 07       	cpc	r25, r18
    575e:	09 f0       	breq	.+2      	; 0x5762 <main+0x9c>
    5760:	84 c0       	rjmp	.+264    	; 0x586a <main+0x1a4>
				//lcd_string("ERROR");
				buzzer_prompt(1000);
    5762:	88 ee       	ldi	r24, 0xE8	; 232
    5764:	93 e0       	ldi	r25, 0x03	; 3
    5766:	0e 94 25 0b 	call	0x164a	; 0x164a <buzzer_prompt>
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	aa e7       	ldi	r26, 0x7A	; 122
    5770:	b4 e4       	ldi	r27, 0x44	; 68
    5772:	8b 87       	std	Y+11, r24	; 0x0b
    5774:	9c 87       	std	Y+12, r25	; 0x0c
    5776:	ad 87       	std	Y+13, r26	; 0x0d
    5778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577a:	6b 85       	ldd	r22, Y+11	; 0x0b
    577c:	7c 85       	ldd	r23, Y+12	; 0x0c
    577e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5780:	9e 85       	ldd	r25, Y+14	; 0x0e
    5782:	2d ec       	ldi	r18, 0xCD	; 205
    5784:	3c ec       	ldi	r19, 0xCC	; 204
    5786:	4c e2       	ldi	r20, 0x2C	; 44
    5788:	55 e4       	ldi	r21, 0x45	; 69
    578a:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	8f 83       	std	Y+7, r24	; 0x07
    5794:	98 87       	std	Y+8, r25	; 0x08
    5796:	a9 87       	std	Y+9, r26	; 0x09
    5798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    579a:	6f 81       	ldd	r22, Y+7	; 0x07
    579c:	78 85       	ldd	r23, Y+8	; 0x08
    579e:	89 85       	ldd	r24, Y+9	; 0x09
    57a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e8       	ldi	r20, 0x80	; 128
    57a8:	5f e3       	ldi	r21, 0x3F	; 63
    57aa:	0e 94 83 40 	call	0x8106	; 0x8106 <__ltsf2>
    57ae:	88 23       	and	r24, r24
    57b0:	2c f4       	brge	.+10     	; 0x57bc <main+0xf6>
		__ticks = 1;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	9e 83       	std	Y+6, r25	; 0x06
    57b8:	8d 83       	std	Y+5, r24	; 0x05
    57ba:	3f c0       	rjmp	.+126    	; 0x583a <main+0x174>
	else if (__tmp > 65535)
    57bc:	6f 81       	ldd	r22, Y+7	; 0x07
    57be:	78 85       	ldd	r23, Y+8	; 0x08
    57c0:	89 85       	ldd	r24, Y+9	; 0x09
    57c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    57c4:	20 e0       	ldi	r18, 0x00	; 0
    57c6:	3f ef       	ldi	r19, 0xFF	; 255
    57c8:	4f e7       	ldi	r20, 0x7F	; 127
    57ca:	57 e4       	ldi	r21, 0x47	; 71
    57cc:	0e 94 23 40 	call	0x8046	; 0x8046 <__gtsf2>
    57d0:	18 16       	cp	r1, r24
    57d2:	4c f5       	brge	.+82     	; 0x5826 <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    57d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    57d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    57da:	9e 85       	ldd	r25, Y+14	; 0x0e
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	40 e2       	ldi	r20, 0x20	; 32
    57e2:	51 e4       	ldi	r21, 0x41	; 65
    57e4:	0e 94 7d 3e 	call	0x7cfa	; 0x7cfa <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9e 83       	std	Y+6, r25	; 0x06
    57fa:	8d 83       	std	Y+5, r24	; 0x05
    57fc:	0f c0       	rjmp	.+30     	; 0x581c <main+0x156>
    57fe:	84 e1       	ldi	r24, 0x14	; 20
    5800:	91 e0       	ldi	r25, 0x01	; 1
    5802:	9c 83       	std	Y+4, r25	; 0x04
    5804:	8b 83       	std	Y+3, r24	; 0x03
    5806:	8b 81       	ldd	r24, Y+3	; 0x03
    5808:	9c 81       	ldd	r25, Y+4	; 0x04
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <main+0x144>
    580e:	9c 83       	std	Y+4, r25	; 0x04
    5810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5812:	8d 81       	ldd	r24, Y+5	; 0x05
    5814:	9e 81       	ldd	r25, Y+6	; 0x06
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	9e 83       	std	Y+6, r25	; 0x06
    581a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581c:	8d 81       	ldd	r24, Y+5	; 0x05
    581e:	9e 81       	ldd	r25, Y+6	; 0x06
    5820:	00 97       	sbiw	r24, 0x00	; 0
    5822:	69 f7       	brne	.-38     	; 0x57fe <main+0x138>
    5824:	14 c0       	rjmp	.+40     	; 0x584e <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5826:	6f 81       	ldd	r22, Y+7	; 0x07
    5828:	78 85       	ldd	r23, Y+8	; 0x08
    582a:	89 85       	ldd	r24, Y+9	; 0x09
    582c:	9a 85       	ldd	r25, Y+10	; 0x0a
    582e:	0e 94 42 2c 	call	0x5884	; 0x5884 <__fixunssfsi>
    5832:	dc 01       	movw	r26, r24
    5834:	cb 01       	movw	r24, r22
    5836:	9e 83       	std	Y+6, r25	; 0x06
    5838:	8d 83       	std	Y+5, r24	; 0x05
    583a:	8d 81       	ldd	r24, Y+5	; 0x05
    583c:	9e 81       	ldd	r25, Y+6	; 0x06
    583e:	9a 83       	std	Y+2, r25	; 0x02
    5840:	89 83       	std	Y+1, r24	; 0x01
    5842:	89 81       	ldd	r24, Y+1	; 0x01
    5844:	9a 81       	ldd	r25, Y+2	; 0x02
    5846:	01 97       	sbiw	r24, 0x01	; 1
    5848:	f1 f7       	brne	.-4      	; 0x5846 <main+0x180>
    584a:	9a 83       	std	Y+2, r25	; 0x02
    584c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				buzzer_prompt(1000);
    584e:	88 ee       	ldi	r24, 0xE8	; 232
    5850:	93 e0       	ldi	r25, 0x03	; 3
    5852:	0e 94 25 0b 	call	0x164a	; 0x164a <buzzer_prompt>
				command_rcvd--;
    5856:	80 91 79 03 	lds	r24, 0x0379
    585a:	90 91 7a 03 	lds	r25, 0x037A
    585e:	01 97       	sbiw	r24, 0x01	; 1
    5860:	90 93 7a 03 	sts	0x037A, r25
    5864:	80 93 79 03 	sts	0x0379, r24
    5868:	54 cf       	rjmp	.-344    	; 0x5712 <main+0x4c>
				continue;
			}
			//lcd_num(a);
			my_invoker(a);
    586a:	89 89       	ldd	r24, Y+17	; 0x11
    586c:	0e 94 2a 24 	call	0x4854	; 0x4854 <my_invoker>
			command_rcvd--;
    5870:	80 91 79 03 	lds	r24, 0x0379
    5874:	90 91 7a 03 	lds	r25, 0x037A
    5878:	01 97       	sbiw	r24, 0x01	; 1
    587a:	90 93 7a 03 	sts	0x037A, r25
    587e:	80 93 79 03 	sts	0x0379, r24
    5882:	47 cf       	rjmp	.-370    	; 0x5712 <main+0x4c>

00005884 <__fixunssfsi>:
    5884:	ef 92       	push	r14
    5886:	ff 92       	push	r15
    5888:	0f 93       	push	r16
    588a:	1f 93       	push	r17
    588c:	7b 01       	movw	r14, r22
    588e:	8c 01       	movw	r16, r24
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e0       	ldi	r20, 0x00	; 0
    5896:	5f e4       	ldi	r21, 0x4F	; 79
    5898:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__gesf2>
    589c:	88 23       	and	r24, r24
    589e:	8c f0       	brlt	.+34     	; 0x58c2 <__fixunssfsi+0x3e>
    58a0:	c8 01       	movw	r24, r16
    58a2:	b7 01       	movw	r22, r14
    58a4:	20 e0       	ldi	r18, 0x00	; 0
    58a6:	30 e0       	ldi	r19, 0x00	; 0
    58a8:	40 e0       	ldi	r20, 0x00	; 0
    58aa:	5f e4       	ldi	r21, 0x4F	; 79
    58ac:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <__subsf3>
    58b0:	0e 94 11 41 	call	0x8222	; 0x8222 <__fixsfsi>
    58b4:	9b 01       	movw	r18, r22
    58b6:	ac 01       	movw	r20, r24
    58b8:	20 50       	subi	r18, 0x00	; 0
    58ba:	30 40       	sbci	r19, 0x00	; 0
    58bc:	40 40       	sbci	r20, 0x00	; 0
    58be:	50 48       	sbci	r21, 0x80	; 128
    58c0:	06 c0       	rjmp	.+12     	; 0x58ce <__fixunssfsi+0x4a>
    58c2:	c8 01       	movw	r24, r16
    58c4:	b7 01       	movw	r22, r14
    58c6:	0e 94 11 41 	call	0x8222	; 0x8222 <__fixsfsi>
    58ca:	9b 01       	movw	r18, r22
    58cc:	ac 01       	movw	r20, r24
    58ce:	b9 01       	movw	r22, r18
    58d0:	ca 01       	movw	r24, r20
    58d2:	1f 91       	pop	r17
    58d4:	0f 91       	pop	r16
    58d6:	ff 90       	pop	r15
    58d8:	ef 90       	pop	r14
    58da:	08 95       	ret

000058dc <__divdi3>:
    58dc:	a2 e7       	ldi	r26, 0x72	; 114
    58de:	b0 e0       	ldi	r27, 0x00	; 0
    58e0:	e4 e7       	ldi	r30, 0x74	; 116
    58e2:	fc e2       	ldi	r31, 0x2C	; 44
    58e4:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <__prologue_saves__>
    58e8:	98 2e       	mov	r9, r24
    58ea:	89 2e       	mov	r8, r25
    58ec:	71 2e       	mov	r7, r17
    58ee:	88 e0       	ldi	r24, 0x08	; 8
    58f0:	fe 01       	movw	r30, r28
    58f2:	31 96       	adiw	r30, 0x01	; 1
    58f4:	df 01       	movw	r26, r30
    58f6:	68 2e       	mov	r6, r24
    58f8:	1d 92       	st	X+, r1
    58fa:	6a 94       	dec	r6
    58fc:	e9 f7       	brne	.-6      	; 0x58f8 <__divdi3+0x1c>
    58fe:	29 83       	std	Y+1, r18	; 0x01
    5900:	3a 83       	std	Y+2, r19	; 0x02
    5902:	4b 83       	std	Y+3, r20	; 0x03
    5904:	5c 83       	std	Y+4, r21	; 0x04
    5906:	6d 83       	std	Y+5, r22	; 0x05
    5908:	7e 83       	std	Y+6, r23	; 0x06
    590a:	9f 82       	std	Y+7, r9	; 0x07
    590c:	98 87       	std	Y+8, r25	; 0x08
    590e:	fe 01       	movw	r30, r28
    5910:	39 96       	adiw	r30, 0x09	; 9
    5912:	df 01       	movw	r26, r30
    5914:	1d 92       	st	X+, r1
    5916:	8a 95       	dec	r24
    5918:	e9 f7       	brne	.-6      	; 0x5914 <__divdi3+0x38>
    591a:	a9 86       	std	Y+9, r10	; 0x09
    591c:	ba 86       	std	Y+10, r11	; 0x0a
    591e:	cb 86       	std	Y+11, r12	; 0x0b
    5920:	dc 86       	std	Y+12, r13	; 0x0c
    5922:	ed 86       	std	Y+13, r14	; 0x0d
    5924:	fe 86       	std	Y+14, r15	; 0x0e
    5926:	0f 87       	std	Y+15, r16	; 0x0f
    5928:	18 8b       	std	Y+16, r17	; 0x10
    592a:	8d 81       	ldd	r24, Y+5	; 0x05
    592c:	9e 81       	ldd	r25, Y+6	; 0x06
    592e:	af 81       	ldd	r26, Y+7	; 0x07
    5930:	b8 85       	ldd	r27, Y+8	; 0x08
    5932:	b7 fd       	sbrc	r27, 7
    5934:	07 c0       	rjmp	.+14     	; 0x5944 <__divdi3+0x68>
    5936:	e1 96       	adiw	r28, 0x31	; 49
    5938:	1c ae       	std	Y+60, r1	; 0x3c
    593a:	1d ae       	std	Y+61, r1	; 0x3d
    593c:	1e ae       	std	Y+62, r1	; 0x3e
    593e:	1f ae       	std	Y+63, r1	; 0x3f
    5940:	e1 97       	sbiw	r28, 0x31	; 49
    5942:	64 c0       	rjmp	.+200    	; 0x5a0c <__divdi3+0x130>
    5944:	21 95       	neg	r18
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	12 16       	cp	r1, r18
    594a:	08 f0       	brcs	.+2      	; 0x594e <__divdi3+0x72>
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	31 95       	neg	r19
    5950:	91 e0       	ldi	r25, 0x01	; 1
    5952:	13 16       	cp	r1, r19
    5954:	08 f0       	brcs	.+2      	; 0x5958 <__divdi3+0x7c>
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	b3 2f       	mov	r27, r19
    595a:	b8 1b       	sub	r27, r24
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	3b 17       	cp	r19, r27
    5960:	08 f0       	brcs	.+2      	; 0x5964 <__divdi3+0x88>
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	98 2b       	or	r25, r24
    5966:	41 95       	neg	r20
    5968:	31 e0       	ldi	r19, 0x01	; 1
    596a:	14 16       	cp	r1, r20
    596c:	08 f0       	brcs	.+2      	; 0x5970 <__divdi3+0x94>
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	a4 2f       	mov	r26, r20
    5972:	a9 1b       	sub	r26, r25
    5974:	81 e0       	ldi	r24, 0x01	; 1
    5976:	4a 17       	cp	r20, r26
    5978:	08 f0       	brcs	.+2      	; 0x597c <__divdi3+0xa0>
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	38 2b       	or	r19, r24
    597e:	51 95       	neg	r21
    5980:	91 e0       	ldi	r25, 0x01	; 1
    5982:	15 16       	cp	r1, r21
    5984:	08 f0       	brcs	.+2      	; 0x5988 <__divdi3+0xac>
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	f5 2f       	mov	r31, r21
    598a:	f3 1b       	sub	r31, r19
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	5f 17       	cp	r21, r31
    5990:	08 f0       	brcs	.+2      	; 0x5994 <__divdi3+0xb8>
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	98 2b       	or	r25, r24
    5996:	61 95       	neg	r22
    5998:	31 e0       	ldi	r19, 0x01	; 1
    599a:	16 16       	cp	r1, r22
    599c:	08 f0       	brcs	.+2      	; 0x59a0 <__divdi3+0xc4>
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	e6 2f       	mov	r30, r22
    59a2:	e9 1b       	sub	r30, r25
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	6e 17       	cp	r22, r30
    59a8:	08 f0       	brcs	.+2      	; 0x59ac <__divdi3+0xd0>
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	38 2b       	or	r19, r24
    59ae:	71 95       	neg	r23
    59b0:	41 e0       	ldi	r20, 0x01	; 1
    59b2:	17 16       	cp	r1, r23
    59b4:	08 f0       	brcs	.+2      	; 0x59b8 <__divdi3+0xdc>
    59b6:	40 e0       	ldi	r20, 0x00	; 0
    59b8:	57 2f       	mov	r21, r23
    59ba:	53 1b       	sub	r21, r19
    59bc:	81 e0       	ldi	r24, 0x01	; 1
    59be:	75 17       	cp	r23, r21
    59c0:	08 f0       	brcs	.+2      	; 0x59c4 <__divdi3+0xe8>
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	48 2b       	or	r20, r24
    59c6:	89 2d       	mov	r24, r9
    59c8:	81 95       	neg	r24
    59ca:	91 e0       	ldi	r25, 0x01	; 1
    59cc:	18 16       	cp	r1, r24
    59ce:	08 f0       	brcs	.+2      	; 0x59d2 <__divdi3+0xf6>
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	68 2e       	mov	r6, r24
    59d4:	64 1a       	sub	r6, r20
    59d6:	46 2d       	mov	r20, r6
    59d8:	31 e0       	ldi	r19, 0x01	; 1
    59da:	86 15       	cp	r24, r6
    59dc:	08 f0       	brcs	.+2      	; 0x59e0 <__divdi3+0x104>
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	93 2b       	or	r25, r19
    59e2:	88 2d       	mov	r24, r8
    59e4:	81 95       	neg	r24
    59e6:	89 1b       	sub	r24, r25
    59e8:	29 83       	std	Y+1, r18	; 0x01
    59ea:	ba 83       	std	Y+2, r27	; 0x02
    59ec:	ab 83       	std	Y+3, r26	; 0x03
    59ee:	fc 83       	std	Y+4, r31	; 0x04
    59f0:	ed 83       	std	Y+5, r30	; 0x05
    59f2:	5e 83       	std	Y+6, r21	; 0x06
    59f4:	4f 83       	std	Y+7, r20	; 0x07
    59f6:	88 87       	std	Y+8, r24	; 0x08
    59f8:	2f ef       	ldi	r18, 0xFF	; 255
    59fa:	3f ef       	ldi	r19, 0xFF	; 255
    59fc:	4f ef       	ldi	r20, 0xFF	; 255
    59fe:	5f ef       	ldi	r21, 0xFF	; 255
    5a00:	e1 96       	adiw	r28, 0x31	; 49
    5a02:	2c af       	std	Y+60, r18	; 0x3c
    5a04:	3d af       	std	Y+61, r19	; 0x3d
    5a06:	4e af       	std	Y+62, r20	; 0x3e
    5a08:	5f af       	std	Y+63, r21	; 0x3f
    5a0a:	e1 97       	sbiw	r28, 0x31	; 49
    5a0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a10:	af 85       	ldd	r26, Y+15	; 0x0f
    5a12:	b8 89       	ldd	r27, Y+16	; 0x10
    5a14:	b7 ff       	sbrs	r27, 7
    5a16:	6a c0       	rjmp	.+212    	; 0x5aec <__divdi3+0x210>
    5a18:	e1 96       	adiw	r28, 0x31	; 49
    5a1a:	4c ad       	ldd	r20, Y+60	; 0x3c
    5a1c:	5d ad       	ldd	r21, Y+61	; 0x3d
    5a1e:	6e ad       	ldd	r22, Y+62	; 0x3e
    5a20:	7f ad       	ldd	r23, Y+63	; 0x3f
    5a22:	e1 97       	sbiw	r28, 0x31	; 49
    5a24:	40 95       	com	r20
    5a26:	50 95       	com	r21
    5a28:	60 95       	com	r22
    5a2a:	70 95       	com	r23
    5a2c:	e1 96       	adiw	r28, 0x31	; 49
    5a2e:	4c af       	std	Y+60, r20	; 0x3c
    5a30:	5d af       	std	Y+61, r21	; 0x3d
    5a32:	6e af       	std	Y+62, r22	; 0x3e
    5a34:	7f af       	std	Y+63, r23	; 0x3f
    5a36:	e1 97       	sbiw	r28, 0x31	; 49
    5a38:	a1 94       	neg	r10
    5a3a:	81 e0       	ldi	r24, 0x01	; 1
    5a3c:	1a 14       	cp	r1, r10
    5a3e:	08 f0       	brcs	.+2      	; 0x5a42 <__divdi3+0x166>
    5a40:	80 e0       	ldi	r24, 0x00	; 0
    5a42:	b1 94       	neg	r11
    5a44:	91 e0       	ldi	r25, 0x01	; 1
    5a46:	1b 14       	cp	r1, r11
    5a48:	08 f0       	brcs	.+2      	; 0x5a4c <__divdi3+0x170>
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	6b 2d       	mov	r22, r11
    5a4e:	68 1b       	sub	r22, r24
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	b6 16       	cp	r11, r22
    5a54:	08 f0       	brcs	.+2      	; 0x5a58 <__divdi3+0x17c>
    5a56:	80 e0       	ldi	r24, 0x00	; 0
    5a58:	98 2b       	or	r25, r24
    5a5a:	c1 94       	neg	r12
    5a5c:	21 e0       	ldi	r18, 0x01	; 1
    5a5e:	1c 14       	cp	r1, r12
    5a60:	08 f0       	brcs	.+2      	; 0x5a64 <__divdi3+0x188>
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	5c 2d       	mov	r21, r12
    5a66:	59 1b       	sub	r21, r25
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	c5 16       	cp	r12, r21
    5a6c:	08 f0       	brcs	.+2      	; 0x5a70 <__divdi3+0x194>
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	28 2b       	or	r18, r24
    5a72:	d1 94       	neg	r13
    5a74:	91 e0       	ldi	r25, 0x01	; 1
    5a76:	1d 14       	cp	r1, r13
    5a78:	08 f0       	brcs	.+2      	; 0x5a7c <__divdi3+0x1a0>
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	4d 2d       	mov	r20, r13
    5a7e:	42 1b       	sub	r20, r18
    5a80:	81 e0       	ldi	r24, 0x01	; 1
    5a82:	d4 16       	cp	r13, r20
    5a84:	08 f0       	brcs	.+2      	; 0x5a88 <__divdi3+0x1ac>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	98 2b       	or	r25, r24
    5a8a:	e1 94       	neg	r14
    5a8c:	21 e0       	ldi	r18, 0x01	; 1
    5a8e:	1e 14       	cp	r1, r14
    5a90:	08 f0       	brcs	.+2      	; 0x5a94 <__divdi3+0x1b8>
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	3e 2d       	mov	r19, r14
    5a96:	39 1b       	sub	r19, r25
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	e3 16       	cp	r14, r19
    5a9c:	08 f0       	brcs	.+2      	; 0x5aa0 <__divdi3+0x1c4>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	28 2b       	or	r18, r24
    5aa2:	f1 94       	neg	r15
    5aa4:	91 e0       	ldi	r25, 0x01	; 1
    5aa6:	1f 14       	cp	r1, r15
    5aa8:	08 f0       	brcs	.+2      	; 0x5aac <__divdi3+0x1d0>
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	7f 2d       	mov	r23, r15
    5aae:	72 1b       	sub	r23, r18
    5ab0:	27 2f       	mov	r18, r23
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	f7 16       	cp	r15, r23
    5ab6:	08 f0       	brcs	.+2      	; 0x5aba <__divdi3+0x1de>
    5ab8:	80 e0       	ldi	r24, 0x00	; 0
    5aba:	98 2b       	or	r25, r24
    5abc:	01 95       	neg	r16
    5abe:	11 e0       	ldi	r17, 0x01	; 1
    5ac0:	10 16       	cp	r1, r16
    5ac2:	08 f0       	brcs	.+2      	; 0x5ac6 <__divdi3+0x1ea>
    5ac4:	10 e0       	ldi	r17, 0x00	; 0
    5ac6:	80 2f       	mov	r24, r16
    5ac8:	89 1b       	sub	r24, r25
    5aca:	98 2f       	mov	r25, r24
    5acc:	81 e0       	ldi	r24, 0x01	; 1
    5ace:	09 17       	cp	r16, r25
    5ad0:	08 f0       	brcs	.+2      	; 0x5ad4 <__divdi3+0x1f8>
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	18 2b       	or	r17, r24
    5ad6:	87 2d       	mov	r24, r7
    5ad8:	81 95       	neg	r24
    5ada:	81 1b       	sub	r24, r17
    5adc:	a9 86       	std	Y+9, r10	; 0x09
    5ade:	6a 87       	std	Y+10, r22	; 0x0a
    5ae0:	5b 87       	std	Y+11, r21	; 0x0b
    5ae2:	4c 87       	std	Y+12, r20	; 0x0c
    5ae4:	3d 87       	std	Y+13, r19	; 0x0d
    5ae6:	2e 87       	std	Y+14, r18	; 0x0e
    5ae8:	9f 87       	std	Y+15, r25	; 0x0f
    5aea:	88 8b       	std	Y+16, r24	; 0x10
    5aec:	99 81       	ldd	r25, Y+1	; 0x01
    5aee:	2a 81       	ldd	r18, Y+2	; 0x02
    5af0:	3b 81       	ldd	r19, Y+3	; 0x03
    5af2:	4c 81       	ldd	r20, Y+4	; 0x04
    5af4:	5d 81       	ldd	r21, Y+5	; 0x05
    5af6:	6e 81       	ldd	r22, Y+6	; 0x06
    5af8:	7f 81       	ldd	r23, Y+7	; 0x07
    5afa:	a8 85       	ldd	r26, Y+8	; 0x08
    5afc:	b9 85       	ldd	r27, Y+9	; 0x09
    5afe:	1a 85       	ldd	r17, Y+10	; 0x0a
    5b00:	0b 85       	ldd	r16, Y+11	; 0x0b
    5b02:	fc 84       	ldd	r15, Y+12	; 0x0c
    5b04:	ed 84       	ldd	r14, Y+13	; 0x0d
    5b06:	de 84       	ldd	r13, Y+14	; 0x0e
    5b08:	cf 84       	ldd	r12, Y+15	; 0x0f
    5b0a:	b8 88       	ldd	r11, Y+16	; 0x10
    5b0c:	88 e0       	ldi	r24, 0x08	; 8
    5b0e:	e1 e1       	ldi	r30, 0x11	; 17
    5b10:	8e 2e       	mov	r8, r30
    5b12:	91 2c       	mov	r9, r1
    5b14:	8c 0e       	add	r8, r28
    5b16:	9d 1e       	adc	r9, r29
    5b18:	f4 01       	movw	r30, r8
    5b1a:	68 2e       	mov	r6, r24
    5b1c:	11 92       	st	Z+, r1
    5b1e:	6a 94       	dec	r6
    5b20:	e9 f7       	brne	.-6      	; 0x5b1c <__divdi3+0x240>
    5b22:	99 8b       	std	Y+17, r25	; 0x11
    5b24:	2a 8b       	std	Y+18, r18	; 0x12
    5b26:	3b 8b       	std	Y+19, r19	; 0x13
    5b28:	4c 8b       	std	Y+20, r20	; 0x14
    5b2a:	5d 8b       	std	Y+21, r21	; 0x15
    5b2c:	6e 8b       	std	Y+22, r22	; 0x16
    5b2e:	7f 8b       	std	Y+23, r23	; 0x17
    5b30:	a8 8f       	std	Y+24, r26	; 0x18
    5b32:	9e 01       	movw	r18, r28
    5b34:	27 5e       	subi	r18, 0xE7	; 231
    5b36:	3f 4f       	sbci	r19, 0xFF	; 255
    5b38:	f9 01       	movw	r30, r18
    5b3a:	11 92       	st	Z+, r1
    5b3c:	8a 95       	dec	r24
    5b3e:	e9 f7       	brne	.-6      	; 0x5b3a <__divdi3+0x25e>
    5b40:	b9 8f       	std	Y+25, r27	; 0x19
    5b42:	1a 8f       	std	Y+26, r17	; 0x1a
    5b44:	0b 8f       	std	Y+27, r16	; 0x1b
    5b46:	fc 8e       	std	Y+28, r15	; 0x1c
    5b48:	ed 8e       	std	Y+29, r14	; 0x1d
    5b4a:	de 8e       	std	Y+30, r13	; 0x1e
    5b4c:	cf 8e       	std	Y+31, r12	; 0x1f
    5b4e:	b8 a2       	std	Y+32, r11	; 0x20
    5b50:	29 8c       	ldd	r2, Y+25	; 0x19
    5b52:	3a 8c       	ldd	r3, Y+26	; 0x1a
    5b54:	4b 8c       	ldd	r4, Y+27	; 0x1b
    5b56:	5c 8c       	ldd	r5, Y+28	; 0x1c
    5b58:	ed 8c       	ldd	r14, Y+29	; 0x1d
    5b5a:	fe 8c       	ldd	r15, Y+30	; 0x1e
    5b5c:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5b5e:	18 a1       	ldd	r17, Y+32	; 0x20
    5b60:	69 88       	ldd	r6, Y+17	; 0x11
    5b62:	7a 88       	ldd	r7, Y+18	; 0x12
    5b64:	8b 88       	ldd	r8, Y+19	; 0x13
    5b66:	9c 88       	ldd	r9, Y+20	; 0x14
    5b68:	21 96       	adiw	r28, 0x01	; 1
    5b6a:	6c ae       	std	Y+60, r6	; 0x3c
    5b6c:	7d ae       	std	Y+61, r7	; 0x3d
    5b6e:	8e ae       	std	Y+62, r8	; 0x3e
    5b70:	9f ae       	std	Y+63, r9	; 0x3f
    5b72:	21 97       	sbiw	r28, 0x01	; 1
    5b74:	6d 88       	ldd	r6, Y+21	; 0x15
    5b76:	7e 88       	ldd	r7, Y+22	; 0x16
    5b78:	8f 88       	ldd	r8, Y+23	; 0x17
    5b7a:	98 8c       	ldd	r9, Y+24	; 0x18
    5b7c:	e1 14       	cp	r14, r1
    5b7e:	f1 04       	cpc	r15, r1
    5b80:	01 05       	cpc	r16, r1
    5b82:	11 05       	cpc	r17, r1
    5b84:	09 f0       	breq	.+2      	; 0x5b88 <__divdi3+0x2ac>
    5b86:	d9 c3       	rjmp	.+1970   	; 0x633a <__divdi3+0xa5e>
    5b88:	62 14       	cp	r6, r2
    5b8a:	73 04       	cpc	r7, r3
    5b8c:	84 04       	cpc	r8, r4
    5b8e:	95 04       	cpc	r9, r5
    5b90:	08 f0       	brcs	.+2      	; 0x5b94 <__divdi3+0x2b8>
    5b92:	57 c1       	rjmp	.+686    	; 0x5e42 <__divdi3+0x566>
    5b94:	00 e0       	ldi	r16, 0x00	; 0
    5b96:	20 16       	cp	r2, r16
    5b98:	00 e0       	ldi	r16, 0x00	; 0
    5b9a:	30 06       	cpc	r3, r16
    5b9c:	01 e0       	ldi	r16, 0x01	; 1
    5b9e:	40 06       	cpc	r4, r16
    5ba0:	00 e0       	ldi	r16, 0x00	; 0
    5ba2:	50 06       	cpc	r5, r16
    5ba4:	88 f4       	brcc	.+34     	; 0x5bc8 <__divdi3+0x2ec>
    5ba6:	1f ef       	ldi	r17, 0xFF	; 255
    5ba8:	21 16       	cp	r2, r17
    5baa:	31 04       	cpc	r3, r1
    5bac:	41 04       	cpc	r4, r1
    5bae:	51 04       	cpc	r5, r1
    5bb0:	39 f0       	breq	.+14     	; 0x5bc0 <__divdi3+0x2e4>
    5bb2:	30 f0       	brcs	.+12     	; 0x5bc0 <__divdi3+0x2e4>
    5bb4:	48 e0       	ldi	r20, 0x08	; 8
    5bb6:	e4 2e       	mov	r14, r20
    5bb8:	f1 2c       	mov	r15, r1
    5bba:	01 2d       	mov	r16, r1
    5bbc:	11 2d       	mov	r17, r1
    5bbe:	18 c0       	rjmp	.+48     	; 0x5bf0 <__divdi3+0x314>
    5bc0:	ee 24       	eor	r14, r14
    5bc2:	ff 24       	eor	r15, r15
    5bc4:	87 01       	movw	r16, r14
    5bc6:	14 c0       	rjmp	.+40     	; 0x5bf0 <__divdi3+0x314>
    5bc8:	20 e0       	ldi	r18, 0x00	; 0
    5bca:	22 16       	cp	r2, r18
    5bcc:	20 e0       	ldi	r18, 0x00	; 0
    5bce:	32 06       	cpc	r3, r18
    5bd0:	20 e0       	ldi	r18, 0x00	; 0
    5bd2:	42 06       	cpc	r4, r18
    5bd4:	21 e0       	ldi	r18, 0x01	; 1
    5bd6:	52 06       	cpc	r5, r18
    5bd8:	30 f0       	brcs	.+12     	; 0x5be6 <__divdi3+0x30a>
    5bda:	38 e1       	ldi	r19, 0x18	; 24
    5bdc:	e3 2e       	mov	r14, r19
    5bde:	f1 2c       	mov	r15, r1
    5be0:	01 2d       	mov	r16, r1
    5be2:	11 2d       	mov	r17, r1
    5be4:	05 c0       	rjmp	.+10     	; 0x5bf0 <__divdi3+0x314>
    5be6:	20 e1       	ldi	r18, 0x10	; 16
    5be8:	e2 2e       	mov	r14, r18
    5bea:	f1 2c       	mov	r15, r1
    5bec:	01 2d       	mov	r16, r1
    5bee:	11 2d       	mov	r17, r1
    5bf0:	d2 01       	movw	r26, r4
    5bf2:	c1 01       	movw	r24, r2
    5bf4:	0e 2c       	mov	r0, r14
    5bf6:	04 c0       	rjmp	.+8      	; 0x5c00 <__divdi3+0x324>
    5bf8:	b6 95       	lsr	r27
    5bfa:	a7 95       	ror	r26
    5bfc:	97 95       	ror	r25
    5bfe:	87 95       	ror	r24
    5c00:	0a 94       	dec	r0
    5c02:	d2 f7       	brpl	.-12     	; 0x5bf8 <__divdi3+0x31c>
    5c04:	86 5b       	subi	r24, 0xB6	; 182
    5c06:	9d 4f       	sbci	r25, 0xFD	; 253
    5c08:	dc 01       	movw	r26, r24
    5c0a:	2c 91       	ld	r18, X
    5c0c:	80 e2       	ldi	r24, 0x20	; 32
    5c0e:	90 e0       	ldi	r25, 0x00	; 0
    5c10:	a0 e0       	ldi	r26, 0x00	; 0
    5c12:	b0 e0       	ldi	r27, 0x00	; 0
    5c14:	8e 19       	sub	r24, r14
    5c16:	9f 09       	sbc	r25, r15
    5c18:	a0 0b       	sbc	r26, r16
    5c1a:	b1 0b       	sbc	r27, r17
    5c1c:	7c 01       	movw	r14, r24
    5c1e:	8d 01       	movw	r16, r26
    5c20:	e2 1a       	sub	r14, r18
    5c22:	f1 08       	sbc	r15, r1
    5c24:	01 09       	sbc	r16, r1
    5c26:	11 09       	sbc	r17, r1
    5c28:	e1 14       	cp	r14, r1
    5c2a:	f1 04       	cpc	r15, r1
    5c2c:	01 05       	cpc	r16, r1
    5c2e:	11 05       	cpc	r17, r1
    5c30:	d1 f1       	breq	.+116    	; 0x5ca6 <__divdi3+0x3ca>
    5c32:	0e 2c       	mov	r0, r14
    5c34:	04 c0       	rjmp	.+8      	; 0x5c3e <__divdi3+0x362>
    5c36:	22 0c       	add	r2, r2
    5c38:	33 1c       	adc	r3, r3
    5c3a:	44 1c       	adc	r4, r4
    5c3c:	55 1c       	adc	r5, r5
    5c3e:	0a 94       	dec	r0
    5c40:	d2 f7       	brpl	.-12     	; 0x5c36 <__divdi3+0x35a>
    5c42:	a4 01       	movw	r20, r8
    5c44:	93 01       	movw	r18, r6
    5c46:	0e 2c       	mov	r0, r14
    5c48:	04 c0       	rjmp	.+8      	; 0x5c52 <__divdi3+0x376>
    5c4a:	22 0f       	add	r18, r18
    5c4c:	33 1f       	adc	r19, r19
    5c4e:	44 1f       	adc	r20, r20
    5c50:	55 1f       	adc	r21, r21
    5c52:	0a 94       	dec	r0
    5c54:	d2 f7       	brpl	.-12     	; 0x5c4a <__divdi3+0x36e>
    5c56:	80 e2       	ldi	r24, 0x20	; 32
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	8e 19       	sub	r24, r14
    5c5c:	9f 09       	sbc	r25, r15
    5c5e:	21 96       	adiw	r28, 0x01	; 1
    5c60:	6c ac       	ldd	r6, Y+60	; 0x3c
    5c62:	7d ac       	ldd	r7, Y+61	; 0x3d
    5c64:	8e ac       	ldd	r8, Y+62	; 0x3e
    5c66:	9f ac       	ldd	r9, Y+63	; 0x3f
    5c68:	21 97       	sbiw	r28, 0x01	; 1
    5c6a:	04 c0       	rjmp	.+8      	; 0x5c74 <__divdi3+0x398>
    5c6c:	96 94       	lsr	r9
    5c6e:	87 94       	ror	r8
    5c70:	77 94       	ror	r7
    5c72:	67 94       	ror	r6
    5c74:	8a 95       	dec	r24
    5c76:	d2 f7       	brpl	.-12     	; 0x5c6c <__divdi3+0x390>
    5c78:	62 2a       	or	r6, r18
    5c7a:	73 2a       	or	r7, r19
    5c7c:	84 2a       	or	r8, r20
    5c7e:	95 2a       	or	r9, r21
    5c80:	21 96       	adiw	r28, 0x01	; 1
    5c82:	ac ac       	ldd	r10, Y+60	; 0x3c
    5c84:	bd ac       	ldd	r11, Y+61	; 0x3d
    5c86:	ce ac       	ldd	r12, Y+62	; 0x3e
    5c88:	df ac       	ldd	r13, Y+63	; 0x3f
    5c8a:	21 97       	sbiw	r28, 0x01	; 1
    5c8c:	04 c0       	rjmp	.+8      	; 0x5c96 <__divdi3+0x3ba>
    5c8e:	aa 0c       	add	r10, r10
    5c90:	bb 1c       	adc	r11, r11
    5c92:	cc 1c       	adc	r12, r12
    5c94:	dd 1c       	adc	r13, r13
    5c96:	ea 94       	dec	r14
    5c98:	d2 f7       	brpl	.-12     	; 0x5c8e <__divdi3+0x3b2>
    5c9a:	21 96       	adiw	r28, 0x01	; 1
    5c9c:	ac ae       	std	Y+60, r10	; 0x3c
    5c9e:	bd ae       	std	Y+61, r11	; 0x3d
    5ca0:	ce ae       	std	Y+62, r12	; 0x3e
    5ca2:	df ae       	std	Y+63, r13	; 0x3f
    5ca4:	21 97       	sbiw	r28, 0x01	; 1
    5ca6:	62 01       	movw	r12, r4
    5ca8:	ee 24       	eor	r14, r14
    5caa:	ff 24       	eor	r15, r15
    5cac:	29 96       	adiw	r28, 0x09	; 9
    5cae:	cc ae       	std	Y+60, r12	; 0x3c
    5cb0:	dd ae       	std	Y+61, r13	; 0x3d
    5cb2:	ee ae       	std	Y+62, r14	; 0x3e
    5cb4:	ff ae       	std	Y+63, r15	; 0x3f
    5cb6:	29 97       	sbiw	r28, 0x09	; 9
    5cb8:	92 01       	movw	r18, r4
    5cba:	81 01       	movw	r16, r2
    5cbc:	20 70       	andi	r18, 0x00	; 0
    5cbe:	30 70       	andi	r19, 0x00	; 0
    5cc0:	2d 96       	adiw	r28, 0x0d	; 13
    5cc2:	0c af       	std	Y+60, r16	; 0x3c
    5cc4:	1d af       	std	Y+61, r17	; 0x3d
    5cc6:	2e af       	std	Y+62, r18	; 0x3e
    5cc8:	3f af       	std	Y+63, r19	; 0x3f
    5cca:	2d 97       	sbiw	r28, 0x0d	; 13
    5ccc:	c4 01       	movw	r24, r8
    5cce:	b3 01       	movw	r22, r6
    5cd0:	a7 01       	movw	r20, r14
    5cd2:	96 01       	movw	r18, r12
    5cd4:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5cd8:	7b 01       	movw	r14, r22
    5cda:	8c 01       	movw	r16, r24
    5cdc:	c4 01       	movw	r24, r8
    5cde:	b3 01       	movw	r22, r6
    5ce0:	29 96       	adiw	r28, 0x09	; 9
    5ce2:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ce4:	3d ad       	ldd	r19, Y+61	; 0x3d
    5ce6:	4e ad       	ldd	r20, Y+62	; 0x3e
    5ce8:	5f ad       	ldd	r21, Y+63	; 0x3f
    5cea:	29 97       	sbiw	r28, 0x09	; 9
    5cec:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5cf0:	c9 01       	movw	r24, r18
    5cf2:	da 01       	movw	r26, r20
    5cf4:	3c 01       	movw	r6, r24
    5cf6:	4d 01       	movw	r8, r26
    5cf8:	c4 01       	movw	r24, r8
    5cfa:	b3 01       	movw	r22, r6
    5cfc:	2d 96       	adiw	r28, 0x0d	; 13
    5cfe:	2c ad       	ldd	r18, Y+60	; 0x3c
    5d00:	3d ad       	ldd	r19, Y+61	; 0x3d
    5d02:	4e ad       	ldd	r20, Y+62	; 0x3e
    5d04:	5f ad       	ldd	r21, Y+63	; 0x3f
    5d06:	2d 97       	sbiw	r28, 0x0d	; 13
    5d08:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    5d0c:	9b 01       	movw	r18, r22
    5d0e:	ac 01       	movw	r20, r24
    5d10:	87 01       	movw	r16, r14
    5d12:	ff 24       	eor	r15, r15
    5d14:	ee 24       	eor	r14, r14
    5d16:	21 96       	adiw	r28, 0x01	; 1
    5d18:	ac ac       	ldd	r10, Y+60	; 0x3c
    5d1a:	bd ac       	ldd	r11, Y+61	; 0x3d
    5d1c:	ce ac       	ldd	r12, Y+62	; 0x3e
    5d1e:	df ac       	ldd	r13, Y+63	; 0x3f
    5d20:	21 97       	sbiw	r28, 0x01	; 1
    5d22:	c6 01       	movw	r24, r12
    5d24:	aa 27       	eor	r26, r26
    5d26:	bb 27       	eor	r27, r27
    5d28:	57 01       	movw	r10, r14
    5d2a:	68 01       	movw	r12, r16
    5d2c:	a8 2a       	or	r10, r24
    5d2e:	b9 2a       	or	r11, r25
    5d30:	ca 2a       	or	r12, r26
    5d32:	db 2a       	or	r13, r27
    5d34:	a2 16       	cp	r10, r18
    5d36:	b3 06       	cpc	r11, r19
    5d38:	c4 06       	cpc	r12, r20
    5d3a:	d5 06       	cpc	r13, r21
    5d3c:	e0 f4       	brcc	.+56     	; 0x5d76 <__divdi3+0x49a>
    5d3e:	08 94       	sec
    5d40:	61 08       	sbc	r6, r1
    5d42:	71 08       	sbc	r7, r1
    5d44:	81 08       	sbc	r8, r1
    5d46:	91 08       	sbc	r9, r1
    5d48:	a2 0c       	add	r10, r2
    5d4a:	b3 1c       	adc	r11, r3
    5d4c:	c4 1c       	adc	r12, r4
    5d4e:	d5 1c       	adc	r13, r5
    5d50:	a2 14       	cp	r10, r2
    5d52:	b3 04       	cpc	r11, r3
    5d54:	c4 04       	cpc	r12, r4
    5d56:	d5 04       	cpc	r13, r5
    5d58:	70 f0       	brcs	.+28     	; 0x5d76 <__divdi3+0x49a>
    5d5a:	a2 16       	cp	r10, r18
    5d5c:	b3 06       	cpc	r11, r19
    5d5e:	c4 06       	cpc	r12, r20
    5d60:	d5 06       	cpc	r13, r21
    5d62:	48 f4       	brcc	.+18     	; 0x5d76 <__divdi3+0x49a>
    5d64:	08 94       	sec
    5d66:	61 08       	sbc	r6, r1
    5d68:	71 08       	sbc	r7, r1
    5d6a:	81 08       	sbc	r8, r1
    5d6c:	91 08       	sbc	r9, r1
    5d6e:	a2 0c       	add	r10, r2
    5d70:	b3 1c       	adc	r11, r3
    5d72:	c4 1c       	adc	r12, r4
    5d74:	d5 1c       	adc	r13, r5
    5d76:	a2 1a       	sub	r10, r18
    5d78:	b3 0a       	sbc	r11, r19
    5d7a:	c4 0a       	sbc	r12, r20
    5d7c:	d5 0a       	sbc	r13, r21
    5d7e:	c6 01       	movw	r24, r12
    5d80:	b5 01       	movw	r22, r10
    5d82:	29 96       	adiw	r28, 0x09	; 9
    5d84:	2c ad       	ldd	r18, Y+60	; 0x3c
    5d86:	3d ad       	ldd	r19, Y+61	; 0x3d
    5d88:	4e ad       	ldd	r20, Y+62	; 0x3e
    5d8a:	5f ad       	ldd	r21, Y+63	; 0x3f
    5d8c:	29 97       	sbiw	r28, 0x09	; 9
    5d8e:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5d92:	7b 01       	movw	r14, r22
    5d94:	8c 01       	movw	r16, r24
    5d96:	c6 01       	movw	r24, r12
    5d98:	b5 01       	movw	r22, r10
    5d9a:	29 96       	adiw	r28, 0x09	; 9
    5d9c:	2c ad       	ldd	r18, Y+60	; 0x3c
    5d9e:	3d ad       	ldd	r19, Y+61	; 0x3d
    5da0:	4e ad       	ldd	r20, Y+62	; 0x3e
    5da2:	5f ad       	ldd	r21, Y+63	; 0x3f
    5da4:	29 97       	sbiw	r28, 0x09	; 9
    5da6:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5daa:	c9 01       	movw	r24, r18
    5dac:	da 01       	movw	r26, r20
    5dae:	5c 01       	movw	r10, r24
    5db0:	6d 01       	movw	r12, r26
    5db2:	c6 01       	movw	r24, r12
    5db4:	b5 01       	movw	r22, r10
    5db6:	2d 96       	adiw	r28, 0x0d	; 13
    5db8:	2c ad       	ldd	r18, Y+60	; 0x3c
    5dba:	3d ad       	ldd	r19, Y+61	; 0x3d
    5dbc:	4e ad       	ldd	r20, Y+62	; 0x3e
    5dbe:	5f ad       	ldd	r21, Y+63	; 0x3f
    5dc0:	2d 97       	sbiw	r28, 0x0d	; 13
    5dc2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    5dc6:	9b 01       	movw	r18, r22
    5dc8:	ac 01       	movw	r20, r24
    5dca:	87 01       	movw	r16, r14
    5dcc:	ff 24       	eor	r15, r15
    5dce:	ee 24       	eor	r14, r14
    5dd0:	21 96       	adiw	r28, 0x01	; 1
    5dd2:	8c ad       	ldd	r24, Y+60	; 0x3c
    5dd4:	9d ad       	ldd	r25, Y+61	; 0x3d
    5dd6:	ae ad       	ldd	r26, Y+62	; 0x3e
    5dd8:	bf ad       	ldd	r27, Y+63	; 0x3f
    5dda:	21 97       	sbiw	r28, 0x01	; 1
    5ddc:	a0 70       	andi	r26, 0x00	; 0
    5dde:	b0 70       	andi	r27, 0x00	; 0
    5de0:	e8 2a       	or	r14, r24
    5de2:	f9 2a       	or	r15, r25
    5de4:	0a 2b       	or	r16, r26
    5de6:	1b 2b       	or	r17, r27
    5de8:	e2 16       	cp	r14, r18
    5dea:	f3 06       	cpc	r15, r19
    5dec:	04 07       	cpc	r16, r20
    5dee:	15 07       	cpc	r17, r21
    5df0:	c0 f4       	brcc	.+48     	; 0x5e22 <__divdi3+0x546>
    5df2:	08 94       	sec
    5df4:	a1 08       	sbc	r10, r1
    5df6:	b1 08       	sbc	r11, r1
    5df8:	c1 08       	sbc	r12, r1
    5dfa:	d1 08       	sbc	r13, r1
    5dfc:	e2 0c       	add	r14, r2
    5dfe:	f3 1c       	adc	r15, r3
    5e00:	04 1d       	adc	r16, r4
    5e02:	15 1d       	adc	r17, r5
    5e04:	e2 14       	cp	r14, r2
    5e06:	f3 04       	cpc	r15, r3
    5e08:	04 05       	cpc	r16, r4
    5e0a:	15 05       	cpc	r17, r5
    5e0c:	50 f0       	brcs	.+20     	; 0x5e22 <__divdi3+0x546>
    5e0e:	e2 16       	cp	r14, r18
    5e10:	f3 06       	cpc	r15, r19
    5e12:	04 07       	cpc	r16, r20
    5e14:	15 07       	cpc	r17, r21
    5e16:	28 f4       	brcc	.+10     	; 0x5e22 <__divdi3+0x546>
    5e18:	08 94       	sec
    5e1a:	a1 08       	sbc	r10, r1
    5e1c:	b1 08       	sbc	r11, r1
    5e1e:	c1 08       	sbc	r12, r1
    5e20:	d1 08       	sbc	r13, r1
    5e22:	d3 01       	movw	r26, r6
    5e24:	99 27       	eor	r25, r25
    5e26:	88 27       	eor	r24, r24
    5e28:	86 01       	movw	r16, r12
    5e2a:	75 01       	movw	r14, r10
    5e2c:	e8 2a       	or	r14, r24
    5e2e:	f9 2a       	or	r15, r25
    5e30:	0a 2b       	or	r16, r26
    5e32:	1b 2b       	or	r17, r27
    5e34:	25 96       	adiw	r28, 0x05	; 5
    5e36:	ec ae       	std	Y+60, r14	; 0x3c
    5e38:	fd ae       	std	Y+61, r15	; 0x3d
    5e3a:	0e af       	std	Y+62, r16	; 0x3e
    5e3c:	1f af       	std	Y+63, r17	; 0x3f
    5e3e:	25 97       	sbiw	r28, 0x05	; 5
    5e40:	eb c4       	rjmp	.+2518   	; 0x6818 <__divdi3+0xf3c>
    5e42:	21 14       	cp	r2, r1
    5e44:	31 04       	cpc	r3, r1
    5e46:	41 04       	cpc	r4, r1
    5e48:	51 04       	cpc	r5, r1
    5e4a:	71 f4       	brne	.+28     	; 0x5e68 <__divdi3+0x58c>
    5e4c:	61 e0       	ldi	r22, 0x01	; 1
    5e4e:	70 e0       	ldi	r23, 0x00	; 0
    5e50:	80 e0       	ldi	r24, 0x00	; 0
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	40 e0       	ldi	r20, 0x00	; 0
    5e5a:	50 e0       	ldi	r21, 0x00	; 0
    5e5c:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5e60:	c9 01       	movw	r24, r18
    5e62:	da 01       	movw	r26, r20
    5e64:	1c 01       	movw	r2, r24
    5e66:	2d 01       	movw	r4, r26
    5e68:	00 e0       	ldi	r16, 0x00	; 0
    5e6a:	20 16       	cp	r2, r16
    5e6c:	00 e0       	ldi	r16, 0x00	; 0
    5e6e:	30 06       	cpc	r3, r16
    5e70:	01 e0       	ldi	r16, 0x01	; 1
    5e72:	40 06       	cpc	r4, r16
    5e74:	00 e0       	ldi	r16, 0x00	; 0
    5e76:	50 06       	cpc	r5, r16
    5e78:	88 f4       	brcc	.+34     	; 0x5e9c <__divdi3+0x5c0>
    5e7a:	1f ef       	ldi	r17, 0xFF	; 255
    5e7c:	21 16       	cp	r2, r17
    5e7e:	31 04       	cpc	r3, r1
    5e80:	41 04       	cpc	r4, r1
    5e82:	51 04       	cpc	r5, r1
    5e84:	31 f0       	breq	.+12     	; 0x5e92 <__divdi3+0x5b6>
    5e86:	28 f0       	brcs	.+10     	; 0x5e92 <__divdi3+0x5b6>
    5e88:	48 e0       	ldi	r20, 0x08	; 8
    5e8a:	50 e0       	ldi	r21, 0x00	; 0
    5e8c:	60 e0       	ldi	r22, 0x00	; 0
    5e8e:	70 e0       	ldi	r23, 0x00	; 0
    5e90:	17 c0       	rjmp	.+46     	; 0x5ec0 <__divdi3+0x5e4>
    5e92:	40 e0       	ldi	r20, 0x00	; 0
    5e94:	50 e0       	ldi	r21, 0x00	; 0
    5e96:	60 e0       	ldi	r22, 0x00	; 0
    5e98:	70 e0       	ldi	r23, 0x00	; 0
    5e9a:	12 c0       	rjmp	.+36     	; 0x5ec0 <__divdi3+0x5e4>
    5e9c:	20 e0       	ldi	r18, 0x00	; 0
    5e9e:	22 16       	cp	r2, r18
    5ea0:	20 e0       	ldi	r18, 0x00	; 0
    5ea2:	32 06       	cpc	r3, r18
    5ea4:	20 e0       	ldi	r18, 0x00	; 0
    5ea6:	42 06       	cpc	r4, r18
    5ea8:	21 e0       	ldi	r18, 0x01	; 1
    5eaa:	52 06       	cpc	r5, r18
    5eac:	28 f0       	brcs	.+10     	; 0x5eb8 <__divdi3+0x5dc>
    5eae:	48 e1       	ldi	r20, 0x18	; 24
    5eb0:	50 e0       	ldi	r21, 0x00	; 0
    5eb2:	60 e0       	ldi	r22, 0x00	; 0
    5eb4:	70 e0       	ldi	r23, 0x00	; 0
    5eb6:	04 c0       	rjmp	.+8      	; 0x5ec0 <__divdi3+0x5e4>
    5eb8:	40 e1       	ldi	r20, 0x10	; 16
    5eba:	50 e0       	ldi	r21, 0x00	; 0
    5ebc:	60 e0       	ldi	r22, 0x00	; 0
    5ebe:	70 e0       	ldi	r23, 0x00	; 0
    5ec0:	d2 01       	movw	r26, r4
    5ec2:	c1 01       	movw	r24, r2
    5ec4:	04 2e       	mov	r0, r20
    5ec6:	04 c0       	rjmp	.+8      	; 0x5ed0 <__divdi3+0x5f4>
    5ec8:	b6 95       	lsr	r27
    5eca:	a7 95       	ror	r26
    5ecc:	97 95       	ror	r25
    5ece:	87 95       	ror	r24
    5ed0:	0a 94       	dec	r0
    5ed2:	d2 f7       	brpl	.-12     	; 0x5ec8 <__divdi3+0x5ec>
    5ed4:	86 5b       	subi	r24, 0xB6	; 182
    5ed6:	9d 4f       	sbci	r25, 0xFD	; 253
    5ed8:	dc 01       	movw	r26, r24
    5eda:	2c 91       	ld	r18, X
    5edc:	e0 e2       	ldi	r30, 0x20	; 32
    5ede:	ee 2e       	mov	r14, r30
    5ee0:	f1 2c       	mov	r15, r1
    5ee2:	01 2d       	mov	r16, r1
    5ee4:	11 2d       	mov	r17, r1
    5ee6:	d8 01       	movw	r26, r16
    5ee8:	c7 01       	movw	r24, r14
    5eea:	84 1b       	sub	r24, r20
    5eec:	95 0b       	sbc	r25, r21
    5eee:	a6 0b       	sbc	r26, r22
    5ef0:	b7 0b       	sbc	r27, r23
    5ef2:	82 1b       	sub	r24, r18
    5ef4:	91 09       	sbc	r25, r1
    5ef6:	a1 09       	sbc	r26, r1
    5ef8:	b1 09       	sbc	r27, r1
    5efa:	00 97       	sbiw	r24, 0x00	; 0
    5efc:	a1 05       	cpc	r26, r1
    5efe:	b1 05       	cpc	r27, r1
    5f00:	61 f4       	brne	.+24     	; 0x5f1a <__divdi3+0x63e>
    5f02:	64 01       	movw	r12, r8
    5f04:	53 01       	movw	r10, r6
    5f06:	a2 18       	sub	r10, r2
    5f08:	b3 08       	sbc	r11, r3
    5f0a:	c4 08       	sbc	r12, r4
    5f0c:	d5 08       	sbc	r13, r5
    5f0e:	31 e0       	ldi	r19, 0x01	; 1
    5f10:	63 2e       	mov	r6, r19
    5f12:	71 2c       	mov	r7, r1
    5f14:	81 2c       	mov	r8, r1
    5f16:	91 2c       	mov	r9, r1
    5f18:	24 c1       	rjmp	.+584    	; 0x6162 <__divdi3+0x886>
    5f1a:	e3 96       	adiw	r28, 0x33	; 51
    5f1c:	8f af       	std	Y+63, r24	; 0x3f
    5f1e:	e3 97       	sbiw	r28, 0x33	; 51
    5f20:	08 2e       	mov	r0, r24
    5f22:	04 c0       	rjmp	.+8      	; 0x5f2c <__divdi3+0x650>
    5f24:	22 0c       	add	r2, r2
    5f26:	33 1c       	adc	r3, r3
    5f28:	44 1c       	adc	r4, r4
    5f2a:	55 1c       	adc	r5, r5
    5f2c:	0a 94       	dec	r0
    5f2e:	d2 f7       	brpl	.-12     	; 0x5f24 <__divdi3+0x648>
    5f30:	ee 2d       	mov	r30, r14
    5f32:	e8 1b       	sub	r30, r24
    5f34:	64 01       	movw	r12, r8
    5f36:	53 01       	movw	r10, r6
    5f38:	0e 2e       	mov	r0, r30
    5f3a:	04 c0       	rjmp	.+8      	; 0x5f44 <__divdi3+0x668>
    5f3c:	d6 94       	lsr	r13
    5f3e:	c7 94       	ror	r12
    5f40:	b7 94       	ror	r11
    5f42:	a7 94       	ror	r10
    5f44:	0a 94       	dec	r0
    5f46:	d2 f7       	brpl	.-12     	; 0x5f3c <__divdi3+0x660>
    5f48:	a4 01       	movw	r20, r8
    5f4a:	93 01       	movw	r18, r6
    5f4c:	e3 96       	adiw	r28, 0x33	; 51
    5f4e:	0f ac       	ldd	r0, Y+63	; 0x3f
    5f50:	e3 97       	sbiw	r28, 0x33	; 51
    5f52:	04 c0       	rjmp	.+8      	; 0x5f5c <__divdi3+0x680>
    5f54:	22 0f       	add	r18, r18
    5f56:	33 1f       	adc	r19, r19
    5f58:	44 1f       	adc	r20, r20
    5f5a:	55 1f       	adc	r21, r21
    5f5c:	0a 94       	dec	r0
    5f5e:	d2 f7       	brpl	.-12     	; 0x5f54 <__divdi3+0x678>
    5f60:	21 96       	adiw	r28, 0x01	; 1
    5f62:	6c ac       	ldd	r6, Y+60	; 0x3c
    5f64:	7d ac       	ldd	r7, Y+61	; 0x3d
    5f66:	8e ac       	ldd	r8, Y+62	; 0x3e
    5f68:	9f ac       	ldd	r9, Y+63	; 0x3f
    5f6a:	21 97       	sbiw	r28, 0x01	; 1
    5f6c:	0e 2e       	mov	r0, r30
    5f6e:	04 c0       	rjmp	.+8      	; 0x5f78 <__divdi3+0x69c>
    5f70:	96 94       	lsr	r9
    5f72:	87 94       	ror	r8
    5f74:	77 94       	ror	r7
    5f76:	67 94       	ror	r6
    5f78:	0a 94       	dec	r0
    5f7a:	d2 f7       	brpl	.-12     	; 0x5f70 <__divdi3+0x694>
    5f7c:	84 01       	movw	r16, r8
    5f7e:	73 01       	movw	r14, r6
    5f80:	e2 2a       	or	r14, r18
    5f82:	f3 2a       	or	r15, r19
    5f84:	04 2b       	or	r16, r20
    5f86:	15 2b       	or	r17, r21
    5f88:	e9 ae       	std	Y+57, r14	; 0x39
    5f8a:	fa ae       	std	Y+58, r15	; 0x3a
    5f8c:	0b af       	std	Y+59, r16	; 0x3b
    5f8e:	1c af       	std	Y+60, r17	; 0x3c
    5f90:	32 01       	movw	r6, r4
    5f92:	88 24       	eor	r8, r8
    5f94:	99 24       	eor	r9, r9
    5f96:	92 01       	movw	r18, r4
    5f98:	81 01       	movw	r16, r2
    5f9a:	20 70       	andi	r18, 0x00	; 0
    5f9c:	30 70       	andi	r19, 0x00	; 0
    5f9e:	61 96       	adiw	r28, 0x11	; 17
    5fa0:	0c af       	std	Y+60, r16	; 0x3c
    5fa2:	1d af       	std	Y+61, r17	; 0x3d
    5fa4:	2e af       	std	Y+62, r18	; 0x3e
    5fa6:	3f af       	std	Y+63, r19	; 0x3f
    5fa8:	61 97       	sbiw	r28, 0x11	; 17
    5faa:	c6 01       	movw	r24, r12
    5fac:	b5 01       	movw	r22, r10
    5fae:	a4 01       	movw	r20, r8
    5fb0:	93 01       	movw	r18, r6
    5fb2:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5fb6:	7b 01       	movw	r14, r22
    5fb8:	8c 01       	movw	r16, r24
    5fba:	c6 01       	movw	r24, r12
    5fbc:	b5 01       	movw	r22, r10
    5fbe:	a4 01       	movw	r20, r8
    5fc0:	93 01       	movw	r18, r6
    5fc2:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    5fc6:	c9 01       	movw	r24, r18
    5fc8:	da 01       	movw	r26, r20
    5fca:	65 96       	adiw	r28, 0x15	; 21
    5fcc:	8c af       	std	Y+60, r24	; 0x3c
    5fce:	9d af       	std	Y+61, r25	; 0x3d
    5fd0:	ae af       	std	Y+62, r26	; 0x3e
    5fd2:	bf af       	std	Y+63, r27	; 0x3f
    5fd4:	65 97       	sbiw	r28, 0x15	; 21
    5fd6:	bc 01       	movw	r22, r24
    5fd8:	cd 01       	movw	r24, r26
    5fda:	61 96       	adiw	r28, 0x11	; 17
    5fdc:	2c ad       	ldd	r18, Y+60	; 0x3c
    5fde:	3d ad       	ldd	r19, Y+61	; 0x3d
    5fe0:	4e ad       	ldd	r20, Y+62	; 0x3e
    5fe2:	5f ad       	ldd	r21, Y+63	; 0x3f
    5fe4:	61 97       	sbiw	r28, 0x11	; 17
    5fe6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    5fea:	9b 01       	movw	r18, r22
    5fec:	ac 01       	movw	r20, r24
    5fee:	87 01       	movw	r16, r14
    5ff0:	ff 24       	eor	r15, r15
    5ff2:	ee 24       	eor	r14, r14
    5ff4:	a9 ac       	ldd	r10, Y+57	; 0x39
    5ff6:	ba ac       	ldd	r11, Y+58	; 0x3a
    5ff8:	cb ac       	ldd	r12, Y+59	; 0x3b
    5ffa:	dc ac       	ldd	r13, Y+60	; 0x3c
    5ffc:	c6 01       	movw	r24, r12
    5ffe:	aa 27       	eor	r26, r26
    6000:	bb 27       	eor	r27, r27
    6002:	5c 01       	movw	r10, r24
    6004:	6d 01       	movw	r12, r26
    6006:	ae 28       	or	r10, r14
    6008:	bf 28       	or	r11, r15
    600a:	c0 2a       	or	r12, r16
    600c:	d1 2a       	or	r13, r17
    600e:	a2 16       	cp	r10, r18
    6010:	b3 06       	cpc	r11, r19
    6012:	c4 06       	cpc	r12, r20
    6014:	d5 06       	cpc	r13, r21
    6016:	60 f5       	brcc	.+88     	; 0x6070 <__divdi3+0x794>
    6018:	65 96       	adiw	r28, 0x15	; 21
    601a:	6c ad       	ldd	r22, Y+60	; 0x3c
    601c:	7d ad       	ldd	r23, Y+61	; 0x3d
    601e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6020:	9f ad       	ldd	r25, Y+63	; 0x3f
    6022:	65 97       	sbiw	r28, 0x15	; 21
    6024:	61 50       	subi	r22, 0x01	; 1
    6026:	70 40       	sbci	r23, 0x00	; 0
    6028:	80 40       	sbci	r24, 0x00	; 0
    602a:	90 40       	sbci	r25, 0x00	; 0
    602c:	65 96       	adiw	r28, 0x15	; 21
    602e:	6c af       	std	Y+60, r22	; 0x3c
    6030:	7d af       	std	Y+61, r23	; 0x3d
    6032:	8e af       	std	Y+62, r24	; 0x3e
    6034:	9f af       	std	Y+63, r25	; 0x3f
    6036:	65 97       	sbiw	r28, 0x15	; 21
    6038:	a2 0c       	add	r10, r2
    603a:	b3 1c       	adc	r11, r3
    603c:	c4 1c       	adc	r12, r4
    603e:	d5 1c       	adc	r13, r5
    6040:	a2 14       	cp	r10, r2
    6042:	b3 04       	cpc	r11, r3
    6044:	c4 04       	cpc	r12, r4
    6046:	d5 04       	cpc	r13, r5
    6048:	98 f0       	brcs	.+38     	; 0x6070 <__divdi3+0x794>
    604a:	a2 16       	cp	r10, r18
    604c:	b3 06       	cpc	r11, r19
    604e:	c4 06       	cpc	r12, r20
    6050:	d5 06       	cpc	r13, r21
    6052:	70 f4       	brcc	.+28     	; 0x6070 <__divdi3+0x794>
    6054:	61 50       	subi	r22, 0x01	; 1
    6056:	70 40       	sbci	r23, 0x00	; 0
    6058:	80 40       	sbci	r24, 0x00	; 0
    605a:	90 40       	sbci	r25, 0x00	; 0
    605c:	65 96       	adiw	r28, 0x15	; 21
    605e:	6c af       	std	Y+60, r22	; 0x3c
    6060:	7d af       	std	Y+61, r23	; 0x3d
    6062:	8e af       	std	Y+62, r24	; 0x3e
    6064:	9f af       	std	Y+63, r25	; 0x3f
    6066:	65 97       	sbiw	r28, 0x15	; 21
    6068:	a2 0c       	add	r10, r2
    606a:	b3 1c       	adc	r11, r3
    606c:	c4 1c       	adc	r12, r4
    606e:	d5 1c       	adc	r13, r5
    6070:	a2 1a       	sub	r10, r18
    6072:	b3 0a       	sbc	r11, r19
    6074:	c4 0a       	sbc	r12, r20
    6076:	d5 0a       	sbc	r13, r21
    6078:	c6 01       	movw	r24, r12
    607a:	b5 01       	movw	r22, r10
    607c:	a4 01       	movw	r20, r8
    607e:	93 01       	movw	r18, r6
    6080:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6084:	7b 01       	movw	r14, r22
    6086:	8c 01       	movw	r16, r24
    6088:	c6 01       	movw	r24, r12
    608a:	b5 01       	movw	r22, r10
    608c:	a4 01       	movw	r20, r8
    608e:	93 01       	movw	r18, r6
    6090:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6094:	c9 01       	movw	r24, r18
    6096:	da 01       	movw	r26, r20
    6098:	3c 01       	movw	r6, r24
    609a:	4d 01       	movw	r8, r26
    609c:	c4 01       	movw	r24, r8
    609e:	b3 01       	movw	r22, r6
    60a0:	61 96       	adiw	r28, 0x11	; 17
    60a2:	2c ad       	ldd	r18, Y+60	; 0x3c
    60a4:	3d ad       	ldd	r19, Y+61	; 0x3d
    60a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    60a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    60aa:	61 97       	sbiw	r28, 0x11	; 17
    60ac:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    60b0:	9b 01       	movw	r18, r22
    60b2:	ac 01       	movw	r20, r24
    60b4:	87 01       	movw	r16, r14
    60b6:	ff 24       	eor	r15, r15
    60b8:	ee 24       	eor	r14, r14
    60ba:	89 ad       	ldd	r24, Y+57	; 0x39
    60bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    60be:	ab ad       	ldd	r26, Y+59	; 0x3b
    60c0:	bc ad       	ldd	r27, Y+60	; 0x3c
    60c2:	a0 70       	andi	r26, 0x00	; 0
    60c4:	b0 70       	andi	r27, 0x00	; 0
    60c6:	57 01       	movw	r10, r14
    60c8:	68 01       	movw	r12, r16
    60ca:	a8 2a       	or	r10, r24
    60cc:	b9 2a       	or	r11, r25
    60ce:	ca 2a       	or	r12, r26
    60d0:	db 2a       	or	r13, r27
    60d2:	a2 16       	cp	r10, r18
    60d4:	b3 06       	cpc	r11, r19
    60d6:	c4 06       	cpc	r12, r20
    60d8:	d5 06       	cpc	r13, r21
    60da:	e0 f4       	brcc	.+56     	; 0x6114 <__divdi3+0x838>
    60dc:	08 94       	sec
    60de:	61 08       	sbc	r6, r1
    60e0:	71 08       	sbc	r7, r1
    60e2:	81 08       	sbc	r8, r1
    60e4:	91 08       	sbc	r9, r1
    60e6:	a2 0c       	add	r10, r2
    60e8:	b3 1c       	adc	r11, r3
    60ea:	c4 1c       	adc	r12, r4
    60ec:	d5 1c       	adc	r13, r5
    60ee:	a2 14       	cp	r10, r2
    60f0:	b3 04       	cpc	r11, r3
    60f2:	c4 04       	cpc	r12, r4
    60f4:	d5 04       	cpc	r13, r5
    60f6:	70 f0       	brcs	.+28     	; 0x6114 <__divdi3+0x838>
    60f8:	a2 16       	cp	r10, r18
    60fa:	b3 06       	cpc	r11, r19
    60fc:	c4 06       	cpc	r12, r20
    60fe:	d5 06       	cpc	r13, r21
    6100:	48 f4       	brcc	.+18     	; 0x6114 <__divdi3+0x838>
    6102:	08 94       	sec
    6104:	61 08       	sbc	r6, r1
    6106:	71 08       	sbc	r7, r1
    6108:	81 08       	sbc	r8, r1
    610a:	91 08       	sbc	r9, r1
    610c:	a2 0c       	add	r10, r2
    610e:	b3 1c       	adc	r11, r3
    6110:	c4 1c       	adc	r12, r4
    6112:	d5 1c       	adc	r13, r5
    6114:	21 96       	adiw	r28, 0x01	; 1
    6116:	8c ad       	ldd	r24, Y+60	; 0x3c
    6118:	9d ad       	ldd	r25, Y+61	; 0x3d
    611a:	ae ad       	ldd	r26, Y+62	; 0x3e
    611c:	bf ad       	ldd	r27, Y+63	; 0x3f
    611e:	21 97       	sbiw	r28, 0x01	; 1
    6120:	e3 96       	adiw	r28, 0x33	; 51
    6122:	0f ac       	ldd	r0, Y+63	; 0x3f
    6124:	e3 97       	sbiw	r28, 0x33	; 51
    6126:	04 c0       	rjmp	.+8      	; 0x6130 <__divdi3+0x854>
    6128:	88 0f       	add	r24, r24
    612a:	99 1f       	adc	r25, r25
    612c:	aa 1f       	adc	r26, r26
    612e:	bb 1f       	adc	r27, r27
    6130:	0a 94       	dec	r0
    6132:	d2 f7       	brpl	.-12     	; 0x6128 <__divdi3+0x84c>
    6134:	21 96       	adiw	r28, 0x01	; 1
    6136:	8c af       	std	Y+60, r24	; 0x3c
    6138:	9d af       	std	Y+61, r25	; 0x3d
    613a:	ae af       	std	Y+62, r26	; 0x3e
    613c:	bf af       	std	Y+63, r27	; 0x3f
    613e:	21 97       	sbiw	r28, 0x01	; 1
    6140:	a2 1a       	sub	r10, r18
    6142:	b3 0a       	sbc	r11, r19
    6144:	c4 0a       	sbc	r12, r20
    6146:	d5 0a       	sbc	r13, r21
    6148:	65 96       	adiw	r28, 0x15	; 21
    614a:	ec ac       	ldd	r14, Y+60	; 0x3c
    614c:	fd ac       	ldd	r15, Y+61	; 0x3d
    614e:	0e ad       	ldd	r16, Y+62	; 0x3e
    6150:	1f ad       	ldd	r17, Y+63	; 0x3f
    6152:	65 97       	sbiw	r28, 0x15	; 21
    6154:	d7 01       	movw	r26, r14
    6156:	99 27       	eor	r25, r25
    6158:	88 27       	eor	r24, r24
    615a:	68 2a       	or	r6, r24
    615c:	79 2a       	or	r7, r25
    615e:	8a 2a       	or	r8, r26
    6160:	9b 2a       	or	r9, r27
    6162:	82 01       	movw	r16, r4
    6164:	22 27       	eor	r18, r18
    6166:	33 27       	eor	r19, r19
    6168:	69 96       	adiw	r28, 0x19	; 25
    616a:	0c af       	std	Y+60, r16	; 0x3c
    616c:	1d af       	std	Y+61, r17	; 0x3d
    616e:	2e af       	std	Y+62, r18	; 0x3e
    6170:	3f af       	std	Y+63, r19	; 0x3f
    6172:	69 97       	sbiw	r28, 0x19	; 25
    6174:	a2 01       	movw	r20, r4
    6176:	91 01       	movw	r18, r2
    6178:	40 70       	andi	r20, 0x00	; 0
    617a:	50 70       	andi	r21, 0x00	; 0
    617c:	6d 96       	adiw	r28, 0x1d	; 29
    617e:	2c af       	std	Y+60, r18	; 0x3c
    6180:	3d af       	std	Y+61, r19	; 0x3d
    6182:	4e af       	std	Y+62, r20	; 0x3e
    6184:	5f af       	std	Y+63, r21	; 0x3f
    6186:	6d 97       	sbiw	r28, 0x1d	; 29
    6188:	c6 01       	movw	r24, r12
    618a:	b5 01       	movw	r22, r10
    618c:	69 96       	adiw	r28, 0x19	; 25
    618e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6190:	3d ad       	ldd	r19, Y+61	; 0x3d
    6192:	4e ad       	ldd	r20, Y+62	; 0x3e
    6194:	5f ad       	ldd	r21, Y+63	; 0x3f
    6196:	69 97       	sbiw	r28, 0x19	; 25
    6198:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    619c:	7b 01       	movw	r14, r22
    619e:	8c 01       	movw	r16, r24
    61a0:	c6 01       	movw	r24, r12
    61a2:	b5 01       	movw	r22, r10
    61a4:	69 96       	adiw	r28, 0x19	; 25
    61a6:	2c ad       	ldd	r18, Y+60	; 0x3c
    61a8:	3d ad       	ldd	r19, Y+61	; 0x3d
    61aa:	4e ad       	ldd	r20, Y+62	; 0x3e
    61ac:	5f ad       	ldd	r21, Y+63	; 0x3f
    61ae:	69 97       	sbiw	r28, 0x19	; 25
    61b0:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    61b4:	c9 01       	movw	r24, r18
    61b6:	da 01       	movw	r26, r20
    61b8:	a1 96       	adiw	r28, 0x21	; 33
    61ba:	8c af       	std	Y+60, r24	; 0x3c
    61bc:	9d af       	std	Y+61, r25	; 0x3d
    61be:	ae af       	std	Y+62, r26	; 0x3e
    61c0:	bf af       	std	Y+63, r27	; 0x3f
    61c2:	a1 97       	sbiw	r28, 0x21	; 33
    61c4:	bc 01       	movw	r22, r24
    61c6:	cd 01       	movw	r24, r26
    61c8:	6d 96       	adiw	r28, 0x1d	; 29
    61ca:	2c ad       	ldd	r18, Y+60	; 0x3c
    61cc:	3d ad       	ldd	r19, Y+61	; 0x3d
    61ce:	4e ad       	ldd	r20, Y+62	; 0x3e
    61d0:	5f ad       	ldd	r21, Y+63	; 0x3f
    61d2:	6d 97       	sbiw	r28, 0x1d	; 29
    61d4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    61d8:	9b 01       	movw	r18, r22
    61da:	ac 01       	movw	r20, r24
    61dc:	87 01       	movw	r16, r14
    61de:	ff 24       	eor	r15, r15
    61e0:	ee 24       	eor	r14, r14
    61e2:	21 96       	adiw	r28, 0x01	; 1
    61e4:	ac ac       	ldd	r10, Y+60	; 0x3c
    61e6:	bd ac       	ldd	r11, Y+61	; 0x3d
    61e8:	ce ac       	ldd	r12, Y+62	; 0x3e
    61ea:	df ac       	ldd	r13, Y+63	; 0x3f
    61ec:	21 97       	sbiw	r28, 0x01	; 1
    61ee:	c6 01       	movw	r24, r12
    61f0:	aa 27       	eor	r26, r26
    61f2:	bb 27       	eor	r27, r27
    61f4:	57 01       	movw	r10, r14
    61f6:	68 01       	movw	r12, r16
    61f8:	a8 2a       	or	r10, r24
    61fa:	b9 2a       	or	r11, r25
    61fc:	ca 2a       	or	r12, r26
    61fe:	db 2a       	or	r13, r27
    6200:	a2 16       	cp	r10, r18
    6202:	b3 06       	cpc	r11, r19
    6204:	c4 06       	cpc	r12, r20
    6206:	d5 06       	cpc	r13, r21
    6208:	60 f5       	brcc	.+88     	; 0x6262 <__divdi3+0x986>
    620a:	a1 96       	adiw	r28, 0x21	; 33
    620c:	6c ad       	ldd	r22, Y+60	; 0x3c
    620e:	7d ad       	ldd	r23, Y+61	; 0x3d
    6210:	8e ad       	ldd	r24, Y+62	; 0x3e
    6212:	9f ad       	ldd	r25, Y+63	; 0x3f
    6214:	a1 97       	sbiw	r28, 0x21	; 33
    6216:	61 50       	subi	r22, 0x01	; 1
    6218:	70 40       	sbci	r23, 0x00	; 0
    621a:	80 40       	sbci	r24, 0x00	; 0
    621c:	90 40       	sbci	r25, 0x00	; 0
    621e:	a1 96       	adiw	r28, 0x21	; 33
    6220:	6c af       	std	Y+60, r22	; 0x3c
    6222:	7d af       	std	Y+61, r23	; 0x3d
    6224:	8e af       	std	Y+62, r24	; 0x3e
    6226:	9f af       	std	Y+63, r25	; 0x3f
    6228:	a1 97       	sbiw	r28, 0x21	; 33
    622a:	a2 0c       	add	r10, r2
    622c:	b3 1c       	adc	r11, r3
    622e:	c4 1c       	adc	r12, r4
    6230:	d5 1c       	adc	r13, r5
    6232:	a2 14       	cp	r10, r2
    6234:	b3 04       	cpc	r11, r3
    6236:	c4 04       	cpc	r12, r4
    6238:	d5 04       	cpc	r13, r5
    623a:	98 f0       	brcs	.+38     	; 0x6262 <__divdi3+0x986>
    623c:	a2 16       	cp	r10, r18
    623e:	b3 06       	cpc	r11, r19
    6240:	c4 06       	cpc	r12, r20
    6242:	d5 06       	cpc	r13, r21
    6244:	70 f4       	brcc	.+28     	; 0x6262 <__divdi3+0x986>
    6246:	61 50       	subi	r22, 0x01	; 1
    6248:	70 40       	sbci	r23, 0x00	; 0
    624a:	80 40       	sbci	r24, 0x00	; 0
    624c:	90 40       	sbci	r25, 0x00	; 0
    624e:	a1 96       	adiw	r28, 0x21	; 33
    6250:	6c af       	std	Y+60, r22	; 0x3c
    6252:	7d af       	std	Y+61, r23	; 0x3d
    6254:	8e af       	std	Y+62, r24	; 0x3e
    6256:	9f af       	std	Y+63, r25	; 0x3f
    6258:	a1 97       	sbiw	r28, 0x21	; 33
    625a:	a2 0c       	add	r10, r2
    625c:	b3 1c       	adc	r11, r3
    625e:	c4 1c       	adc	r12, r4
    6260:	d5 1c       	adc	r13, r5
    6262:	a2 1a       	sub	r10, r18
    6264:	b3 0a       	sbc	r11, r19
    6266:	c4 0a       	sbc	r12, r20
    6268:	d5 0a       	sbc	r13, r21
    626a:	c6 01       	movw	r24, r12
    626c:	b5 01       	movw	r22, r10
    626e:	69 96       	adiw	r28, 0x19	; 25
    6270:	2c ad       	ldd	r18, Y+60	; 0x3c
    6272:	3d ad       	ldd	r19, Y+61	; 0x3d
    6274:	4e ad       	ldd	r20, Y+62	; 0x3e
    6276:	5f ad       	ldd	r21, Y+63	; 0x3f
    6278:	69 97       	sbiw	r28, 0x19	; 25
    627a:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    627e:	7b 01       	movw	r14, r22
    6280:	8c 01       	movw	r16, r24
    6282:	c6 01       	movw	r24, r12
    6284:	b5 01       	movw	r22, r10
    6286:	69 96       	adiw	r28, 0x19	; 25
    6288:	2c ad       	ldd	r18, Y+60	; 0x3c
    628a:	3d ad       	ldd	r19, Y+61	; 0x3d
    628c:	4e ad       	ldd	r20, Y+62	; 0x3e
    628e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6290:	69 97       	sbiw	r28, 0x19	; 25
    6292:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6296:	c9 01       	movw	r24, r18
    6298:	da 01       	movw	r26, r20
    629a:	5c 01       	movw	r10, r24
    629c:	6d 01       	movw	r12, r26
    629e:	c6 01       	movw	r24, r12
    62a0:	b5 01       	movw	r22, r10
    62a2:	6d 96       	adiw	r28, 0x1d	; 29
    62a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    62a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    62a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    62aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    62ac:	6d 97       	sbiw	r28, 0x1d	; 29
    62ae:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    62b2:	9b 01       	movw	r18, r22
    62b4:	ac 01       	movw	r20, r24
    62b6:	87 01       	movw	r16, r14
    62b8:	ff 24       	eor	r15, r15
    62ba:	ee 24       	eor	r14, r14
    62bc:	21 96       	adiw	r28, 0x01	; 1
    62be:	8c ad       	ldd	r24, Y+60	; 0x3c
    62c0:	9d ad       	ldd	r25, Y+61	; 0x3d
    62c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    62c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    62c6:	21 97       	sbiw	r28, 0x01	; 1
    62c8:	a0 70       	andi	r26, 0x00	; 0
    62ca:	b0 70       	andi	r27, 0x00	; 0
    62cc:	e8 2a       	or	r14, r24
    62ce:	f9 2a       	or	r15, r25
    62d0:	0a 2b       	or	r16, r26
    62d2:	1b 2b       	or	r17, r27
    62d4:	e2 16       	cp	r14, r18
    62d6:	f3 06       	cpc	r15, r19
    62d8:	04 07       	cpc	r16, r20
    62da:	15 07       	cpc	r17, r21
    62dc:	c0 f4       	brcc	.+48     	; 0x630e <__divdi3+0xa32>
    62de:	08 94       	sec
    62e0:	a1 08       	sbc	r10, r1
    62e2:	b1 08       	sbc	r11, r1
    62e4:	c1 08       	sbc	r12, r1
    62e6:	d1 08       	sbc	r13, r1
    62e8:	e2 0c       	add	r14, r2
    62ea:	f3 1c       	adc	r15, r3
    62ec:	04 1d       	adc	r16, r4
    62ee:	15 1d       	adc	r17, r5
    62f0:	e2 14       	cp	r14, r2
    62f2:	f3 04       	cpc	r15, r3
    62f4:	04 05       	cpc	r16, r4
    62f6:	15 05       	cpc	r17, r5
    62f8:	50 f0       	brcs	.+20     	; 0x630e <__divdi3+0xa32>
    62fa:	e2 16       	cp	r14, r18
    62fc:	f3 06       	cpc	r15, r19
    62fe:	04 07       	cpc	r16, r20
    6300:	15 07       	cpc	r17, r21
    6302:	28 f4       	brcc	.+10     	; 0x630e <__divdi3+0xa32>
    6304:	08 94       	sec
    6306:	a1 08       	sbc	r10, r1
    6308:	b1 08       	sbc	r11, r1
    630a:	c1 08       	sbc	r12, r1
    630c:	d1 08       	sbc	r13, r1
    630e:	a1 96       	adiw	r28, 0x21	; 33
    6310:	ec ac       	ldd	r14, Y+60	; 0x3c
    6312:	fd ac       	ldd	r15, Y+61	; 0x3d
    6314:	0e ad       	ldd	r16, Y+62	; 0x3e
    6316:	1f ad       	ldd	r17, Y+63	; 0x3f
    6318:	a1 97       	sbiw	r28, 0x21	; 33
    631a:	d7 01       	movw	r26, r14
    631c:	99 27       	eor	r25, r25
    631e:	88 27       	eor	r24, r24
    6320:	96 01       	movw	r18, r12
    6322:	85 01       	movw	r16, r10
    6324:	08 2b       	or	r16, r24
    6326:	19 2b       	or	r17, r25
    6328:	2a 2b       	or	r18, r26
    632a:	3b 2b       	or	r19, r27
    632c:	25 96       	adiw	r28, 0x05	; 5
    632e:	0c af       	std	Y+60, r16	; 0x3c
    6330:	1d af       	std	Y+61, r17	; 0x3d
    6332:	2e af       	std	Y+62, r18	; 0x3e
    6334:	3f af       	std	Y+63, r19	; 0x3f
    6336:	25 97       	sbiw	r28, 0x05	; 5
    6338:	72 c2       	rjmp	.+1252   	; 0x681e <__divdi3+0xf42>
    633a:	6e 14       	cp	r6, r14
    633c:	7f 04       	cpc	r7, r15
    633e:	80 06       	cpc	r8, r16
    6340:	91 06       	cpc	r9, r17
    6342:	08 f4       	brcc	.+2      	; 0x6346 <__divdi3+0xa6a>
    6344:	5f c2       	rjmp	.+1214   	; 0x6804 <__divdi3+0xf28>
    6346:	20 e0       	ldi	r18, 0x00	; 0
    6348:	e2 16       	cp	r14, r18
    634a:	20 e0       	ldi	r18, 0x00	; 0
    634c:	f2 06       	cpc	r15, r18
    634e:	21 e0       	ldi	r18, 0x01	; 1
    6350:	02 07       	cpc	r16, r18
    6352:	20 e0       	ldi	r18, 0x00	; 0
    6354:	12 07       	cpc	r17, r18
    6356:	88 f4       	brcc	.+34     	; 0x637a <__divdi3+0xa9e>
    6358:	3f ef       	ldi	r19, 0xFF	; 255
    635a:	e3 16       	cp	r14, r19
    635c:	f1 04       	cpc	r15, r1
    635e:	01 05       	cpc	r16, r1
    6360:	11 05       	cpc	r17, r1
    6362:	31 f0       	breq	.+12     	; 0x6370 <__divdi3+0xa94>
    6364:	28 f0       	brcs	.+10     	; 0x6370 <__divdi3+0xa94>
    6366:	48 e0       	ldi	r20, 0x08	; 8
    6368:	50 e0       	ldi	r21, 0x00	; 0
    636a:	60 e0       	ldi	r22, 0x00	; 0
    636c:	70 e0       	ldi	r23, 0x00	; 0
    636e:	17 c0       	rjmp	.+46     	; 0x639e <__divdi3+0xac2>
    6370:	40 e0       	ldi	r20, 0x00	; 0
    6372:	50 e0       	ldi	r21, 0x00	; 0
    6374:	60 e0       	ldi	r22, 0x00	; 0
    6376:	70 e0       	ldi	r23, 0x00	; 0
    6378:	12 c0       	rjmp	.+36     	; 0x639e <__divdi3+0xac2>
    637a:	40 e0       	ldi	r20, 0x00	; 0
    637c:	e4 16       	cp	r14, r20
    637e:	40 e0       	ldi	r20, 0x00	; 0
    6380:	f4 06       	cpc	r15, r20
    6382:	40 e0       	ldi	r20, 0x00	; 0
    6384:	04 07       	cpc	r16, r20
    6386:	41 e0       	ldi	r20, 0x01	; 1
    6388:	14 07       	cpc	r17, r20
    638a:	28 f0       	brcs	.+10     	; 0x6396 <__divdi3+0xaba>
    638c:	48 e1       	ldi	r20, 0x18	; 24
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	60 e0       	ldi	r22, 0x00	; 0
    6392:	70 e0       	ldi	r23, 0x00	; 0
    6394:	04 c0       	rjmp	.+8      	; 0x639e <__divdi3+0xac2>
    6396:	40 e1       	ldi	r20, 0x10	; 16
    6398:	50 e0       	ldi	r21, 0x00	; 0
    639a:	60 e0       	ldi	r22, 0x00	; 0
    639c:	70 e0       	ldi	r23, 0x00	; 0
    639e:	d8 01       	movw	r26, r16
    63a0:	c7 01       	movw	r24, r14
    63a2:	04 2e       	mov	r0, r20
    63a4:	04 c0       	rjmp	.+8      	; 0x63ae <__divdi3+0xad2>
    63a6:	b6 95       	lsr	r27
    63a8:	a7 95       	ror	r26
    63aa:	97 95       	ror	r25
    63ac:	87 95       	ror	r24
    63ae:	0a 94       	dec	r0
    63b0:	d2 f7       	brpl	.-12     	; 0x63a6 <__divdi3+0xaca>
    63b2:	86 5b       	subi	r24, 0xB6	; 182
    63b4:	9d 4f       	sbci	r25, 0xFD	; 253
    63b6:	dc 01       	movw	r26, r24
    63b8:	2c 91       	ld	r18, X
    63ba:	30 e2       	ldi	r19, 0x20	; 32
    63bc:	a3 2e       	mov	r10, r19
    63be:	b1 2c       	mov	r11, r1
    63c0:	c1 2c       	mov	r12, r1
    63c2:	d1 2c       	mov	r13, r1
    63c4:	d6 01       	movw	r26, r12
    63c6:	c5 01       	movw	r24, r10
    63c8:	84 1b       	sub	r24, r20
    63ca:	95 0b       	sbc	r25, r21
    63cc:	a6 0b       	sbc	r26, r22
    63ce:	b7 0b       	sbc	r27, r23
    63d0:	82 1b       	sub	r24, r18
    63d2:	91 09       	sbc	r25, r1
    63d4:	a1 09       	sbc	r26, r1
    63d6:	b1 09       	sbc	r27, r1
    63d8:	00 97       	sbiw	r24, 0x00	; 0
    63da:	a1 05       	cpc	r26, r1
    63dc:	b1 05       	cpc	r27, r1
    63de:	99 f4       	brne	.+38     	; 0x6406 <__divdi3+0xb2a>
    63e0:	e6 14       	cp	r14, r6
    63e2:	f7 04       	cpc	r15, r7
    63e4:	08 05       	cpc	r16, r8
    63e6:	19 05       	cpc	r17, r9
    63e8:	08 f4       	brcc	.+2      	; 0x63ec <__divdi3+0xb10>
    63ea:	fe c1       	rjmp	.+1020   	; 0x67e8 <__divdi3+0xf0c>
    63ec:	21 96       	adiw	r28, 0x01	; 1
    63ee:	6c ac       	ldd	r6, Y+60	; 0x3c
    63f0:	7d ac       	ldd	r7, Y+61	; 0x3d
    63f2:	8e ac       	ldd	r8, Y+62	; 0x3e
    63f4:	9f ac       	ldd	r9, Y+63	; 0x3f
    63f6:	21 97       	sbiw	r28, 0x01	; 1
    63f8:	62 14       	cp	r6, r2
    63fa:	73 04       	cpc	r7, r3
    63fc:	84 04       	cpc	r8, r4
    63fe:	95 04       	cpc	r9, r5
    6400:	08 f0       	brcs	.+2      	; 0x6404 <__divdi3+0xb28>
    6402:	f2 c1       	rjmp	.+996    	; 0x67e8 <__divdi3+0xf0c>
    6404:	ff c1       	rjmp	.+1022   	; 0x6804 <__divdi3+0xf28>
    6406:	e2 96       	adiw	r28, 0x32	; 50
    6408:	8f af       	std	Y+63, r24	; 0x3f
    640a:	e2 97       	sbiw	r28, 0x32	; 50
    640c:	08 2e       	mov	r0, r24
    640e:	04 c0       	rjmp	.+8      	; 0x6418 <__divdi3+0xb3c>
    6410:	ee 0c       	add	r14, r14
    6412:	ff 1c       	adc	r15, r15
    6414:	00 1f       	adc	r16, r16
    6416:	11 1f       	adc	r17, r17
    6418:	0a 94       	dec	r0
    641a:	d2 f7       	brpl	.-12     	; 0x6410 <__divdi3+0xb34>
    641c:	6a 2d       	mov	r22, r10
    641e:	68 1b       	sub	r22, r24
    6420:	d2 01       	movw	r26, r4
    6422:	c1 01       	movw	r24, r2
    6424:	06 2e       	mov	r0, r22
    6426:	04 c0       	rjmp	.+8      	; 0x6430 <__divdi3+0xb54>
    6428:	b6 95       	lsr	r27
    642a:	a7 95       	ror	r26
    642c:	97 95       	ror	r25
    642e:	87 95       	ror	r24
    6430:	0a 94       	dec	r0
    6432:	d2 f7       	brpl	.-12     	; 0x6428 <__divdi3+0xb4c>
    6434:	5c 01       	movw	r10, r24
    6436:	6d 01       	movw	r12, r26
    6438:	ae 28       	or	r10, r14
    643a:	bf 28       	or	r11, r15
    643c:	c0 2a       	or	r12, r16
    643e:	d1 2a       	or	r13, r17
    6440:	ad aa       	std	Y+53, r10	; 0x35
    6442:	be aa       	std	Y+54, r11	; 0x36
    6444:	cf aa       	std	Y+55, r12	; 0x37
    6446:	d8 ae       	std	Y+56, r13	; 0x38
    6448:	72 01       	movw	r14, r4
    644a:	61 01       	movw	r12, r2
    644c:	e2 96       	adiw	r28, 0x32	; 50
    644e:	0f ac       	ldd	r0, Y+63	; 0x3f
    6450:	e2 97       	sbiw	r28, 0x32	; 50
    6452:	04 c0       	rjmp	.+8      	; 0x645c <__divdi3+0xb80>
    6454:	cc 0c       	add	r12, r12
    6456:	dd 1c       	adc	r13, r13
    6458:	ee 1c       	adc	r14, r14
    645a:	ff 1c       	adc	r15, r15
    645c:	0a 94       	dec	r0
    645e:	d2 f7       	brpl	.-12     	; 0x6454 <__divdi3+0xb78>
    6460:	c9 aa       	std	Y+49, r12	; 0x31
    6462:	da aa       	std	Y+50, r13	; 0x32
    6464:	eb aa       	std	Y+51, r14	; 0x33
    6466:	fc aa       	std	Y+52, r15	; 0x34
    6468:	64 01       	movw	r12, r8
    646a:	53 01       	movw	r10, r6
    646c:	06 2e       	mov	r0, r22
    646e:	04 c0       	rjmp	.+8      	; 0x6478 <__divdi3+0xb9c>
    6470:	d6 94       	lsr	r13
    6472:	c7 94       	ror	r12
    6474:	b7 94       	ror	r11
    6476:	a7 94       	ror	r10
    6478:	0a 94       	dec	r0
    647a:	d2 f7       	brpl	.-12     	; 0x6470 <__divdi3+0xb94>
    647c:	d4 01       	movw	r26, r8
    647e:	c3 01       	movw	r24, r6
    6480:	e2 96       	adiw	r28, 0x32	; 50
    6482:	0f ac       	ldd	r0, Y+63	; 0x3f
    6484:	e2 97       	sbiw	r28, 0x32	; 50
    6486:	04 c0       	rjmp	.+8      	; 0x6490 <__divdi3+0xbb4>
    6488:	88 0f       	add	r24, r24
    648a:	99 1f       	adc	r25, r25
    648c:	aa 1f       	adc	r26, r26
    648e:	bb 1f       	adc	r27, r27
    6490:	0a 94       	dec	r0
    6492:	d2 f7       	brpl	.-12     	; 0x6488 <__divdi3+0xbac>
    6494:	21 96       	adiw	r28, 0x01	; 1
    6496:	ec ac       	ldd	r14, Y+60	; 0x3c
    6498:	fd ac       	ldd	r15, Y+61	; 0x3d
    649a:	0e ad       	ldd	r16, Y+62	; 0x3e
    649c:	1f ad       	ldd	r17, Y+63	; 0x3f
    649e:	21 97       	sbiw	r28, 0x01	; 1
    64a0:	04 c0       	rjmp	.+8      	; 0x64aa <__divdi3+0xbce>
    64a2:	16 95       	lsr	r17
    64a4:	07 95       	ror	r16
    64a6:	f7 94       	ror	r15
    64a8:	e7 94       	ror	r14
    64aa:	6a 95       	dec	r22
    64ac:	d2 f7       	brpl	.-12     	; 0x64a2 <__divdi3+0xbc6>
    64ae:	37 01       	movw	r6, r14
    64b0:	48 01       	movw	r8, r16
    64b2:	68 2a       	or	r6, r24
    64b4:	79 2a       	or	r7, r25
    64b6:	8a 2a       	or	r8, r26
    64b8:	9b 2a       	or	r9, r27
    64ba:	6d a6       	std	Y+45, r6	; 0x2d
    64bc:	7e a6       	std	Y+46, r7	; 0x2e
    64be:	8f a6       	std	Y+47, r8	; 0x2f
    64c0:	98 aa       	std	Y+48, r9	; 0x30
    64c2:	ed a8       	ldd	r14, Y+53	; 0x35
    64c4:	fe a8       	ldd	r15, Y+54	; 0x36
    64c6:	0f a9       	ldd	r16, Y+55	; 0x37
    64c8:	18 ad       	ldd	r17, Y+56	; 0x38
    64ca:	38 01       	movw	r6, r16
    64cc:	88 24       	eor	r8, r8
    64ce:	99 24       	eor	r9, r9
    64d0:	98 01       	movw	r18, r16
    64d2:	87 01       	movw	r16, r14
    64d4:	20 70       	andi	r18, 0x00	; 0
    64d6:	30 70       	andi	r19, 0x00	; 0
    64d8:	a5 96       	adiw	r28, 0x25	; 37
    64da:	0c af       	std	Y+60, r16	; 0x3c
    64dc:	1d af       	std	Y+61, r17	; 0x3d
    64de:	2e af       	std	Y+62, r18	; 0x3e
    64e0:	3f af       	std	Y+63, r19	; 0x3f
    64e2:	a5 97       	sbiw	r28, 0x25	; 37
    64e4:	c6 01       	movw	r24, r12
    64e6:	b5 01       	movw	r22, r10
    64e8:	a4 01       	movw	r20, r8
    64ea:	93 01       	movw	r18, r6
    64ec:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    64f0:	7b 01       	movw	r14, r22
    64f2:	8c 01       	movw	r16, r24
    64f4:	c6 01       	movw	r24, r12
    64f6:	b5 01       	movw	r22, r10
    64f8:	a4 01       	movw	r20, r8
    64fa:	93 01       	movw	r18, r6
    64fc:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6500:	c9 01       	movw	r24, r18
    6502:	da 01       	movw	r26, r20
    6504:	1c 01       	movw	r2, r24
    6506:	2d 01       	movw	r4, r26
    6508:	c2 01       	movw	r24, r4
    650a:	b1 01       	movw	r22, r2
    650c:	a5 96       	adiw	r28, 0x25	; 37
    650e:	2c ad       	ldd	r18, Y+60	; 0x3c
    6510:	3d ad       	ldd	r19, Y+61	; 0x3d
    6512:	4e ad       	ldd	r20, Y+62	; 0x3e
    6514:	5f ad       	ldd	r21, Y+63	; 0x3f
    6516:	a5 97       	sbiw	r28, 0x25	; 37
    6518:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    651c:	9b 01       	movw	r18, r22
    651e:	ac 01       	movw	r20, r24
    6520:	87 01       	movw	r16, r14
    6522:	ff 24       	eor	r15, r15
    6524:	ee 24       	eor	r14, r14
    6526:	ad a4       	ldd	r10, Y+45	; 0x2d
    6528:	be a4       	ldd	r11, Y+46	; 0x2e
    652a:	cf a4       	ldd	r12, Y+47	; 0x2f
    652c:	d8 a8       	ldd	r13, Y+48	; 0x30
    652e:	c6 01       	movw	r24, r12
    6530:	aa 27       	eor	r26, r26
    6532:	bb 27       	eor	r27, r27
    6534:	57 01       	movw	r10, r14
    6536:	68 01       	movw	r12, r16
    6538:	a8 2a       	or	r10, r24
    653a:	b9 2a       	or	r11, r25
    653c:	ca 2a       	or	r12, r26
    653e:	db 2a       	or	r13, r27
    6540:	a2 16       	cp	r10, r18
    6542:	b3 06       	cpc	r11, r19
    6544:	c4 06       	cpc	r12, r20
    6546:	d5 06       	cpc	r13, r21
    6548:	00 f5       	brcc	.+64     	; 0x658a <__divdi3+0xcae>
    654a:	08 94       	sec
    654c:	21 08       	sbc	r2, r1
    654e:	31 08       	sbc	r3, r1
    6550:	41 08       	sbc	r4, r1
    6552:	51 08       	sbc	r5, r1
    6554:	ed a8       	ldd	r14, Y+53	; 0x35
    6556:	fe a8       	ldd	r15, Y+54	; 0x36
    6558:	0f a9       	ldd	r16, Y+55	; 0x37
    655a:	18 ad       	ldd	r17, Y+56	; 0x38
    655c:	ae 0c       	add	r10, r14
    655e:	bf 1c       	adc	r11, r15
    6560:	c0 1e       	adc	r12, r16
    6562:	d1 1e       	adc	r13, r17
    6564:	ae 14       	cp	r10, r14
    6566:	bf 04       	cpc	r11, r15
    6568:	c0 06       	cpc	r12, r16
    656a:	d1 06       	cpc	r13, r17
    656c:	70 f0       	brcs	.+28     	; 0x658a <__divdi3+0xcae>
    656e:	a2 16       	cp	r10, r18
    6570:	b3 06       	cpc	r11, r19
    6572:	c4 06       	cpc	r12, r20
    6574:	d5 06       	cpc	r13, r21
    6576:	48 f4       	brcc	.+18     	; 0x658a <__divdi3+0xcae>
    6578:	08 94       	sec
    657a:	21 08       	sbc	r2, r1
    657c:	31 08       	sbc	r3, r1
    657e:	41 08       	sbc	r4, r1
    6580:	51 08       	sbc	r5, r1
    6582:	ae 0c       	add	r10, r14
    6584:	bf 1c       	adc	r11, r15
    6586:	c0 1e       	adc	r12, r16
    6588:	d1 1e       	adc	r13, r17
    658a:	a2 1a       	sub	r10, r18
    658c:	b3 0a       	sbc	r11, r19
    658e:	c4 0a       	sbc	r12, r20
    6590:	d5 0a       	sbc	r13, r21
    6592:	c6 01       	movw	r24, r12
    6594:	b5 01       	movw	r22, r10
    6596:	a4 01       	movw	r20, r8
    6598:	93 01       	movw	r18, r6
    659a:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    659e:	7b 01       	movw	r14, r22
    65a0:	8c 01       	movw	r16, r24
    65a2:	c6 01       	movw	r24, r12
    65a4:	b5 01       	movw	r22, r10
    65a6:	a4 01       	movw	r20, r8
    65a8:	93 01       	movw	r18, r6
    65aa:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    65ae:	c9 01       	movw	r24, r18
    65b0:	da 01       	movw	r26, r20
    65b2:	3c 01       	movw	r6, r24
    65b4:	4d 01       	movw	r8, r26
    65b6:	c4 01       	movw	r24, r8
    65b8:	b3 01       	movw	r22, r6
    65ba:	a5 96       	adiw	r28, 0x25	; 37
    65bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    65be:	3d ad       	ldd	r19, Y+61	; 0x3d
    65c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    65c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    65c4:	a5 97       	sbiw	r28, 0x25	; 37
    65c6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    65ca:	9b 01       	movw	r18, r22
    65cc:	ac 01       	movw	r20, r24
    65ce:	87 01       	movw	r16, r14
    65d0:	ff 24       	eor	r15, r15
    65d2:	ee 24       	eor	r14, r14
    65d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    65d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    65d8:	af a5       	ldd	r26, Y+47	; 0x2f
    65da:	b8 a9       	ldd	r27, Y+48	; 0x30
    65dc:	a0 70       	andi	r26, 0x00	; 0
    65de:	b0 70       	andi	r27, 0x00	; 0
    65e0:	57 01       	movw	r10, r14
    65e2:	68 01       	movw	r12, r16
    65e4:	a8 2a       	or	r10, r24
    65e6:	b9 2a       	or	r11, r25
    65e8:	ca 2a       	or	r12, r26
    65ea:	db 2a       	or	r13, r27
    65ec:	a2 16       	cp	r10, r18
    65ee:	b3 06       	cpc	r11, r19
    65f0:	c4 06       	cpc	r12, r20
    65f2:	d5 06       	cpc	r13, r21
    65f4:	00 f5       	brcc	.+64     	; 0x6636 <__divdi3+0xd5a>
    65f6:	08 94       	sec
    65f8:	61 08       	sbc	r6, r1
    65fa:	71 08       	sbc	r7, r1
    65fc:	81 08       	sbc	r8, r1
    65fe:	91 08       	sbc	r9, r1
    6600:	6d a9       	ldd	r22, Y+53	; 0x35
    6602:	7e a9       	ldd	r23, Y+54	; 0x36
    6604:	8f a9       	ldd	r24, Y+55	; 0x37
    6606:	98 ad       	ldd	r25, Y+56	; 0x38
    6608:	a6 0e       	add	r10, r22
    660a:	b7 1e       	adc	r11, r23
    660c:	c8 1e       	adc	r12, r24
    660e:	d9 1e       	adc	r13, r25
    6610:	a6 16       	cp	r10, r22
    6612:	b7 06       	cpc	r11, r23
    6614:	c8 06       	cpc	r12, r24
    6616:	d9 06       	cpc	r13, r25
    6618:	70 f0       	brcs	.+28     	; 0x6636 <__divdi3+0xd5a>
    661a:	a2 16       	cp	r10, r18
    661c:	b3 06       	cpc	r11, r19
    661e:	c4 06       	cpc	r12, r20
    6620:	d5 06       	cpc	r13, r21
    6622:	48 f4       	brcc	.+18     	; 0x6636 <__divdi3+0xd5a>
    6624:	08 94       	sec
    6626:	61 08       	sbc	r6, r1
    6628:	71 08       	sbc	r7, r1
    662a:	81 08       	sbc	r8, r1
    662c:	91 08       	sbc	r9, r1
    662e:	a6 0e       	add	r10, r22
    6630:	b7 1e       	adc	r11, r23
    6632:	c8 1e       	adc	r12, r24
    6634:	d9 1e       	adc	r13, r25
    6636:	d6 01       	movw	r26, r12
    6638:	c5 01       	movw	r24, r10
    663a:	82 1b       	sub	r24, r18
    663c:	93 0b       	sbc	r25, r19
    663e:	a4 0b       	sbc	r26, r20
    6640:	b5 0b       	sbc	r27, r21
    6642:	89 a7       	std	Y+41, r24	; 0x29
    6644:	9a a7       	std	Y+42, r25	; 0x2a
    6646:	ab a7       	std	Y+43, r26	; 0x2b
    6648:	bc a7       	std	Y+44, r27	; 0x2c
    664a:	d1 01       	movw	r26, r2
    664c:	99 27       	eor	r25, r25
    664e:	88 27       	eor	r24, r24
    6650:	64 01       	movw	r12, r8
    6652:	53 01       	movw	r10, r6
    6654:	a8 2a       	or	r10, r24
    6656:	b9 2a       	or	r11, r25
    6658:	ca 2a       	or	r12, r26
    665a:	db 2a       	or	r13, r27
    665c:	25 96       	adiw	r28, 0x05	; 5
    665e:	ac ae       	std	Y+60, r10	; 0x3c
    6660:	bd ae       	std	Y+61, r11	; 0x3d
    6662:	ce ae       	std	Y+62, r12	; 0x3e
    6664:	df ae       	std	Y+63, r13	; 0x3f
    6666:	25 97       	sbiw	r28, 0x05	; 5
    6668:	86 01       	movw	r16, r12
    666a:	75 01       	movw	r14, r10
    666c:	2f ef       	ldi	r18, 0xFF	; 255
    666e:	3f ef       	ldi	r19, 0xFF	; 255
    6670:	40 e0       	ldi	r20, 0x00	; 0
    6672:	50 e0       	ldi	r21, 0x00	; 0
    6674:	e2 22       	and	r14, r18
    6676:	f3 22       	and	r15, r19
    6678:	04 23       	and	r16, r20
    667a:	15 23       	and	r17, r21
    667c:	a6 01       	movw	r20, r12
    667e:	66 27       	eor	r22, r22
    6680:	77 27       	eor	r23, r23
    6682:	ad 96       	adiw	r28, 0x2d	; 45
    6684:	4c af       	std	Y+60, r20	; 0x3c
    6686:	5d af       	std	Y+61, r21	; 0x3d
    6688:	6e af       	std	Y+62, r22	; 0x3e
    668a:	7f af       	std	Y+63, r23	; 0x3f
    668c:	ad 97       	sbiw	r28, 0x2d	; 45
    668e:	a9 a8       	ldd	r10, Y+49	; 0x31
    6690:	ba a8       	ldd	r11, Y+50	; 0x32
    6692:	cb a8       	ldd	r12, Y+51	; 0x33
    6694:	dc a8       	ldd	r13, Y+52	; 0x34
    6696:	6f ef       	ldi	r22, 0xFF	; 255
    6698:	7f ef       	ldi	r23, 0xFF	; 255
    669a:	80 e0       	ldi	r24, 0x00	; 0
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	a6 22       	and	r10, r22
    66a0:	b7 22       	and	r11, r23
    66a2:	c8 22       	and	r12, r24
    66a4:	d9 22       	and	r13, r25
    66a6:	89 a9       	ldd	r24, Y+49	; 0x31
    66a8:	9a a9       	ldd	r25, Y+50	; 0x32
    66aa:	ab a9       	ldd	r26, Y+51	; 0x33
    66ac:	bc a9       	ldd	r27, Y+52	; 0x34
    66ae:	1d 01       	movw	r2, r26
    66b0:	44 24       	eor	r4, r4
    66b2:	55 24       	eor	r5, r5
    66b4:	c8 01       	movw	r24, r16
    66b6:	b7 01       	movw	r22, r14
    66b8:	a6 01       	movw	r20, r12
    66ba:	95 01       	movw	r18, r10
    66bc:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    66c0:	a9 96       	adiw	r28, 0x29	; 41
    66c2:	6c af       	std	Y+60, r22	; 0x3c
    66c4:	7d af       	std	Y+61, r23	; 0x3d
    66c6:	8e af       	std	Y+62, r24	; 0x3e
    66c8:	9f af       	std	Y+63, r25	; 0x3f
    66ca:	a9 97       	sbiw	r28, 0x29	; 41
    66cc:	c8 01       	movw	r24, r16
    66ce:	b7 01       	movw	r22, r14
    66d0:	a2 01       	movw	r20, r4
    66d2:	91 01       	movw	r18, r2
    66d4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    66d8:	3b 01       	movw	r6, r22
    66da:	4c 01       	movw	r8, r24
    66dc:	ad 96       	adiw	r28, 0x2d	; 45
    66de:	6c ad       	ldd	r22, Y+60	; 0x3c
    66e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    66e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    66e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    66e6:	ad 97       	sbiw	r28, 0x2d	; 45
    66e8:	a6 01       	movw	r20, r12
    66ea:	95 01       	movw	r18, r10
    66ec:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    66f0:	7b 01       	movw	r14, r22
    66f2:	8c 01       	movw	r16, r24
    66f4:	ad 96       	adiw	r28, 0x2d	; 45
    66f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    66f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    66fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    66fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    66fe:	ad 97       	sbiw	r28, 0x2d	; 45
    6700:	a2 01       	movw	r20, r4
    6702:	91 01       	movw	r18, r2
    6704:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    6708:	5b 01       	movw	r10, r22
    670a:	6c 01       	movw	r12, r24
    670c:	a8 01       	movw	r20, r16
    670e:	97 01       	movw	r18, r14
    6710:	26 0d       	add	r18, r6
    6712:	37 1d       	adc	r19, r7
    6714:	48 1d       	adc	r20, r8
    6716:	59 1d       	adc	r21, r9
    6718:	a9 96       	adiw	r28, 0x29	; 41
    671a:	6c ac       	ldd	r6, Y+60	; 0x3c
    671c:	7d ac       	ldd	r7, Y+61	; 0x3d
    671e:	8e ac       	ldd	r8, Y+62	; 0x3e
    6720:	9f ac       	ldd	r9, Y+63	; 0x3f
    6722:	a9 97       	sbiw	r28, 0x29	; 41
    6724:	c4 01       	movw	r24, r8
    6726:	aa 27       	eor	r26, r26
    6728:	bb 27       	eor	r27, r27
    672a:	28 0f       	add	r18, r24
    672c:	39 1f       	adc	r19, r25
    672e:	4a 1f       	adc	r20, r26
    6730:	5b 1f       	adc	r21, r27
    6732:	2e 15       	cp	r18, r14
    6734:	3f 05       	cpc	r19, r15
    6736:	40 07       	cpc	r20, r16
    6738:	51 07       	cpc	r21, r17
    673a:	48 f4       	brcc	.+18     	; 0x674e <__divdi3+0xe72>
    673c:	e1 2c       	mov	r14, r1
    673e:	f1 2c       	mov	r15, r1
    6740:	61 e0       	ldi	r22, 0x01	; 1
    6742:	06 2f       	mov	r16, r22
    6744:	11 2d       	mov	r17, r1
    6746:	ae 0c       	add	r10, r14
    6748:	bf 1c       	adc	r11, r15
    674a:	c0 1e       	adc	r12, r16
    674c:	d1 1e       	adc	r13, r17
    674e:	ca 01       	movw	r24, r20
    6750:	aa 27       	eor	r26, r26
    6752:	bb 27       	eor	r27, r27
    6754:	bc 01       	movw	r22, r24
    6756:	cd 01       	movw	r24, r26
    6758:	6a 0d       	add	r22, r10
    675a:	7b 1d       	adc	r23, r11
    675c:	8c 1d       	adc	r24, r12
    675e:	9d 1d       	adc	r25, r13
    6760:	69 a4       	ldd	r6, Y+41	; 0x29
    6762:	7a a4       	ldd	r7, Y+42	; 0x2a
    6764:	8b a4       	ldd	r8, Y+43	; 0x2b
    6766:	9c a4       	ldd	r9, Y+44	; 0x2c
    6768:	66 16       	cp	r6, r22
    676a:	77 06       	cpc	r7, r23
    676c:	88 06       	cpc	r8, r24
    676e:	99 06       	cpc	r9, r25
    6770:	50 f1       	brcs	.+84     	; 0x67c6 <__divdi3+0xeea>
    6772:	66 15       	cp	r22, r6
    6774:	77 05       	cpc	r23, r7
    6776:	88 05       	cpc	r24, r8
    6778:	99 05       	cpc	r25, r9
    677a:	09 f0       	breq	.+2      	; 0x677e <__divdi3+0xea2>
    677c:	4d c0       	rjmp	.+154    	; 0x6818 <__divdi3+0xf3c>
    677e:	d9 01       	movw	r26, r18
    6780:	99 27       	eor	r25, r25
    6782:	88 27       	eor	r24, r24
    6784:	a9 96       	adiw	r28, 0x29	; 41
    6786:	2c ad       	ldd	r18, Y+60	; 0x3c
    6788:	3d ad       	ldd	r19, Y+61	; 0x3d
    678a:	4e ad       	ldd	r20, Y+62	; 0x3e
    678c:	5f ad       	ldd	r21, Y+63	; 0x3f
    678e:	a9 97       	sbiw	r28, 0x29	; 41
    6790:	40 70       	andi	r20, 0x00	; 0
    6792:	50 70       	andi	r21, 0x00	; 0
    6794:	82 0f       	add	r24, r18
    6796:	93 1f       	adc	r25, r19
    6798:	a4 1f       	adc	r26, r20
    679a:	b5 1f       	adc	r27, r21
    679c:	21 96       	adiw	r28, 0x01	; 1
    679e:	2c ad       	ldd	r18, Y+60	; 0x3c
    67a0:	3d ad       	ldd	r19, Y+61	; 0x3d
    67a2:	4e ad       	ldd	r20, Y+62	; 0x3e
    67a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    67a6:	21 97       	sbiw	r28, 0x01	; 1
    67a8:	e2 96       	adiw	r28, 0x32	; 50
    67aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    67ac:	e2 97       	sbiw	r28, 0x32	; 50
    67ae:	04 c0       	rjmp	.+8      	; 0x67b8 <__divdi3+0xedc>
    67b0:	22 0f       	add	r18, r18
    67b2:	33 1f       	adc	r19, r19
    67b4:	44 1f       	adc	r20, r20
    67b6:	55 1f       	adc	r21, r21
    67b8:	0a 94       	dec	r0
    67ba:	d2 f7       	brpl	.-12     	; 0x67b0 <__divdi3+0xed4>
    67bc:	28 17       	cp	r18, r24
    67be:	39 07       	cpc	r19, r25
    67c0:	4a 07       	cpc	r20, r26
    67c2:	5b 07       	cpc	r21, r27
    67c4:	48 f5       	brcc	.+82     	; 0x6818 <__divdi3+0xf3c>
    67c6:	25 96       	adiw	r28, 0x05	; 5
    67c8:	0c ad       	ldd	r16, Y+60	; 0x3c
    67ca:	1d ad       	ldd	r17, Y+61	; 0x3d
    67cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    67ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    67d0:	25 97       	sbiw	r28, 0x05	; 5
    67d2:	01 50       	subi	r16, 0x01	; 1
    67d4:	10 40       	sbci	r17, 0x00	; 0
    67d6:	20 40       	sbci	r18, 0x00	; 0
    67d8:	30 40       	sbci	r19, 0x00	; 0
    67da:	25 96       	adiw	r28, 0x05	; 5
    67dc:	0c af       	std	Y+60, r16	; 0x3c
    67de:	1d af       	std	Y+61, r17	; 0x3d
    67e0:	2e af       	std	Y+62, r18	; 0x3e
    67e2:	3f af       	std	Y+63, r19	; 0x3f
    67e4:	25 97       	sbiw	r28, 0x05	; 5
    67e6:	18 c0       	rjmp	.+48     	; 0x6818 <__divdi3+0xf3c>
    67e8:	66 24       	eor	r6, r6
    67ea:	77 24       	eor	r7, r7
    67ec:	43 01       	movw	r8, r6
    67ee:	21 e0       	ldi	r18, 0x01	; 1
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	40 e0       	ldi	r20, 0x00	; 0
    67f4:	50 e0       	ldi	r21, 0x00	; 0
    67f6:	25 96       	adiw	r28, 0x05	; 5
    67f8:	2c af       	std	Y+60, r18	; 0x3c
    67fa:	3d af       	std	Y+61, r19	; 0x3d
    67fc:	4e af       	std	Y+62, r20	; 0x3e
    67fe:	5f af       	std	Y+63, r21	; 0x3f
    6800:	25 97       	sbiw	r28, 0x05	; 5
    6802:	0d c0       	rjmp	.+26     	; 0x681e <__divdi3+0xf42>
    6804:	66 24       	eor	r6, r6
    6806:	77 24       	eor	r7, r7
    6808:	43 01       	movw	r8, r6
    680a:	25 96       	adiw	r28, 0x05	; 5
    680c:	1c ae       	std	Y+60, r1	; 0x3c
    680e:	1d ae       	std	Y+61, r1	; 0x3d
    6810:	1e ae       	std	Y+62, r1	; 0x3e
    6812:	1f ae       	std	Y+63, r1	; 0x3f
    6814:	25 97       	sbiw	r28, 0x05	; 5
    6816:	03 c0       	rjmp	.+6      	; 0x681e <__divdi3+0xf42>
    6818:	66 24       	eor	r6, r6
    681a:	77 24       	eor	r7, r7
    681c:	43 01       	movw	r8, r6
    681e:	fe 01       	movw	r30, r28
    6820:	b1 96       	adiw	r30, 0x21	; 33
    6822:	88 e0       	ldi	r24, 0x08	; 8
    6824:	df 01       	movw	r26, r30
    6826:	1d 92       	st	X+, r1
    6828:	8a 95       	dec	r24
    682a:	e9 f7       	brne	.-6      	; 0x6826 <__divdi3+0xf4a>
    682c:	25 96       	adiw	r28, 0x05	; 5
    682e:	ac ac       	ldd	r10, Y+60	; 0x3c
    6830:	bd ac       	ldd	r11, Y+61	; 0x3d
    6832:	ce ac       	ldd	r12, Y+62	; 0x3e
    6834:	df ac       	ldd	r13, Y+63	; 0x3f
    6836:	25 97       	sbiw	r28, 0x05	; 5
    6838:	a9 a2       	std	Y+33, r10	; 0x21
    683a:	ba a2       	std	Y+34, r11	; 0x22
    683c:	cb a2       	std	Y+35, r12	; 0x23
    683e:	dc a2       	std	Y+36, r13	; 0x24
    6840:	6d a2       	std	Y+37, r6	; 0x25
    6842:	7e a2       	std	Y+38, r7	; 0x26
    6844:	8f a2       	std	Y+39, r8	; 0x27
    6846:	98 a6       	std	Y+40, r9	; 0x28
    6848:	22 96       	adiw	r28, 0x02	; 2
    684a:	2f ad       	ldd	r18, Y+63	; 0x3f
    684c:	22 97       	sbiw	r28, 0x02	; 2
    684e:	3a a1       	ldd	r19, Y+34	; 0x22
    6850:	4b a1       	ldd	r20, Y+35	; 0x23
    6852:	5c a1       	ldd	r21, Y+36	; 0x24
    6854:	66 2d       	mov	r22, r6
    6856:	7e a1       	ldd	r23, Y+38	; 0x26
    6858:	df a0       	ldd	r13, Y+39	; 0x27
    685a:	98 a5       	ldd	r25, Y+40	; 0x28
    685c:	e1 96       	adiw	r28, 0x31	; 49
    685e:	ec ac       	ldd	r14, Y+60	; 0x3c
    6860:	fd ac       	ldd	r15, Y+61	; 0x3d
    6862:	0e ad       	ldd	r16, Y+62	; 0x3e
    6864:	1f ad       	ldd	r17, Y+63	; 0x3f
    6866:	e1 97       	sbiw	r28, 0x31	; 49
    6868:	e1 14       	cp	r14, r1
    686a:	f1 04       	cpc	r15, r1
    686c:	01 05       	cpc	r16, r1
    686e:	11 05       	cpc	r17, r1
    6870:	09 f4       	brne	.+2      	; 0x6874 <__divdi3+0xf98>
    6872:	56 c0       	rjmp	.+172    	; 0x6920 <__divdi3+0x1044>
    6874:	21 95       	neg	r18
    6876:	81 e0       	ldi	r24, 0x01	; 1
    6878:	12 16       	cp	r1, r18
    687a:	08 f0       	brcs	.+2      	; 0x687e <__divdi3+0xfa2>
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	31 95       	neg	r19
    6880:	e1 e0       	ldi	r30, 0x01	; 1
    6882:	13 16       	cp	r1, r19
    6884:	08 f0       	brcs	.+2      	; 0x6888 <__divdi3+0xfac>
    6886:	e0 e0       	ldi	r30, 0x00	; 0
    6888:	93 2e       	mov	r9, r19
    688a:	98 1a       	sub	r9, r24
    688c:	81 e0       	ldi	r24, 0x01	; 1
    688e:	39 15       	cp	r19, r9
    6890:	08 f0       	brcs	.+2      	; 0x6894 <__divdi3+0xfb8>
    6892:	80 e0       	ldi	r24, 0x00	; 0
    6894:	e8 2b       	or	r30, r24
    6896:	41 95       	neg	r20
    6898:	f1 e0       	ldi	r31, 0x01	; 1
    689a:	14 16       	cp	r1, r20
    689c:	08 f0       	brcs	.+2      	; 0x68a0 <__divdi3+0xfc4>
    689e:	f0 e0       	ldi	r31, 0x00	; 0
    68a0:	a4 2e       	mov	r10, r20
    68a2:	ae 1a       	sub	r10, r30
    68a4:	81 e0       	ldi	r24, 0x01	; 1
    68a6:	4a 15       	cp	r20, r10
    68a8:	08 f0       	brcs	.+2      	; 0x68ac <__divdi3+0xfd0>
    68aa:	80 e0       	ldi	r24, 0x00	; 0
    68ac:	f8 2b       	or	r31, r24
    68ae:	51 95       	neg	r21
    68b0:	e1 e0       	ldi	r30, 0x01	; 1
    68b2:	15 16       	cp	r1, r21
    68b4:	08 f0       	brcs	.+2      	; 0x68b8 <__divdi3+0xfdc>
    68b6:	e0 e0       	ldi	r30, 0x00	; 0
    68b8:	b5 2e       	mov	r11, r21
    68ba:	bf 1a       	sub	r11, r31
    68bc:	81 e0       	ldi	r24, 0x01	; 1
    68be:	5b 15       	cp	r21, r11
    68c0:	08 f0       	brcs	.+2      	; 0x68c4 <__divdi3+0xfe8>
    68c2:	80 e0       	ldi	r24, 0x00	; 0
    68c4:	e8 2b       	or	r30, r24
    68c6:	61 95       	neg	r22
    68c8:	f1 e0       	ldi	r31, 0x01	; 1
    68ca:	16 16       	cp	r1, r22
    68cc:	08 f0       	brcs	.+2      	; 0x68d0 <__divdi3+0xff4>
    68ce:	f0 e0       	ldi	r31, 0x00	; 0
    68d0:	a6 2f       	mov	r26, r22
    68d2:	ae 1b       	sub	r26, r30
    68d4:	81 e0       	ldi	r24, 0x01	; 1
    68d6:	6a 17       	cp	r22, r26
    68d8:	08 f0       	brcs	.+2      	; 0x68dc <__divdi3+0x1000>
    68da:	80 e0       	ldi	r24, 0x00	; 0
    68dc:	f8 2b       	or	r31, r24
    68de:	71 95       	neg	r23
    68e0:	e1 e0       	ldi	r30, 0x01	; 1
    68e2:	17 16       	cp	r1, r23
    68e4:	08 f0       	brcs	.+2      	; 0x68e8 <__divdi3+0x100c>
    68e6:	e0 e0       	ldi	r30, 0x00	; 0
    68e8:	c7 2e       	mov	r12, r23
    68ea:	cf 1a       	sub	r12, r31
    68ec:	81 e0       	ldi	r24, 0x01	; 1
    68ee:	7c 15       	cp	r23, r12
    68f0:	08 f0       	brcs	.+2      	; 0x68f4 <__divdi3+0x1018>
    68f2:	80 e0       	ldi	r24, 0x00	; 0
    68f4:	e8 2b       	or	r30, r24
    68f6:	8d 2d       	mov	r24, r13
    68f8:	81 95       	neg	r24
    68fa:	f1 e0       	ldi	r31, 0x01	; 1
    68fc:	18 16       	cp	r1, r24
    68fe:	08 f0       	brcs	.+2      	; 0x6902 <__divdi3+0x1026>
    6900:	f0 e0       	ldi	r31, 0x00	; 0
    6902:	d8 2e       	mov	r13, r24
    6904:	de 1a       	sub	r13, r30
    6906:	e1 e0       	ldi	r30, 0x01	; 1
    6908:	8d 15       	cp	r24, r13
    690a:	08 f0       	brcs	.+2      	; 0x690e <__divdi3+0x1032>
    690c:	e0 e0       	ldi	r30, 0x00	; 0
    690e:	fe 2b       	or	r31, r30
    6910:	89 2f       	mov	r24, r25
    6912:	81 95       	neg	r24
    6914:	39 2d       	mov	r19, r9
    6916:	a5 01       	movw	r20, r10
    6918:	6a 2f       	mov	r22, r26
    691a:	7c 2d       	mov	r23, r12
    691c:	98 2f       	mov	r25, r24
    691e:	9f 1b       	sub	r25, r31
    6920:	8d 2d       	mov	r24, r13
    6922:	ce 58       	subi	r28, 0x8E	; 142
    6924:	df 4f       	sbci	r29, 0xFF	; 255
    6926:	e2 e1       	ldi	r30, 0x12	; 18
    6928:	0c 94 c9 45 	jmp	0x8b92	; 0x8b92 <__epilogue_restores__>

0000692c <__moddi3>:
    692c:	a7 e7       	ldi	r26, 0x77	; 119
    692e:	b0 e0       	ldi	r27, 0x00	; 0
    6930:	ec e9       	ldi	r30, 0x9C	; 156
    6932:	f4 e3       	ldi	r31, 0x34	; 52
    6934:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <__prologue_saves__>
    6938:	98 2e       	mov	r9, r24
    693a:	89 2e       	mov	r8, r25
    693c:	71 2e       	mov	r7, r17
    693e:	88 e0       	ldi	r24, 0x08	; 8
    6940:	fe 01       	movw	r30, r28
    6942:	31 96       	adiw	r30, 0x01	; 1
    6944:	df 01       	movw	r26, r30
    6946:	68 2e       	mov	r6, r24
    6948:	1d 92       	st	X+, r1
    694a:	6a 94       	dec	r6
    694c:	e9 f7       	brne	.-6      	; 0x6948 <__moddi3+0x1c>
    694e:	29 83       	std	Y+1, r18	; 0x01
    6950:	3a 83       	std	Y+2, r19	; 0x02
    6952:	4b 83       	std	Y+3, r20	; 0x03
    6954:	5c 83       	std	Y+4, r21	; 0x04
    6956:	6d 83       	std	Y+5, r22	; 0x05
    6958:	7e 83       	std	Y+6, r23	; 0x06
    695a:	9f 82       	std	Y+7, r9	; 0x07
    695c:	98 87       	std	Y+8, r25	; 0x08
    695e:	fe 01       	movw	r30, r28
    6960:	39 96       	adiw	r30, 0x09	; 9
    6962:	df 01       	movw	r26, r30
    6964:	1d 92       	st	X+, r1
    6966:	8a 95       	dec	r24
    6968:	e9 f7       	brne	.-6      	; 0x6964 <__moddi3+0x38>
    696a:	a9 86       	std	Y+9, r10	; 0x09
    696c:	ba 86       	std	Y+10, r11	; 0x0a
    696e:	cb 86       	std	Y+11, r12	; 0x0b
    6970:	dc 86       	std	Y+12, r13	; 0x0c
    6972:	ed 86       	std	Y+13, r14	; 0x0d
    6974:	fe 86       	std	Y+14, r15	; 0x0e
    6976:	0f 87       	std	Y+15, r16	; 0x0f
    6978:	18 8b       	std	Y+16, r17	; 0x10
    697a:	8d 81       	ldd	r24, Y+5	; 0x05
    697c:	9e 81       	ldd	r25, Y+6	; 0x06
    697e:	af 81       	ldd	r26, Y+7	; 0x07
    6980:	b8 85       	ldd	r27, Y+8	; 0x08
    6982:	b7 fd       	sbrc	r27, 7
    6984:	07 c0       	rjmp	.+14     	; 0x6994 <__moddi3+0x68>
    6986:	e1 96       	adiw	r28, 0x31	; 49
    6988:	1c ae       	std	Y+60, r1	; 0x3c
    698a:	1d ae       	std	Y+61, r1	; 0x3d
    698c:	1e ae       	std	Y+62, r1	; 0x3e
    698e:	1f ae       	std	Y+63, r1	; 0x3f
    6990:	e1 97       	sbiw	r28, 0x31	; 49
    6992:	64 c0       	rjmp	.+200    	; 0x6a5c <__moddi3+0x130>
    6994:	21 95       	neg	r18
    6996:	81 e0       	ldi	r24, 0x01	; 1
    6998:	12 16       	cp	r1, r18
    699a:	08 f0       	brcs	.+2      	; 0x699e <__moddi3+0x72>
    699c:	80 e0       	ldi	r24, 0x00	; 0
    699e:	31 95       	neg	r19
    69a0:	91 e0       	ldi	r25, 0x01	; 1
    69a2:	13 16       	cp	r1, r19
    69a4:	08 f0       	brcs	.+2      	; 0x69a8 <__moddi3+0x7c>
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	b3 2f       	mov	r27, r19
    69aa:	b8 1b       	sub	r27, r24
    69ac:	81 e0       	ldi	r24, 0x01	; 1
    69ae:	3b 17       	cp	r19, r27
    69b0:	08 f0       	brcs	.+2      	; 0x69b4 <__moddi3+0x88>
    69b2:	80 e0       	ldi	r24, 0x00	; 0
    69b4:	98 2b       	or	r25, r24
    69b6:	41 95       	neg	r20
    69b8:	31 e0       	ldi	r19, 0x01	; 1
    69ba:	14 16       	cp	r1, r20
    69bc:	08 f0       	brcs	.+2      	; 0x69c0 <__moddi3+0x94>
    69be:	30 e0       	ldi	r19, 0x00	; 0
    69c0:	a4 2f       	mov	r26, r20
    69c2:	a9 1b       	sub	r26, r25
    69c4:	81 e0       	ldi	r24, 0x01	; 1
    69c6:	4a 17       	cp	r20, r26
    69c8:	08 f0       	brcs	.+2      	; 0x69cc <__moddi3+0xa0>
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	38 2b       	or	r19, r24
    69ce:	51 95       	neg	r21
    69d0:	91 e0       	ldi	r25, 0x01	; 1
    69d2:	15 16       	cp	r1, r21
    69d4:	08 f0       	brcs	.+2      	; 0x69d8 <__moddi3+0xac>
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	f5 2f       	mov	r31, r21
    69da:	f3 1b       	sub	r31, r19
    69dc:	81 e0       	ldi	r24, 0x01	; 1
    69de:	5f 17       	cp	r21, r31
    69e0:	08 f0       	brcs	.+2      	; 0x69e4 <__moddi3+0xb8>
    69e2:	80 e0       	ldi	r24, 0x00	; 0
    69e4:	98 2b       	or	r25, r24
    69e6:	61 95       	neg	r22
    69e8:	31 e0       	ldi	r19, 0x01	; 1
    69ea:	16 16       	cp	r1, r22
    69ec:	08 f0       	brcs	.+2      	; 0x69f0 <__moddi3+0xc4>
    69ee:	30 e0       	ldi	r19, 0x00	; 0
    69f0:	e6 2f       	mov	r30, r22
    69f2:	e9 1b       	sub	r30, r25
    69f4:	81 e0       	ldi	r24, 0x01	; 1
    69f6:	6e 17       	cp	r22, r30
    69f8:	08 f0       	brcs	.+2      	; 0x69fc <__moddi3+0xd0>
    69fa:	80 e0       	ldi	r24, 0x00	; 0
    69fc:	38 2b       	or	r19, r24
    69fe:	71 95       	neg	r23
    6a00:	41 e0       	ldi	r20, 0x01	; 1
    6a02:	17 16       	cp	r1, r23
    6a04:	08 f0       	brcs	.+2      	; 0x6a08 <__moddi3+0xdc>
    6a06:	40 e0       	ldi	r20, 0x00	; 0
    6a08:	57 2f       	mov	r21, r23
    6a0a:	53 1b       	sub	r21, r19
    6a0c:	81 e0       	ldi	r24, 0x01	; 1
    6a0e:	75 17       	cp	r23, r21
    6a10:	08 f0       	brcs	.+2      	; 0x6a14 <__moddi3+0xe8>
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	48 2b       	or	r20, r24
    6a16:	89 2d       	mov	r24, r9
    6a18:	81 95       	neg	r24
    6a1a:	91 e0       	ldi	r25, 0x01	; 1
    6a1c:	18 16       	cp	r1, r24
    6a1e:	08 f0       	brcs	.+2      	; 0x6a22 <__moddi3+0xf6>
    6a20:	90 e0       	ldi	r25, 0x00	; 0
    6a22:	68 2e       	mov	r6, r24
    6a24:	64 1a       	sub	r6, r20
    6a26:	46 2d       	mov	r20, r6
    6a28:	31 e0       	ldi	r19, 0x01	; 1
    6a2a:	86 15       	cp	r24, r6
    6a2c:	08 f0       	brcs	.+2      	; 0x6a30 <__moddi3+0x104>
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	93 2b       	or	r25, r19
    6a32:	88 2d       	mov	r24, r8
    6a34:	81 95       	neg	r24
    6a36:	89 1b       	sub	r24, r25
    6a38:	29 83       	std	Y+1, r18	; 0x01
    6a3a:	ba 83       	std	Y+2, r27	; 0x02
    6a3c:	ab 83       	std	Y+3, r26	; 0x03
    6a3e:	fc 83       	std	Y+4, r31	; 0x04
    6a40:	ed 83       	std	Y+5, r30	; 0x05
    6a42:	5e 83       	std	Y+6, r21	; 0x06
    6a44:	4f 83       	std	Y+7, r20	; 0x07
    6a46:	88 87       	std	Y+8, r24	; 0x08
    6a48:	2f ef       	ldi	r18, 0xFF	; 255
    6a4a:	3f ef       	ldi	r19, 0xFF	; 255
    6a4c:	4f ef       	ldi	r20, 0xFF	; 255
    6a4e:	5f ef       	ldi	r21, 0xFF	; 255
    6a50:	e1 96       	adiw	r28, 0x31	; 49
    6a52:	2c af       	std	Y+60, r18	; 0x3c
    6a54:	3d af       	std	Y+61, r19	; 0x3d
    6a56:	4e af       	std	Y+62, r20	; 0x3e
    6a58:	5f af       	std	Y+63, r21	; 0x3f
    6a5a:	e1 97       	sbiw	r28, 0x31	; 49
    6a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a60:	af 85       	ldd	r26, Y+15	; 0x0f
    6a62:	b8 89       	ldd	r27, Y+16	; 0x10
    6a64:	b7 ff       	sbrs	r27, 7
    6a66:	5a c0       	rjmp	.+180    	; 0x6b1c <__moddi3+0x1f0>
    6a68:	a1 94       	neg	r10
    6a6a:	81 e0       	ldi	r24, 0x01	; 1
    6a6c:	1a 14       	cp	r1, r10
    6a6e:	08 f0       	brcs	.+2      	; 0x6a72 <__moddi3+0x146>
    6a70:	80 e0       	ldi	r24, 0x00	; 0
    6a72:	b1 94       	neg	r11
    6a74:	91 e0       	ldi	r25, 0x01	; 1
    6a76:	1b 14       	cp	r1, r11
    6a78:	08 f0       	brcs	.+2      	; 0x6a7c <__moddi3+0x150>
    6a7a:	90 e0       	ldi	r25, 0x00	; 0
    6a7c:	6b 2d       	mov	r22, r11
    6a7e:	68 1b       	sub	r22, r24
    6a80:	81 e0       	ldi	r24, 0x01	; 1
    6a82:	b6 16       	cp	r11, r22
    6a84:	08 f0       	brcs	.+2      	; 0x6a88 <__moddi3+0x15c>
    6a86:	80 e0       	ldi	r24, 0x00	; 0
    6a88:	98 2b       	or	r25, r24
    6a8a:	c1 94       	neg	r12
    6a8c:	21 e0       	ldi	r18, 0x01	; 1
    6a8e:	1c 14       	cp	r1, r12
    6a90:	08 f0       	brcs	.+2      	; 0x6a94 <__moddi3+0x168>
    6a92:	20 e0       	ldi	r18, 0x00	; 0
    6a94:	5c 2d       	mov	r21, r12
    6a96:	59 1b       	sub	r21, r25
    6a98:	81 e0       	ldi	r24, 0x01	; 1
    6a9a:	c5 16       	cp	r12, r21
    6a9c:	08 f0       	brcs	.+2      	; 0x6aa0 <__moddi3+0x174>
    6a9e:	80 e0       	ldi	r24, 0x00	; 0
    6aa0:	28 2b       	or	r18, r24
    6aa2:	d1 94       	neg	r13
    6aa4:	91 e0       	ldi	r25, 0x01	; 1
    6aa6:	1d 14       	cp	r1, r13
    6aa8:	08 f0       	brcs	.+2      	; 0x6aac <__moddi3+0x180>
    6aaa:	90 e0       	ldi	r25, 0x00	; 0
    6aac:	4d 2d       	mov	r20, r13
    6aae:	42 1b       	sub	r20, r18
    6ab0:	81 e0       	ldi	r24, 0x01	; 1
    6ab2:	d4 16       	cp	r13, r20
    6ab4:	08 f0       	brcs	.+2      	; 0x6ab8 <__moddi3+0x18c>
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	98 2b       	or	r25, r24
    6aba:	e1 94       	neg	r14
    6abc:	21 e0       	ldi	r18, 0x01	; 1
    6abe:	1e 14       	cp	r1, r14
    6ac0:	08 f0       	brcs	.+2      	; 0x6ac4 <__moddi3+0x198>
    6ac2:	20 e0       	ldi	r18, 0x00	; 0
    6ac4:	3e 2d       	mov	r19, r14
    6ac6:	39 1b       	sub	r19, r25
    6ac8:	81 e0       	ldi	r24, 0x01	; 1
    6aca:	e3 16       	cp	r14, r19
    6acc:	08 f0       	brcs	.+2      	; 0x6ad0 <__moddi3+0x1a4>
    6ace:	80 e0       	ldi	r24, 0x00	; 0
    6ad0:	28 2b       	or	r18, r24
    6ad2:	f1 94       	neg	r15
    6ad4:	91 e0       	ldi	r25, 0x01	; 1
    6ad6:	1f 14       	cp	r1, r15
    6ad8:	08 f0       	brcs	.+2      	; 0x6adc <__moddi3+0x1b0>
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	7f 2d       	mov	r23, r15
    6ade:	72 1b       	sub	r23, r18
    6ae0:	27 2f       	mov	r18, r23
    6ae2:	81 e0       	ldi	r24, 0x01	; 1
    6ae4:	f7 16       	cp	r15, r23
    6ae6:	08 f0       	brcs	.+2      	; 0x6aea <__moddi3+0x1be>
    6ae8:	80 e0       	ldi	r24, 0x00	; 0
    6aea:	98 2b       	or	r25, r24
    6aec:	01 95       	neg	r16
    6aee:	11 e0       	ldi	r17, 0x01	; 1
    6af0:	10 16       	cp	r1, r16
    6af2:	08 f0       	brcs	.+2      	; 0x6af6 <__moddi3+0x1ca>
    6af4:	10 e0       	ldi	r17, 0x00	; 0
    6af6:	80 2f       	mov	r24, r16
    6af8:	89 1b       	sub	r24, r25
    6afa:	98 2f       	mov	r25, r24
    6afc:	81 e0       	ldi	r24, 0x01	; 1
    6afe:	09 17       	cp	r16, r25
    6b00:	08 f0       	brcs	.+2      	; 0x6b04 <__moddi3+0x1d8>
    6b02:	80 e0       	ldi	r24, 0x00	; 0
    6b04:	18 2b       	or	r17, r24
    6b06:	87 2d       	mov	r24, r7
    6b08:	81 95       	neg	r24
    6b0a:	81 1b       	sub	r24, r17
    6b0c:	a9 86       	std	Y+9, r10	; 0x09
    6b0e:	6a 87       	std	Y+10, r22	; 0x0a
    6b10:	5b 87       	std	Y+11, r21	; 0x0b
    6b12:	4c 87       	std	Y+12, r20	; 0x0c
    6b14:	3d 87       	std	Y+13, r19	; 0x0d
    6b16:	2e 87       	std	Y+14, r18	; 0x0e
    6b18:	9f 87       	std	Y+15, r25	; 0x0f
    6b1a:	88 8b       	std	Y+16, r24	; 0x10
    6b1c:	99 81       	ldd	r25, Y+1	; 0x01
    6b1e:	2a 81       	ldd	r18, Y+2	; 0x02
    6b20:	3b 81       	ldd	r19, Y+3	; 0x03
    6b22:	4c 81       	ldd	r20, Y+4	; 0x04
    6b24:	5d 81       	ldd	r21, Y+5	; 0x05
    6b26:	6e 81       	ldd	r22, Y+6	; 0x06
    6b28:	7f 81       	ldd	r23, Y+7	; 0x07
    6b2a:	a8 85       	ldd	r26, Y+8	; 0x08
    6b2c:	b9 85       	ldd	r27, Y+9	; 0x09
    6b2e:	1a 85       	ldd	r17, Y+10	; 0x0a
    6b30:	0b 85       	ldd	r16, Y+11	; 0x0b
    6b32:	fc 84       	ldd	r15, Y+12	; 0x0c
    6b34:	ed 84       	ldd	r14, Y+13	; 0x0d
    6b36:	de 84       	ldd	r13, Y+14	; 0x0e
    6b38:	cf 84       	ldd	r12, Y+15	; 0x0f
    6b3a:	b8 88       	ldd	r11, Y+16	; 0x10
    6b3c:	88 e0       	ldi	r24, 0x08	; 8
    6b3e:	e9 e1       	ldi	r30, 0x19	; 25
    6b40:	8e 2e       	mov	r8, r30
    6b42:	91 2c       	mov	r9, r1
    6b44:	8c 0e       	add	r8, r28
    6b46:	9d 1e       	adc	r9, r29
    6b48:	f4 01       	movw	r30, r8
    6b4a:	68 2e       	mov	r6, r24
    6b4c:	11 92       	st	Z+, r1
    6b4e:	6a 94       	dec	r6
    6b50:	e9 f7       	brne	.-6      	; 0x6b4c <__moddi3+0x220>
    6b52:	99 8f       	std	Y+25, r25	; 0x19
    6b54:	2a 8f       	std	Y+26, r18	; 0x1a
    6b56:	3b 8f       	std	Y+27, r19	; 0x1b
    6b58:	4c 8f       	std	Y+28, r20	; 0x1c
    6b5a:	5d 8f       	std	Y+29, r21	; 0x1d
    6b5c:	6e 8f       	std	Y+30, r22	; 0x1e
    6b5e:	7f 8f       	std	Y+31, r23	; 0x1f
    6b60:	a8 a3       	std	Y+32, r26	; 0x20
    6b62:	9e 01       	movw	r18, r28
    6b64:	2f 5d       	subi	r18, 0xDF	; 223
    6b66:	3f 4f       	sbci	r19, 0xFF	; 255
    6b68:	f9 01       	movw	r30, r18
    6b6a:	11 92       	st	Z+, r1
    6b6c:	8a 95       	dec	r24
    6b6e:	e9 f7       	brne	.-6      	; 0x6b6a <__moddi3+0x23e>
    6b70:	b9 a3       	std	Y+33, r27	; 0x21
    6b72:	1a a3       	std	Y+34, r17	; 0x22
    6b74:	0b a3       	std	Y+35, r16	; 0x23
    6b76:	fc a2       	std	Y+36, r15	; 0x24
    6b78:	ed a2       	std	Y+37, r14	; 0x25
    6b7a:	de a2       	std	Y+38, r13	; 0x26
    6b7c:	cf a2       	std	Y+39, r12	; 0x27
    6b7e:	b8 a6       	std	Y+40, r11	; 0x28
    6b80:	29 a0       	ldd	r2, Y+33	; 0x21
    6b82:	3a a0       	ldd	r3, Y+34	; 0x22
    6b84:	4b a0       	ldd	r4, Y+35	; 0x23
    6b86:	5c a0       	ldd	r5, Y+36	; 0x24
    6b88:	ad a0       	ldd	r10, Y+37	; 0x25
    6b8a:	be a0       	ldd	r11, Y+38	; 0x26
    6b8c:	cf a0       	ldd	r12, Y+39	; 0x27
    6b8e:	d8 a4       	ldd	r13, Y+40	; 0x28
    6b90:	49 8d       	ldd	r20, Y+25	; 0x19
    6b92:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6b94:	6b 8d       	ldd	r22, Y+27	; 0x1b
    6b96:	7c 8d       	ldd	r23, Y+28	; 0x1c
    6b98:	e5 96       	adiw	r28, 0x35	; 53
    6b9a:	4f af       	std	Y+63, r20	; 0x3f
    6b9c:	e5 97       	sbiw	r28, 0x35	; 53
    6b9e:	e6 96       	adiw	r28, 0x36	; 54
    6ba0:	5f af       	std	Y+63, r21	; 0x3f
    6ba2:	e6 97       	sbiw	r28, 0x36	; 54
    6ba4:	e7 96       	adiw	r28, 0x37	; 55
    6ba6:	6f af       	std	Y+63, r22	; 0x3f
    6ba8:	e7 97       	sbiw	r28, 0x37	; 55
    6baa:	e8 96       	adiw	r28, 0x38	; 56
    6bac:	7f af       	std	Y+63, r23	; 0x3f
    6bae:	e8 97       	sbiw	r28, 0x38	; 56
    6bb0:	e8 96       	adiw	r28, 0x38	; 56
    6bb2:	6c ac       	ldd	r6, Y+60	; 0x3c
    6bb4:	7d ac       	ldd	r7, Y+61	; 0x3d
    6bb6:	8e ac       	ldd	r8, Y+62	; 0x3e
    6bb8:	9f ac       	ldd	r9, Y+63	; 0x3f
    6bba:	e8 97       	sbiw	r28, 0x38	; 56
    6bbc:	2d 96       	adiw	r28, 0x0d	; 13
    6bbe:	6c ae       	std	Y+60, r6	; 0x3c
    6bc0:	7d ae       	std	Y+61, r7	; 0x3d
    6bc2:	8e ae       	std	Y+62, r8	; 0x3e
    6bc4:	9f ae       	std	Y+63, r9	; 0x3f
    6bc6:	2d 97       	sbiw	r28, 0x0d	; 13
    6bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6bca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6bcc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    6bce:	38 a1       	ldd	r19, Y+32	; 0x20
    6bd0:	3c 01       	movw	r6, r24
    6bd2:	49 01       	movw	r8, r18
    6bd4:	61 96       	adiw	r28, 0x11	; 17
    6bd6:	6c ae       	std	Y+60, r6	; 0x3c
    6bd8:	7d ae       	std	Y+61, r7	; 0x3d
    6bda:	8e ae       	std	Y+62, r8	; 0x3e
    6bdc:	9f ae       	std	Y+63, r9	; 0x3f
    6bde:	61 97       	sbiw	r28, 0x11	; 17
    6be0:	a1 14       	cp	r10, r1
    6be2:	b1 04       	cpc	r11, r1
    6be4:	c1 04       	cpc	r12, r1
    6be6:	d1 04       	cpc	r13, r1
    6be8:	09 f0       	breq	.+2      	; 0x6bec <__moddi3+0x2c0>
    6bea:	28 c3       	rjmp	.+1616   	; 0x723c <__moddi3+0x910>
    6bec:	62 14       	cp	r6, r2
    6bee:	73 04       	cpc	r7, r3
    6bf0:	84 04       	cpc	r8, r4
    6bf2:	95 04       	cpc	r9, r5
    6bf4:	08 f0       	brcs	.+2      	; 0x6bf8 <__moddi3+0x2cc>
    6bf6:	0e c1       	rjmp	.+540    	; 0x6e14 <__moddi3+0x4e8>
    6bf8:	00 e0       	ldi	r16, 0x00	; 0
    6bfa:	20 16       	cp	r2, r16
    6bfc:	00 e0       	ldi	r16, 0x00	; 0
    6bfe:	30 06       	cpc	r3, r16
    6c00:	01 e0       	ldi	r16, 0x01	; 1
    6c02:	40 06       	cpc	r4, r16
    6c04:	00 e0       	ldi	r16, 0x00	; 0
    6c06:	50 06       	cpc	r5, r16
    6c08:	88 f4       	brcc	.+34     	; 0x6c2c <__moddi3+0x300>
    6c0a:	1f ef       	ldi	r17, 0xFF	; 255
    6c0c:	21 16       	cp	r2, r17
    6c0e:	31 04       	cpc	r3, r1
    6c10:	41 04       	cpc	r4, r1
    6c12:	51 04       	cpc	r5, r1
    6c14:	39 f0       	breq	.+14     	; 0x6c24 <__moddi3+0x2f8>
    6c16:	30 f0       	brcs	.+12     	; 0x6c24 <__moddi3+0x2f8>
    6c18:	18 e0       	ldi	r17, 0x08	; 8
    6c1a:	e1 2e       	mov	r14, r17
    6c1c:	f1 2c       	mov	r15, r1
    6c1e:	01 2d       	mov	r16, r1
    6c20:	11 2d       	mov	r17, r1
    6c22:	18 c0       	rjmp	.+48     	; 0x6c54 <__moddi3+0x328>
    6c24:	ee 24       	eor	r14, r14
    6c26:	ff 24       	eor	r15, r15
    6c28:	87 01       	movw	r16, r14
    6c2a:	14 c0       	rjmp	.+40     	; 0x6c54 <__moddi3+0x328>
    6c2c:	20 e0       	ldi	r18, 0x00	; 0
    6c2e:	22 16       	cp	r2, r18
    6c30:	20 e0       	ldi	r18, 0x00	; 0
    6c32:	32 06       	cpc	r3, r18
    6c34:	20 e0       	ldi	r18, 0x00	; 0
    6c36:	42 06       	cpc	r4, r18
    6c38:	21 e0       	ldi	r18, 0x01	; 1
    6c3a:	52 06       	cpc	r5, r18
    6c3c:	30 f0       	brcs	.+12     	; 0x6c4a <__moddi3+0x31e>
    6c3e:	b8 e1       	ldi	r27, 0x18	; 24
    6c40:	eb 2e       	mov	r14, r27
    6c42:	f1 2c       	mov	r15, r1
    6c44:	01 2d       	mov	r16, r1
    6c46:	11 2d       	mov	r17, r1
    6c48:	05 c0       	rjmp	.+10     	; 0x6c54 <__moddi3+0x328>
    6c4a:	a0 e1       	ldi	r26, 0x10	; 16
    6c4c:	ea 2e       	mov	r14, r26
    6c4e:	f1 2c       	mov	r15, r1
    6c50:	01 2d       	mov	r16, r1
    6c52:	11 2d       	mov	r17, r1
    6c54:	d2 01       	movw	r26, r4
    6c56:	c1 01       	movw	r24, r2
    6c58:	0e 2c       	mov	r0, r14
    6c5a:	04 c0       	rjmp	.+8      	; 0x6c64 <__moddi3+0x338>
    6c5c:	b6 95       	lsr	r27
    6c5e:	a7 95       	ror	r26
    6c60:	97 95       	ror	r25
    6c62:	87 95       	ror	r24
    6c64:	0a 94       	dec	r0
    6c66:	d2 f7       	brpl	.-12     	; 0x6c5c <__moddi3+0x330>
    6c68:	86 5b       	subi	r24, 0xB6	; 182
    6c6a:	9d 4f       	sbci	r25, 0xFD	; 253
    6c6c:	dc 01       	movw	r26, r24
    6c6e:	2c 91       	ld	r18, X
    6c70:	80 e2       	ldi	r24, 0x20	; 32
    6c72:	90 e0       	ldi	r25, 0x00	; 0
    6c74:	a0 e0       	ldi	r26, 0x00	; 0
    6c76:	b0 e0       	ldi	r27, 0x00	; 0
    6c78:	8e 19       	sub	r24, r14
    6c7a:	9f 09       	sbc	r25, r15
    6c7c:	a0 0b       	sbc	r26, r16
    6c7e:	b1 0b       	sbc	r27, r17
    6c80:	5c 01       	movw	r10, r24
    6c82:	6d 01       	movw	r12, r26
    6c84:	a2 1a       	sub	r10, r18
    6c86:	b1 08       	sbc	r11, r1
    6c88:	c1 08       	sbc	r12, r1
    6c8a:	d1 08       	sbc	r13, r1
    6c8c:	65 96       	adiw	r28, 0x15	; 21
    6c8e:	ac ae       	std	Y+60, r10	; 0x3c
    6c90:	bd ae       	std	Y+61, r11	; 0x3d
    6c92:	ce ae       	std	Y+62, r12	; 0x3e
    6c94:	df ae       	std	Y+63, r13	; 0x3f
    6c96:	65 97       	sbiw	r28, 0x15	; 21
    6c98:	a1 14       	cp	r10, r1
    6c9a:	b1 04       	cpc	r11, r1
    6c9c:	c1 04       	cpc	r12, r1
    6c9e:	d1 04       	cpc	r13, r1
    6ca0:	09 f4       	brne	.+2      	; 0x6ca4 <__moddi3+0x378>
    6ca2:	45 c0       	rjmp	.+138    	; 0x6d2e <__moddi3+0x402>
    6ca4:	62 96       	adiw	r28, 0x12	; 18
    6ca6:	6f ad       	ldd	r22, Y+63	; 0x3f
    6ca8:	62 97       	sbiw	r28, 0x12	; 18
    6caa:	06 2e       	mov	r0, r22
    6cac:	04 c0       	rjmp	.+8      	; 0x6cb6 <__moddi3+0x38a>
    6cae:	22 0c       	add	r2, r2
    6cb0:	33 1c       	adc	r3, r3
    6cb2:	44 1c       	adc	r4, r4
    6cb4:	55 1c       	adc	r5, r5
    6cb6:	0a 94       	dec	r0
    6cb8:	d2 f7       	brpl	.-12     	; 0x6cae <__moddi3+0x382>
    6cba:	a4 01       	movw	r20, r8
    6cbc:	93 01       	movw	r18, r6
    6cbe:	06 2e       	mov	r0, r22
    6cc0:	04 c0       	rjmp	.+8      	; 0x6cca <__moddi3+0x39e>
    6cc2:	22 0f       	add	r18, r18
    6cc4:	33 1f       	adc	r19, r19
    6cc6:	44 1f       	adc	r20, r20
    6cc8:	55 1f       	adc	r21, r21
    6cca:	0a 94       	dec	r0
    6ccc:	d2 f7       	brpl	.-12     	; 0x6cc2 <__moddi3+0x396>
    6cce:	80 e2       	ldi	r24, 0x20	; 32
    6cd0:	90 e0       	ldi	r25, 0x00	; 0
    6cd2:	8a 19       	sub	r24, r10
    6cd4:	9b 09       	sbc	r25, r11
    6cd6:	e8 96       	adiw	r28, 0x38	; 56
    6cd8:	cc ac       	ldd	r12, Y+60	; 0x3c
    6cda:	dd ac       	ldd	r13, Y+61	; 0x3d
    6cdc:	ee ac       	ldd	r14, Y+62	; 0x3e
    6cde:	ff ac       	ldd	r15, Y+63	; 0x3f
    6ce0:	e8 97       	sbiw	r28, 0x38	; 56
    6ce2:	04 c0       	rjmp	.+8      	; 0x6cec <__moddi3+0x3c0>
    6ce4:	f6 94       	lsr	r15
    6ce6:	e7 94       	ror	r14
    6ce8:	d7 94       	ror	r13
    6cea:	c7 94       	ror	r12
    6cec:	8a 95       	dec	r24
    6cee:	d2 f7       	brpl	.-12     	; 0x6ce4 <__moddi3+0x3b8>
    6cf0:	87 01       	movw	r16, r14
    6cf2:	76 01       	movw	r14, r12
    6cf4:	e2 2a       	or	r14, r18
    6cf6:	f3 2a       	or	r15, r19
    6cf8:	04 2b       	or	r16, r20
    6cfa:	15 2b       	or	r17, r21
    6cfc:	61 96       	adiw	r28, 0x11	; 17
    6cfe:	ec ae       	std	Y+60, r14	; 0x3c
    6d00:	fd ae       	std	Y+61, r15	; 0x3d
    6d02:	0e af       	std	Y+62, r16	; 0x3e
    6d04:	1f af       	std	Y+63, r17	; 0x3f
    6d06:	61 97       	sbiw	r28, 0x11	; 17
    6d08:	e8 96       	adiw	r28, 0x38	; 56
    6d0a:	0c ad       	ldd	r16, Y+60	; 0x3c
    6d0c:	1d ad       	ldd	r17, Y+61	; 0x3d
    6d0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    6d10:	3f ad       	ldd	r19, Y+63	; 0x3f
    6d12:	e8 97       	sbiw	r28, 0x38	; 56
    6d14:	04 c0       	rjmp	.+8      	; 0x6d1e <__moddi3+0x3f2>
    6d16:	00 0f       	add	r16, r16
    6d18:	11 1f       	adc	r17, r17
    6d1a:	22 1f       	adc	r18, r18
    6d1c:	33 1f       	adc	r19, r19
    6d1e:	6a 95       	dec	r22
    6d20:	d2 f7       	brpl	.-12     	; 0x6d16 <__moddi3+0x3ea>
    6d22:	2d 96       	adiw	r28, 0x0d	; 13
    6d24:	0c af       	std	Y+60, r16	; 0x3c
    6d26:	1d af       	std	Y+61, r17	; 0x3d
    6d28:	2e af       	std	Y+62, r18	; 0x3e
    6d2a:	3f af       	std	Y+63, r19	; 0x3f
    6d2c:	2d 97       	sbiw	r28, 0x0d	; 13
    6d2e:	32 01       	movw	r6, r4
    6d30:	88 24       	eor	r8, r8
    6d32:	99 24       	eor	r9, r9
    6d34:	a2 01       	movw	r20, r4
    6d36:	91 01       	movw	r18, r2
    6d38:	40 70       	andi	r20, 0x00	; 0
    6d3a:	50 70       	andi	r21, 0x00	; 0
    6d3c:	69 96       	adiw	r28, 0x19	; 25
    6d3e:	2c af       	std	Y+60, r18	; 0x3c
    6d40:	3d af       	std	Y+61, r19	; 0x3d
    6d42:	4e af       	std	Y+62, r20	; 0x3e
    6d44:	5f af       	std	Y+63, r21	; 0x3f
    6d46:	69 97       	sbiw	r28, 0x19	; 25
    6d48:	61 96       	adiw	r28, 0x11	; 17
    6d4a:	6c ad       	ldd	r22, Y+60	; 0x3c
    6d4c:	7d ad       	ldd	r23, Y+61	; 0x3d
    6d4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    6d50:	9f ad       	ldd	r25, Y+63	; 0x3f
    6d52:	61 97       	sbiw	r28, 0x11	; 17
    6d54:	a4 01       	movw	r20, r8
    6d56:	93 01       	movw	r18, r6
    6d58:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6d5c:	7b 01       	movw	r14, r22
    6d5e:	8c 01       	movw	r16, r24
    6d60:	61 96       	adiw	r28, 0x11	; 17
    6d62:	6c ad       	ldd	r22, Y+60	; 0x3c
    6d64:	7d ad       	ldd	r23, Y+61	; 0x3d
    6d66:	8e ad       	ldd	r24, Y+62	; 0x3e
    6d68:	9f ad       	ldd	r25, Y+63	; 0x3f
    6d6a:	61 97       	sbiw	r28, 0x11	; 17
    6d6c:	a4 01       	movw	r20, r8
    6d6e:	93 01       	movw	r18, r6
    6d70:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6d74:	ca 01       	movw	r24, r20
    6d76:	b9 01       	movw	r22, r18
    6d78:	69 96       	adiw	r28, 0x19	; 25
    6d7a:	2c ad       	ldd	r18, Y+60	; 0x3c
    6d7c:	3d ad       	ldd	r19, Y+61	; 0x3d
    6d7e:	4e ad       	ldd	r20, Y+62	; 0x3e
    6d80:	5f ad       	ldd	r21, Y+63	; 0x3f
    6d82:	69 97       	sbiw	r28, 0x19	; 25
    6d84:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    6d88:	9b 01       	movw	r18, r22
    6d8a:	ac 01       	movw	r20, r24
    6d8c:	87 01       	movw	r16, r14
    6d8e:	ff 24       	eor	r15, r15
    6d90:	ee 24       	eor	r14, r14
    6d92:	2d 96       	adiw	r28, 0x0d	; 13
    6d94:	ac ac       	ldd	r10, Y+60	; 0x3c
    6d96:	bd ac       	ldd	r11, Y+61	; 0x3d
    6d98:	ce ac       	ldd	r12, Y+62	; 0x3e
    6d9a:	df ac       	ldd	r13, Y+63	; 0x3f
    6d9c:	2d 97       	sbiw	r28, 0x0d	; 13
    6d9e:	c6 01       	movw	r24, r12
    6da0:	aa 27       	eor	r26, r26
    6da2:	bb 27       	eor	r27, r27
    6da4:	57 01       	movw	r10, r14
    6da6:	68 01       	movw	r12, r16
    6da8:	a8 2a       	or	r10, r24
    6daa:	b9 2a       	or	r11, r25
    6dac:	ca 2a       	or	r12, r26
    6dae:	db 2a       	or	r13, r27
    6db0:	a2 16       	cp	r10, r18
    6db2:	b3 06       	cpc	r11, r19
    6db4:	c4 06       	cpc	r12, r20
    6db6:	d5 06       	cpc	r13, r21
    6db8:	90 f4       	brcc	.+36     	; 0x6dde <__moddi3+0x4b2>
    6dba:	a2 0c       	add	r10, r2
    6dbc:	b3 1c       	adc	r11, r3
    6dbe:	c4 1c       	adc	r12, r4
    6dc0:	d5 1c       	adc	r13, r5
    6dc2:	a2 14       	cp	r10, r2
    6dc4:	b3 04       	cpc	r11, r3
    6dc6:	c4 04       	cpc	r12, r4
    6dc8:	d5 04       	cpc	r13, r5
    6dca:	48 f0       	brcs	.+18     	; 0x6dde <__moddi3+0x4b2>
    6dcc:	a2 16       	cp	r10, r18
    6dce:	b3 06       	cpc	r11, r19
    6dd0:	c4 06       	cpc	r12, r20
    6dd2:	d5 06       	cpc	r13, r21
    6dd4:	20 f4       	brcc	.+8      	; 0x6dde <__moddi3+0x4b2>
    6dd6:	a2 0c       	add	r10, r2
    6dd8:	b3 1c       	adc	r11, r3
    6dda:	c4 1c       	adc	r12, r4
    6ddc:	d5 1c       	adc	r13, r5
    6dde:	a2 1a       	sub	r10, r18
    6de0:	b3 0a       	sbc	r11, r19
    6de2:	c4 0a       	sbc	r12, r20
    6de4:	d5 0a       	sbc	r13, r21
    6de6:	c6 01       	movw	r24, r12
    6de8:	b5 01       	movw	r22, r10
    6dea:	a4 01       	movw	r20, r8
    6dec:	93 01       	movw	r18, r6
    6dee:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6df2:	7b 01       	movw	r14, r22
    6df4:	8c 01       	movw	r16, r24
    6df6:	c6 01       	movw	r24, r12
    6df8:	b5 01       	movw	r22, r10
    6dfa:	a4 01       	movw	r20, r8
    6dfc:	93 01       	movw	r18, r6
    6dfe:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6e02:	ca 01       	movw	r24, r20
    6e04:	b9 01       	movw	r22, r18
    6e06:	69 96       	adiw	r28, 0x19	; 25
    6e08:	2c ad       	ldd	r18, Y+60	; 0x3c
    6e0a:	3d ad       	ldd	r19, Y+61	; 0x3d
    6e0c:	4e ad       	ldd	r20, Y+62	; 0x3e
    6e0e:	5f ad       	ldd	r21, Y+63	; 0x3f
    6e10:	69 97       	sbiw	r28, 0x19	; 25
    6e12:	c8 c1       	rjmp	.+912    	; 0x71a4 <__moddi3+0x878>
    6e14:	21 14       	cp	r2, r1
    6e16:	31 04       	cpc	r3, r1
    6e18:	41 04       	cpc	r4, r1
    6e1a:	51 04       	cpc	r5, r1
    6e1c:	71 f4       	brne	.+28     	; 0x6e3a <__moddi3+0x50e>
    6e1e:	61 e0       	ldi	r22, 0x01	; 1
    6e20:	70 e0       	ldi	r23, 0x00	; 0
    6e22:	80 e0       	ldi	r24, 0x00	; 0
    6e24:	90 e0       	ldi	r25, 0x00	; 0
    6e26:	20 e0       	ldi	r18, 0x00	; 0
    6e28:	30 e0       	ldi	r19, 0x00	; 0
    6e2a:	40 e0       	ldi	r20, 0x00	; 0
    6e2c:	50 e0       	ldi	r21, 0x00	; 0
    6e2e:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6e32:	c9 01       	movw	r24, r18
    6e34:	da 01       	movw	r26, r20
    6e36:	1c 01       	movw	r2, r24
    6e38:	2d 01       	movw	r4, r26
    6e3a:	00 e0       	ldi	r16, 0x00	; 0
    6e3c:	20 16       	cp	r2, r16
    6e3e:	00 e0       	ldi	r16, 0x00	; 0
    6e40:	30 06       	cpc	r3, r16
    6e42:	01 e0       	ldi	r16, 0x01	; 1
    6e44:	40 06       	cpc	r4, r16
    6e46:	00 e0       	ldi	r16, 0x00	; 0
    6e48:	50 06       	cpc	r5, r16
    6e4a:	88 f4       	brcc	.+34     	; 0x6e6e <__moddi3+0x542>
    6e4c:	1f ef       	ldi	r17, 0xFF	; 255
    6e4e:	21 16       	cp	r2, r17
    6e50:	31 04       	cpc	r3, r1
    6e52:	41 04       	cpc	r4, r1
    6e54:	51 04       	cpc	r5, r1
    6e56:	39 f0       	breq	.+14     	; 0x6e66 <__moddi3+0x53a>
    6e58:	30 f0       	brcs	.+12     	; 0x6e66 <__moddi3+0x53a>
    6e5a:	68 e0       	ldi	r22, 0x08	; 8
    6e5c:	e6 2e       	mov	r14, r22
    6e5e:	f1 2c       	mov	r15, r1
    6e60:	01 2d       	mov	r16, r1
    6e62:	11 2d       	mov	r17, r1
    6e64:	18 c0       	rjmp	.+48     	; 0x6e96 <__moddi3+0x56a>
    6e66:	ee 24       	eor	r14, r14
    6e68:	ff 24       	eor	r15, r15
    6e6a:	87 01       	movw	r16, r14
    6e6c:	14 c0       	rjmp	.+40     	; 0x6e96 <__moddi3+0x56a>
    6e6e:	20 e0       	ldi	r18, 0x00	; 0
    6e70:	22 16       	cp	r2, r18
    6e72:	20 e0       	ldi	r18, 0x00	; 0
    6e74:	32 06       	cpc	r3, r18
    6e76:	20 e0       	ldi	r18, 0x00	; 0
    6e78:	42 06       	cpc	r4, r18
    6e7a:	21 e0       	ldi	r18, 0x01	; 1
    6e7c:	52 06       	cpc	r5, r18
    6e7e:	30 f0       	brcs	.+12     	; 0x6e8c <__moddi3+0x560>
    6e80:	58 e1       	ldi	r21, 0x18	; 24
    6e82:	e5 2e       	mov	r14, r21
    6e84:	f1 2c       	mov	r15, r1
    6e86:	01 2d       	mov	r16, r1
    6e88:	11 2d       	mov	r17, r1
    6e8a:	05 c0       	rjmp	.+10     	; 0x6e96 <__moddi3+0x56a>
    6e8c:	40 e1       	ldi	r20, 0x10	; 16
    6e8e:	e4 2e       	mov	r14, r20
    6e90:	f1 2c       	mov	r15, r1
    6e92:	01 2d       	mov	r16, r1
    6e94:	11 2d       	mov	r17, r1
    6e96:	d2 01       	movw	r26, r4
    6e98:	c1 01       	movw	r24, r2
    6e9a:	0e 2c       	mov	r0, r14
    6e9c:	04 c0       	rjmp	.+8      	; 0x6ea6 <__moddi3+0x57a>
    6e9e:	b6 95       	lsr	r27
    6ea0:	a7 95       	ror	r26
    6ea2:	97 95       	ror	r25
    6ea4:	87 95       	ror	r24
    6ea6:	0a 94       	dec	r0
    6ea8:	d2 f7       	brpl	.-12     	; 0x6e9e <__moddi3+0x572>
    6eaa:	86 5b       	subi	r24, 0xB6	; 182
    6eac:	9d 4f       	sbci	r25, 0xFD	; 253
    6eae:	dc 01       	movw	r26, r24
    6eb0:	2c 91       	ld	r18, X
    6eb2:	30 e2       	ldi	r19, 0x20	; 32
    6eb4:	a3 2e       	mov	r10, r19
    6eb6:	b1 2c       	mov	r11, r1
    6eb8:	c1 2c       	mov	r12, r1
    6eba:	d1 2c       	mov	r13, r1
    6ebc:	d6 01       	movw	r26, r12
    6ebe:	c5 01       	movw	r24, r10
    6ec0:	8e 19       	sub	r24, r14
    6ec2:	9f 09       	sbc	r25, r15
    6ec4:	a0 0b       	sbc	r26, r16
    6ec6:	b1 0b       	sbc	r27, r17
    6ec8:	7c 01       	movw	r14, r24
    6eca:	8d 01       	movw	r16, r26
    6ecc:	e2 1a       	sub	r14, r18
    6ece:	f1 08       	sbc	r15, r1
    6ed0:	01 09       	sbc	r16, r1
    6ed2:	11 09       	sbc	r17, r1
    6ed4:	65 96       	adiw	r28, 0x15	; 21
    6ed6:	ec ae       	std	Y+60, r14	; 0x3c
    6ed8:	fd ae       	std	Y+61, r15	; 0x3d
    6eda:	0e af       	std	Y+62, r16	; 0x3e
    6edc:	1f af       	std	Y+63, r17	; 0x3f
    6ede:	65 97       	sbiw	r28, 0x15	; 21
    6ee0:	e1 14       	cp	r14, r1
    6ee2:	f1 04       	cpc	r15, r1
    6ee4:	01 05       	cpc	r16, r1
    6ee6:	11 05       	cpc	r17, r1
    6ee8:	39 f4       	brne	.+14     	; 0x6ef8 <__moddi3+0x5cc>
    6eea:	64 01       	movw	r12, r8
    6eec:	53 01       	movw	r10, r6
    6eee:	a2 18       	sub	r10, r2
    6ef0:	b3 08       	sbc	r11, r3
    6ef2:	c4 08       	sbc	r12, r4
    6ef4:	d5 08       	sbc	r13, r5
    6ef6:	ec c0       	rjmp	.+472    	; 0x70d0 <__moddi3+0x7a4>
    6ef8:	62 96       	adiw	r28, 0x12	; 18
    6efa:	ff ac       	ldd	r15, Y+63	; 0x3f
    6efc:	62 97       	sbiw	r28, 0x12	; 18
    6efe:	e4 96       	adiw	r28, 0x34	; 52
    6f00:	ff ae       	std	Y+63, r15	; 0x3f
    6f02:	e4 97       	sbiw	r28, 0x34	; 52
    6f04:	0f 2c       	mov	r0, r15
    6f06:	04 c0       	rjmp	.+8      	; 0x6f10 <__moddi3+0x5e4>
    6f08:	22 0c       	add	r2, r2
    6f0a:	33 1c       	adc	r3, r3
    6f0c:	44 1c       	adc	r4, r4
    6f0e:	55 1c       	adc	r5, r5
    6f10:	0a 94       	dec	r0
    6f12:	d2 f7       	brpl	.-12     	; 0x6f08 <__moddi3+0x5dc>
    6f14:	8a 2d       	mov	r24, r10
    6f16:	8f 19       	sub	r24, r15
    6f18:	64 01       	movw	r12, r8
    6f1a:	53 01       	movw	r10, r6
    6f1c:	08 2e       	mov	r0, r24
    6f1e:	04 c0       	rjmp	.+8      	; 0x6f28 <__moddi3+0x5fc>
    6f20:	d6 94       	lsr	r13
    6f22:	c7 94       	ror	r12
    6f24:	b7 94       	ror	r11
    6f26:	a7 94       	ror	r10
    6f28:	0a 94       	dec	r0
    6f2a:	d2 f7       	brpl	.-12     	; 0x6f20 <__moddi3+0x5f4>
    6f2c:	a4 01       	movw	r20, r8
    6f2e:	93 01       	movw	r18, r6
    6f30:	04 c0       	rjmp	.+8      	; 0x6f3a <__moddi3+0x60e>
    6f32:	22 0f       	add	r18, r18
    6f34:	33 1f       	adc	r19, r19
    6f36:	44 1f       	adc	r20, r20
    6f38:	55 1f       	adc	r21, r21
    6f3a:	fa 94       	dec	r15
    6f3c:	d2 f7       	brpl	.-12     	; 0x6f32 <__moddi3+0x606>
    6f3e:	e8 96       	adiw	r28, 0x38	; 56
    6f40:	6c ac       	ldd	r6, Y+60	; 0x3c
    6f42:	7d ac       	ldd	r7, Y+61	; 0x3d
    6f44:	8e ac       	ldd	r8, Y+62	; 0x3e
    6f46:	9f ac       	ldd	r9, Y+63	; 0x3f
    6f48:	e8 97       	sbiw	r28, 0x38	; 56
    6f4a:	04 c0       	rjmp	.+8      	; 0x6f54 <__moddi3+0x628>
    6f4c:	96 94       	lsr	r9
    6f4e:	87 94       	ror	r8
    6f50:	77 94       	ror	r7
    6f52:	67 94       	ror	r6
    6f54:	8a 95       	dec	r24
    6f56:	d2 f7       	brpl	.-12     	; 0x6f4c <__moddi3+0x620>
    6f58:	84 01       	movw	r16, r8
    6f5a:	73 01       	movw	r14, r6
    6f5c:	e2 2a       	or	r14, r18
    6f5e:	f3 2a       	or	r15, r19
    6f60:	04 2b       	or	r16, r20
    6f62:	15 2b       	or	r17, r21
    6f64:	29 96       	adiw	r28, 0x09	; 9
    6f66:	ec ae       	std	Y+60, r14	; 0x3c
    6f68:	fd ae       	std	Y+61, r15	; 0x3d
    6f6a:	0e af       	std	Y+62, r16	; 0x3e
    6f6c:	1f af       	std	Y+63, r17	; 0x3f
    6f6e:	29 97       	sbiw	r28, 0x09	; 9
    6f70:	32 01       	movw	r6, r4
    6f72:	88 24       	eor	r8, r8
    6f74:	99 24       	eor	r9, r9
    6f76:	92 01       	movw	r18, r4
    6f78:	81 01       	movw	r16, r2
    6f7a:	20 70       	andi	r18, 0x00	; 0
    6f7c:	30 70       	andi	r19, 0x00	; 0
    6f7e:	6d 96       	adiw	r28, 0x1d	; 29
    6f80:	0c af       	std	Y+60, r16	; 0x3c
    6f82:	1d af       	std	Y+61, r17	; 0x3d
    6f84:	2e af       	std	Y+62, r18	; 0x3e
    6f86:	3f af       	std	Y+63, r19	; 0x3f
    6f88:	6d 97       	sbiw	r28, 0x1d	; 29
    6f8a:	c6 01       	movw	r24, r12
    6f8c:	b5 01       	movw	r22, r10
    6f8e:	a4 01       	movw	r20, r8
    6f90:	93 01       	movw	r18, r6
    6f92:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6f96:	7b 01       	movw	r14, r22
    6f98:	8c 01       	movw	r16, r24
    6f9a:	c6 01       	movw	r24, r12
    6f9c:	b5 01       	movw	r22, r10
    6f9e:	a4 01       	movw	r20, r8
    6fa0:	93 01       	movw	r18, r6
    6fa2:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    6fa6:	ca 01       	movw	r24, r20
    6fa8:	b9 01       	movw	r22, r18
    6faa:	6d 96       	adiw	r28, 0x1d	; 29
    6fac:	2c ad       	ldd	r18, Y+60	; 0x3c
    6fae:	3d ad       	ldd	r19, Y+61	; 0x3d
    6fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
    6fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    6fb4:	6d 97       	sbiw	r28, 0x1d	; 29
    6fb6:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    6fba:	9b 01       	movw	r18, r22
    6fbc:	ac 01       	movw	r20, r24
    6fbe:	87 01       	movw	r16, r14
    6fc0:	ff 24       	eor	r15, r15
    6fc2:	ee 24       	eor	r14, r14
    6fc4:	29 96       	adiw	r28, 0x09	; 9
    6fc6:	ac ac       	ldd	r10, Y+60	; 0x3c
    6fc8:	bd ac       	ldd	r11, Y+61	; 0x3d
    6fca:	ce ac       	ldd	r12, Y+62	; 0x3e
    6fcc:	df ac       	ldd	r13, Y+63	; 0x3f
    6fce:	29 97       	sbiw	r28, 0x09	; 9
    6fd0:	c6 01       	movw	r24, r12
    6fd2:	aa 27       	eor	r26, r26
    6fd4:	bb 27       	eor	r27, r27
    6fd6:	5c 01       	movw	r10, r24
    6fd8:	6d 01       	movw	r12, r26
    6fda:	ae 28       	or	r10, r14
    6fdc:	bf 28       	or	r11, r15
    6fde:	c0 2a       	or	r12, r16
    6fe0:	d1 2a       	or	r13, r17
    6fe2:	a2 16       	cp	r10, r18
    6fe4:	b3 06       	cpc	r11, r19
    6fe6:	c4 06       	cpc	r12, r20
    6fe8:	d5 06       	cpc	r13, r21
    6fea:	90 f4       	brcc	.+36     	; 0x7010 <__moddi3+0x6e4>
    6fec:	a2 0c       	add	r10, r2
    6fee:	b3 1c       	adc	r11, r3
    6ff0:	c4 1c       	adc	r12, r4
    6ff2:	d5 1c       	adc	r13, r5
    6ff4:	a2 14       	cp	r10, r2
    6ff6:	b3 04       	cpc	r11, r3
    6ff8:	c4 04       	cpc	r12, r4
    6ffa:	d5 04       	cpc	r13, r5
    6ffc:	48 f0       	brcs	.+18     	; 0x7010 <__moddi3+0x6e4>
    6ffe:	a2 16       	cp	r10, r18
    7000:	b3 06       	cpc	r11, r19
    7002:	c4 06       	cpc	r12, r20
    7004:	d5 06       	cpc	r13, r21
    7006:	20 f4       	brcc	.+8      	; 0x7010 <__moddi3+0x6e4>
    7008:	a2 0c       	add	r10, r2
    700a:	b3 1c       	adc	r11, r3
    700c:	c4 1c       	adc	r12, r4
    700e:	d5 1c       	adc	r13, r5
    7010:	a2 1a       	sub	r10, r18
    7012:	b3 0a       	sbc	r11, r19
    7014:	c4 0a       	sbc	r12, r20
    7016:	d5 0a       	sbc	r13, r21
    7018:	c6 01       	movw	r24, r12
    701a:	b5 01       	movw	r22, r10
    701c:	a4 01       	movw	r20, r8
    701e:	93 01       	movw	r18, r6
    7020:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    7024:	7b 01       	movw	r14, r22
    7026:	8c 01       	movw	r16, r24
    7028:	c6 01       	movw	r24, r12
    702a:	b5 01       	movw	r22, r10
    702c:	a4 01       	movw	r20, r8
    702e:	93 01       	movw	r18, r6
    7030:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    7034:	ca 01       	movw	r24, r20
    7036:	b9 01       	movw	r22, r18
    7038:	6d 96       	adiw	r28, 0x1d	; 29
    703a:	2c ad       	ldd	r18, Y+60	; 0x3c
    703c:	3d ad       	ldd	r19, Y+61	; 0x3d
    703e:	4e ad       	ldd	r20, Y+62	; 0x3e
    7040:	5f ad       	ldd	r21, Y+63	; 0x3f
    7042:	6d 97       	sbiw	r28, 0x1d	; 29
    7044:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    7048:	9b 01       	movw	r18, r22
    704a:	ac 01       	movw	r20, r24
    704c:	87 01       	movw	r16, r14
    704e:	ff 24       	eor	r15, r15
    7050:	ee 24       	eor	r14, r14
    7052:	29 96       	adiw	r28, 0x09	; 9
    7054:	8c ad       	ldd	r24, Y+60	; 0x3c
    7056:	9d ad       	ldd	r25, Y+61	; 0x3d
    7058:	ae ad       	ldd	r26, Y+62	; 0x3e
    705a:	bf ad       	ldd	r27, Y+63	; 0x3f
    705c:	29 97       	sbiw	r28, 0x09	; 9
    705e:	a0 70       	andi	r26, 0x00	; 0
    7060:	b0 70       	andi	r27, 0x00	; 0
    7062:	57 01       	movw	r10, r14
    7064:	68 01       	movw	r12, r16
    7066:	a8 2a       	or	r10, r24
    7068:	b9 2a       	or	r11, r25
    706a:	ca 2a       	or	r12, r26
    706c:	db 2a       	or	r13, r27
    706e:	a2 16       	cp	r10, r18
    7070:	b3 06       	cpc	r11, r19
    7072:	c4 06       	cpc	r12, r20
    7074:	d5 06       	cpc	r13, r21
    7076:	90 f4       	brcc	.+36     	; 0x709c <__moddi3+0x770>
    7078:	a2 0c       	add	r10, r2
    707a:	b3 1c       	adc	r11, r3
    707c:	c4 1c       	adc	r12, r4
    707e:	d5 1c       	adc	r13, r5
    7080:	a2 14       	cp	r10, r2
    7082:	b3 04       	cpc	r11, r3
    7084:	c4 04       	cpc	r12, r4
    7086:	d5 04       	cpc	r13, r5
    7088:	48 f0       	brcs	.+18     	; 0x709c <__moddi3+0x770>
    708a:	a2 16       	cp	r10, r18
    708c:	b3 06       	cpc	r11, r19
    708e:	c4 06       	cpc	r12, r20
    7090:	d5 06       	cpc	r13, r21
    7092:	20 f4       	brcc	.+8      	; 0x709c <__moddi3+0x770>
    7094:	a2 0c       	add	r10, r2
    7096:	b3 1c       	adc	r11, r3
    7098:	c4 1c       	adc	r12, r4
    709a:	d5 1c       	adc	r13, r5
    709c:	e8 96       	adiw	r28, 0x38	; 56
    709e:	ec ac       	ldd	r14, Y+60	; 0x3c
    70a0:	fd ac       	ldd	r15, Y+61	; 0x3d
    70a2:	0e ad       	ldd	r16, Y+62	; 0x3e
    70a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    70a6:	e8 97       	sbiw	r28, 0x38	; 56
    70a8:	e4 96       	adiw	r28, 0x34	; 52
    70aa:	0f ac       	ldd	r0, Y+63	; 0x3f
    70ac:	e4 97       	sbiw	r28, 0x34	; 52
    70ae:	04 c0       	rjmp	.+8      	; 0x70b8 <__moddi3+0x78c>
    70b0:	ee 0c       	add	r14, r14
    70b2:	ff 1c       	adc	r15, r15
    70b4:	00 1f       	adc	r16, r16
    70b6:	11 1f       	adc	r17, r17
    70b8:	0a 94       	dec	r0
    70ba:	d2 f7       	brpl	.-12     	; 0x70b0 <__moddi3+0x784>
    70bc:	2d 96       	adiw	r28, 0x0d	; 13
    70be:	ec ae       	std	Y+60, r14	; 0x3c
    70c0:	fd ae       	std	Y+61, r15	; 0x3d
    70c2:	0e af       	std	Y+62, r16	; 0x3e
    70c4:	1f af       	std	Y+63, r17	; 0x3f
    70c6:	2d 97       	sbiw	r28, 0x0d	; 13
    70c8:	a2 1a       	sub	r10, r18
    70ca:	b3 0a       	sbc	r11, r19
    70cc:	c4 0a       	sbc	r12, r20
    70ce:	d5 0a       	sbc	r13, r21
    70d0:	32 01       	movw	r6, r4
    70d2:	88 24       	eor	r8, r8
    70d4:	99 24       	eor	r9, r9
    70d6:	92 01       	movw	r18, r4
    70d8:	81 01       	movw	r16, r2
    70da:	20 70       	andi	r18, 0x00	; 0
    70dc:	30 70       	andi	r19, 0x00	; 0
    70de:	a1 96       	adiw	r28, 0x21	; 33
    70e0:	0c af       	std	Y+60, r16	; 0x3c
    70e2:	1d af       	std	Y+61, r17	; 0x3d
    70e4:	2e af       	std	Y+62, r18	; 0x3e
    70e6:	3f af       	std	Y+63, r19	; 0x3f
    70e8:	a1 97       	sbiw	r28, 0x21	; 33
    70ea:	c6 01       	movw	r24, r12
    70ec:	b5 01       	movw	r22, r10
    70ee:	a4 01       	movw	r20, r8
    70f0:	93 01       	movw	r18, r6
    70f2:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    70f6:	7b 01       	movw	r14, r22
    70f8:	8c 01       	movw	r16, r24
    70fa:	c6 01       	movw	r24, r12
    70fc:	b5 01       	movw	r22, r10
    70fe:	a4 01       	movw	r20, r8
    7100:	93 01       	movw	r18, r6
    7102:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    7106:	ca 01       	movw	r24, r20
    7108:	b9 01       	movw	r22, r18
    710a:	a1 96       	adiw	r28, 0x21	; 33
    710c:	2c ad       	ldd	r18, Y+60	; 0x3c
    710e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7110:	4e ad       	ldd	r20, Y+62	; 0x3e
    7112:	5f ad       	ldd	r21, Y+63	; 0x3f
    7114:	a1 97       	sbiw	r28, 0x21	; 33
    7116:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    711a:	9b 01       	movw	r18, r22
    711c:	ac 01       	movw	r20, r24
    711e:	87 01       	movw	r16, r14
    7120:	ff 24       	eor	r15, r15
    7122:	ee 24       	eor	r14, r14
    7124:	2d 96       	adiw	r28, 0x0d	; 13
    7126:	ac ac       	ldd	r10, Y+60	; 0x3c
    7128:	bd ac       	ldd	r11, Y+61	; 0x3d
    712a:	ce ac       	ldd	r12, Y+62	; 0x3e
    712c:	df ac       	ldd	r13, Y+63	; 0x3f
    712e:	2d 97       	sbiw	r28, 0x0d	; 13
    7130:	c6 01       	movw	r24, r12
    7132:	aa 27       	eor	r26, r26
    7134:	bb 27       	eor	r27, r27
    7136:	57 01       	movw	r10, r14
    7138:	68 01       	movw	r12, r16
    713a:	a8 2a       	or	r10, r24
    713c:	b9 2a       	or	r11, r25
    713e:	ca 2a       	or	r12, r26
    7140:	db 2a       	or	r13, r27
    7142:	a2 16       	cp	r10, r18
    7144:	b3 06       	cpc	r11, r19
    7146:	c4 06       	cpc	r12, r20
    7148:	d5 06       	cpc	r13, r21
    714a:	90 f4       	brcc	.+36     	; 0x7170 <__moddi3+0x844>
    714c:	a2 0c       	add	r10, r2
    714e:	b3 1c       	adc	r11, r3
    7150:	c4 1c       	adc	r12, r4
    7152:	d5 1c       	adc	r13, r5
    7154:	a2 14       	cp	r10, r2
    7156:	b3 04       	cpc	r11, r3
    7158:	c4 04       	cpc	r12, r4
    715a:	d5 04       	cpc	r13, r5
    715c:	48 f0       	brcs	.+18     	; 0x7170 <__moddi3+0x844>
    715e:	a2 16       	cp	r10, r18
    7160:	b3 06       	cpc	r11, r19
    7162:	c4 06       	cpc	r12, r20
    7164:	d5 06       	cpc	r13, r21
    7166:	20 f4       	brcc	.+8      	; 0x7170 <__moddi3+0x844>
    7168:	a2 0c       	add	r10, r2
    716a:	b3 1c       	adc	r11, r3
    716c:	c4 1c       	adc	r12, r4
    716e:	d5 1c       	adc	r13, r5
    7170:	a2 1a       	sub	r10, r18
    7172:	b3 0a       	sbc	r11, r19
    7174:	c4 0a       	sbc	r12, r20
    7176:	d5 0a       	sbc	r13, r21
    7178:	c6 01       	movw	r24, r12
    717a:	b5 01       	movw	r22, r10
    717c:	a4 01       	movw	r20, r8
    717e:	93 01       	movw	r18, r6
    7180:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    7184:	7b 01       	movw	r14, r22
    7186:	8c 01       	movw	r16, r24
    7188:	c6 01       	movw	r24, r12
    718a:	b5 01       	movw	r22, r10
    718c:	a4 01       	movw	r20, r8
    718e:	93 01       	movw	r18, r6
    7190:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    7194:	ca 01       	movw	r24, r20
    7196:	b9 01       	movw	r22, r18
    7198:	a1 96       	adiw	r28, 0x21	; 33
    719a:	2c ad       	ldd	r18, Y+60	; 0x3c
    719c:	3d ad       	ldd	r19, Y+61	; 0x3d
    719e:	4e ad       	ldd	r20, Y+62	; 0x3e
    71a0:	5f ad       	ldd	r21, Y+63	; 0x3f
    71a2:	a1 97       	sbiw	r28, 0x21	; 33
    71a4:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    71a8:	9b 01       	movw	r18, r22
    71aa:	ac 01       	movw	r20, r24
    71ac:	87 01       	movw	r16, r14
    71ae:	ff 24       	eor	r15, r15
    71b0:	ee 24       	eor	r14, r14
    71b2:	2d 96       	adiw	r28, 0x0d	; 13
    71b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    71b6:	9d ad       	ldd	r25, Y+61	; 0x3d
    71b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    71ba:	bf ad       	ldd	r27, Y+63	; 0x3f
    71bc:	2d 97       	sbiw	r28, 0x0d	; 13
    71be:	a0 70       	andi	r26, 0x00	; 0
    71c0:	b0 70       	andi	r27, 0x00	; 0
    71c2:	e8 2a       	or	r14, r24
    71c4:	f9 2a       	or	r15, r25
    71c6:	0a 2b       	or	r16, r26
    71c8:	1b 2b       	or	r17, r27
    71ca:	e2 16       	cp	r14, r18
    71cc:	f3 06       	cpc	r15, r19
    71ce:	04 07       	cpc	r16, r20
    71d0:	15 07       	cpc	r17, r21
    71d2:	90 f4       	brcc	.+36     	; 0x71f8 <__moddi3+0x8cc>
    71d4:	e2 0c       	add	r14, r2
    71d6:	f3 1c       	adc	r15, r3
    71d8:	04 1d       	adc	r16, r4
    71da:	15 1d       	adc	r17, r5
    71dc:	e2 14       	cp	r14, r2
    71de:	f3 04       	cpc	r15, r3
    71e0:	04 05       	cpc	r16, r4
    71e2:	15 05       	cpc	r17, r5
    71e4:	48 f0       	brcs	.+18     	; 0x71f8 <__moddi3+0x8cc>
    71e6:	e2 16       	cp	r14, r18
    71e8:	f3 06       	cpc	r15, r19
    71ea:	04 07       	cpc	r16, r20
    71ec:	15 07       	cpc	r17, r21
    71ee:	20 f4       	brcc	.+8      	; 0x71f8 <__moddi3+0x8cc>
    71f0:	e2 0c       	add	r14, r2
    71f2:	f3 1c       	adc	r15, r3
    71f4:	04 1d       	adc	r16, r4
    71f6:	15 1d       	adc	r17, r5
    71f8:	e2 1a       	sub	r14, r18
    71fa:	f3 0a       	sbc	r15, r19
    71fc:	04 0b       	sbc	r16, r20
    71fe:	15 0b       	sbc	r17, r21
    7200:	d8 01       	movw	r26, r16
    7202:	c7 01       	movw	r24, r14
    7204:	62 96       	adiw	r28, 0x12	; 18
    7206:	0f ac       	ldd	r0, Y+63	; 0x3f
    7208:	62 97       	sbiw	r28, 0x12	; 18
    720a:	04 c0       	rjmp	.+8      	; 0x7214 <__moddi3+0x8e8>
    720c:	b6 95       	lsr	r27
    720e:	a7 95       	ror	r26
    7210:	97 95       	ror	r25
    7212:	87 95       	ror	r24
    7214:	0a 94       	dec	r0
    7216:	d2 f7       	brpl	.-12     	; 0x720c <__moddi3+0x8e0>
    7218:	89 a7       	std	Y+41, r24	; 0x29
    721a:	9a a7       	std	Y+42, r25	; 0x2a
    721c:	ab a7       	std	Y+43, r26	; 0x2b
    721e:	bc a7       	std	Y+44, r27	; 0x2c
    7220:	1d a6       	std	Y+45, r1	; 0x2d
    7222:	1e a6       	std	Y+46, r1	; 0x2e
    7224:	1f a6       	std	Y+47, r1	; 0x2f
    7226:	18 aa       	std	Y+48, r1	; 0x30
    7228:	89 8b       	std	Y+17, r24	; 0x11
    722a:	8a a5       	ldd	r24, Y+42	; 0x2a
    722c:	8a 8b       	std	Y+18, r24	; 0x12
    722e:	8b a5       	ldd	r24, Y+43	; 0x2b
    7230:	8b 8b       	std	Y+19, r24	; 0x13
    7232:	8c a5       	ldd	r24, Y+44	; 0x2c
    7234:	8c 8b       	std	Y+20, r24	; 0x14
    7236:	8d a5       	ldd	r24, Y+45	; 0x2d
    7238:	8d 8b       	std	Y+21, r24	; 0x15
    723a:	2f c3       	rjmp	.+1630   	; 0x789a <__moddi3+0xf6e>
    723c:	6a 14       	cp	r6, r10
    723e:	7b 04       	cpc	r7, r11
    7240:	8c 04       	cpc	r8, r12
    7242:	9d 04       	cpc	r9, r13
    7244:	48 f4       	brcc	.+18     	; 0x7258 <__moddi3+0x92c>
    7246:	49 8b       	std	Y+17, r20	; 0x11
    7248:	5a 8b       	std	Y+18, r21	; 0x12
    724a:	6b 8b       	std	Y+19, r22	; 0x13
    724c:	7c 8b       	std	Y+20, r23	; 0x14
    724e:	8d 8b       	std	Y+21, r24	; 0x15
    7250:	9e 8b       	std	Y+22, r25	; 0x16
    7252:	2f 8b       	std	Y+23, r18	; 0x17
    7254:	38 8f       	std	Y+24, r19	; 0x18
    7256:	27 c3       	rjmp	.+1614   	; 0x78a6 <__moddi3+0xf7a>
    7258:	00 e0       	ldi	r16, 0x00	; 0
    725a:	a0 16       	cp	r10, r16
    725c:	00 e0       	ldi	r16, 0x00	; 0
    725e:	b0 06       	cpc	r11, r16
    7260:	01 e0       	ldi	r16, 0x01	; 1
    7262:	c0 06       	cpc	r12, r16
    7264:	00 e0       	ldi	r16, 0x00	; 0
    7266:	d0 06       	cpc	r13, r16
    7268:	88 f4       	brcc	.+34     	; 0x728c <__moddi3+0x960>
    726a:	1f ef       	ldi	r17, 0xFF	; 255
    726c:	a1 16       	cp	r10, r17
    726e:	b1 04       	cpc	r11, r1
    7270:	c1 04       	cpc	r12, r1
    7272:	d1 04       	cpc	r13, r1
    7274:	39 f0       	breq	.+14     	; 0x7284 <__moddi3+0x958>
    7276:	30 f0       	brcs	.+12     	; 0x7284 <__moddi3+0x958>
    7278:	98 e0       	ldi	r25, 0x08	; 8
    727a:	e9 2e       	mov	r14, r25
    727c:	f1 2c       	mov	r15, r1
    727e:	01 2d       	mov	r16, r1
    7280:	11 2d       	mov	r17, r1
    7282:	18 c0       	rjmp	.+48     	; 0x72b4 <__moddi3+0x988>
    7284:	ee 24       	eor	r14, r14
    7286:	ff 24       	eor	r15, r15
    7288:	87 01       	movw	r16, r14
    728a:	14 c0       	rjmp	.+40     	; 0x72b4 <__moddi3+0x988>
    728c:	20 e0       	ldi	r18, 0x00	; 0
    728e:	a2 16       	cp	r10, r18
    7290:	20 e0       	ldi	r18, 0x00	; 0
    7292:	b2 06       	cpc	r11, r18
    7294:	20 e0       	ldi	r18, 0x00	; 0
    7296:	c2 06       	cpc	r12, r18
    7298:	21 e0       	ldi	r18, 0x01	; 1
    729a:	d2 06       	cpc	r13, r18
    729c:	30 f0       	brcs	.+12     	; 0x72aa <__moddi3+0x97e>
    729e:	88 e1       	ldi	r24, 0x18	; 24
    72a0:	e8 2e       	mov	r14, r24
    72a2:	f1 2c       	mov	r15, r1
    72a4:	01 2d       	mov	r16, r1
    72a6:	11 2d       	mov	r17, r1
    72a8:	05 c0       	rjmp	.+10     	; 0x72b4 <__moddi3+0x988>
    72aa:	00 e1       	ldi	r16, 0x10	; 16
    72ac:	e0 2e       	mov	r14, r16
    72ae:	f1 2c       	mov	r15, r1
    72b0:	01 2d       	mov	r16, r1
    72b2:	11 2d       	mov	r17, r1
    72b4:	d6 01       	movw	r26, r12
    72b6:	c5 01       	movw	r24, r10
    72b8:	0e 2c       	mov	r0, r14
    72ba:	04 c0       	rjmp	.+8      	; 0x72c4 <__moddi3+0x998>
    72bc:	b6 95       	lsr	r27
    72be:	a7 95       	ror	r26
    72c0:	97 95       	ror	r25
    72c2:	87 95       	ror	r24
    72c4:	0a 94       	dec	r0
    72c6:	d2 f7       	brpl	.-12     	; 0x72bc <__moddi3+0x990>
    72c8:	86 5b       	subi	r24, 0xB6	; 182
    72ca:	9d 4f       	sbci	r25, 0xFD	; 253
    72cc:	dc 01       	movw	r26, r24
    72ce:	2c 91       	ld	r18, X
    72d0:	80 e2       	ldi	r24, 0x20	; 32
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	a0 e0       	ldi	r26, 0x00	; 0
    72d6:	b0 e0       	ldi	r27, 0x00	; 0
    72d8:	8e 19       	sub	r24, r14
    72da:	9f 09       	sbc	r25, r15
    72dc:	a0 0b       	sbc	r26, r16
    72de:	b1 0b       	sbc	r27, r17
    72e0:	82 1b       	sub	r24, r18
    72e2:	91 09       	sbc	r25, r1
    72e4:	a1 09       	sbc	r26, r1
    72e6:	b1 09       	sbc	r27, r1
    72e8:	00 97       	sbiw	r24, 0x00	; 0
    72ea:	a1 05       	cpc	r26, r1
    72ec:	b1 05       	cpc	r27, r1
    72ee:	09 f0       	breq	.+2      	; 0x72f2 <__moddi3+0x9c6>
    72f0:	59 c0       	rjmp	.+178    	; 0x73a4 <__moddi3+0xa78>
    72f2:	a6 14       	cp	r10, r6
    72f4:	b7 04       	cpc	r11, r7
    72f6:	c8 04       	cpc	r12, r8
    72f8:	d9 04       	cpc	r13, r9
    72fa:	70 f0       	brcs	.+28     	; 0x7318 <__moddi3+0x9ec>
    72fc:	e8 96       	adiw	r28, 0x38	; 56
    72fe:	ec ac       	ldd	r14, Y+60	; 0x3c
    7300:	fd ac       	ldd	r15, Y+61	; 0x3d
    7302:	0e ad       	ldd	r16, Y+62	; 0x3e
    7304:	1f ad       	ldd	r17, Y+63	; 0x3f
    7306:	e8 97       	sbiw	r28, 0x38	; 56
    7308:	e2 14       	cp	r14, r2
    730a:	f3 04       	cpc	r15, r3
    730c:	04 05       	cpc	r16, r4
    730e:	15 05       	cpc	r17, r5
    7310:	18 f4       	brcc	.+6      	; 0x7318 <__moddi3+0x9ec>
    7312:	d8 01       	movw	r26, r16
    7314:	c7 01       	movw	r24, r14
    7316:	2f c0       	rjmp	.+94     	; 0x7376 <__moddi3+0xa4a>
    7318:	e8 96       	adiw	r28, 0x38	; 56
    731a:	8c ad       	ldd	r24, Y+60	; 0x3c
    731c:	9d ad       	ldd	r25, Y+61	; 0x3d
    731e:	ae ad       	ldd	r26, Y+62	; 0x3e
    7320:	bf ad       	ldd	r27, Y+63	; 0x3f
    7322:	e8 97       	sbiw	r28, 0x38	; 56
    7324:	82 19       	sub	r24, r2
    7326:	93 09       	sbc	r25, r3
    7328:	a4 09       	sbc	r26, r4
    732a:	b5 09       	sbc	r27, r5
    732c:	a4 01       	movw	r20, r8
    732e:	93 01       	movw	r18, r6
    7330:	2a 19       	sub	r18, r10
    7332:	3b 09       	sbc	r19, r11
    7334:	4c 09       	sbc	r20, r12
    7336:	5d 09       	sbc	r21, r13
    7338:	aa 24       	eor	r10, r10
    733a:	bb 24       	eor	r11, r11
    733c:	65 01       	movw	r12, r10
    733e:	e8 96       	adiw	r28, 0x38	; 56
    7340:	6c ac       	ldd	r6, Y+60	; 0x3c
    7342:	7d ac       	ldd	r7, Y+61	; 0x3d
    7344:	8e ac       	ldd	r8, Y+62	; 0x3e
    7346:	9f ac       	ldd	r9, Y+63	; 0x3f
    7348:	e8 97       	sbiw	r28, 0x38	; 56
    734a:	68 16       	cp	r6, r24
    734c:	79 06       	cpc	r7, r25
    734e:	8a 06       	cpc	r8, r26
    7350:	9b 06       	cpc	r9, r27
    7352:	28 f4       	brcc	.+10     	; 0x735e <__moddi3+0xa32>
    7354:	11 e0       	ldi	r17, 0x01	; 1
    7356:	a1 2e       	mov	r10, r17
    7358:	b1 2c       	mov	r11, r1
    735a:	c1 2c       	mov	r12, r1
    735c:	d1 2c       	mov	r13, r1
    735e:	79 01       	movw	r14, r18
    7360:	8a 01       	movw	r16, r20
    7362:	ea 18       	sub	r14, r10
    7364:	fb 08       	sbc	r15, r11
    7366:	0c 09       	sbc	r16, r12
    7368:	1d 09       	sbc	r17, r13
    736a:	61 96       	adiw	r28, 0x11	; 17
    736c:	ec ae       	std	Y+60, r14	; 0x3c
    736e:	fd ae       	std	Y+61, r15	; 0x3d
    7370:	0e af       	std	Y+62, r16	; 0x3e
    7372:	1f af       	std	Y+63, r17	; 0x3f
    7374:	61 97       	sbiw	r28, 0x11	; 17
    7376:	89 a7       	std	Y+41, r24	; 0x29
    7378:	9a a7       	std	Y+42, r25	; 0x2a
    737a:	ab a7       	std	Y+43, r26	; 0x2b
    737c:	bc a7       	std	Y+44, r27	; 0x2c
    737e:	61 96       	adiw	r28, 0x11	; 17
    7380:	0c ad       	ldd	r16, Y+60	; 0x3c
    7382:	1d ad       	ldd	r17, Y+61	; 0x3d
    7384:	2e ad       	ldd	r18, Y+62	; 0x3e
    7386:	3f ad       	ldd	r19, Y+63	; 0x3f
    7388:	61 97       	sbiw	r28, 0x11	; 17
    738a:	0d a7       	std	Y+45, r16	; 0x2d
    738c:	1e a7       	std	Y+46, r17	; 0x2e
    738e:	2f a7       	std	Y+47, r18	; 0x2f
    7390:	38 ab       	std	Y+48, r19	; 0x30
    7392:	89 8b       	std	Y+17, r24	; 0x11
    7394:	8a a5       	ldd	r24, Y+42	; 0x2a
    7396:	8a 8b       	std	Y+18, r24	; 0x12
    7398:	8b a5       	ldd	r24, Y+43	; 0x2b
    739a:	8b 8b       	std	Y+19, r24	; 0x13
    739c:	8c a5       	ldd	r24, Y+44	; 0x2c
    739e:	8c 8b       	std	Y+20, r24	; 0x14
    73a0:	0d 8b       	std	Y+21, r16	; 0x15
    73a2:	7b c2       	rjmp	.+1270   	; 0x789a <__moddi3+0xf6e>
    73a4:	e3 96       	adiw	r28, 0x33	; 51
    73a6:	8f af       	std	Y+63, r24	; 0x3f
    73a8:	e3 97       	sbiw	r28, 0x33	; 51
    73aa:	a6 01       	movw	r20, r12
    73ac:	95 01       	movw	r18, r10
    73ae:	08 2e       	mov	r0, r24
    73b0:	04 c0       	rjmp	.+8      	; 0x73ba <__moddi3+0xa8e>
    73b2:	22 0f       	add	r18, r18
    73b4:	33 1f       	adc	r19, r19
    73b6:	44 1f       	adc	r20, r20
    73b8:	55 1f       	adc	r21, r21
    73ba:	0a 94       	dec	r0
    73bc:	d2 f7       	brpl	.-12     	; 0x73b2 <__moddi3+0xa86>
    73be:	10 e2       	ldi	r17, 0x20	; 32
    73c0:	18 1b       	sub	r17, r24
    73c2:	e2 96       	adiw	r28, 0x32	; 50
    73c4:	1f af       	std	Y+63, r17	; 0x3f
    73c6:	e2 97       	sbiw	r28, 0x32	; 50
    73c8:	d2 01       	movw	r26, r4
    73ca:	c1 01       	movw	r24, r2
    73cc:	01 2e       	mov	r0, r17
    73ce:	04 c0       	rjmp	.+8      	; 0x73d8 <__moddi3+0xaac>
    73d0:	b6 95       	lsr	r27
    73d2:	a7 95       	ror	r26
    73d4:	97 95       	ror	r25
    73d6:	87 95       	ror	r24
    73d8:	0a 94       	dec	r0
    73da:	d2 f7       	brpl	.-12     	; 0x73d0 <__moddi3+0xaa4>
    73dc:	5c 01       	movw	r10, r24
    73de:	6d 01       	movw	r12, r26
    73e0:	a2 2a       	or	r10, r18
    73e2:	b3 2a       	or	r11, r19
    73e4:	c4 2a       	or	r12, r20
    73e6:	d5 2a       	or	r13, r21
    73e8:	25 96       	adiw	r28, 0x05	; 5
    73ea:	ac ae       	std	Y+60, r10	; 0x3c
    73ec:	bd ae       	std	Y+61, r11	; 0x3d
    73ee:	ce ae       	std	Y+62, r12	; 0x3e
    73f0:	df ae       	std	Y+63, r13	; 0x3f
    73f2:	25 97       	sbiw	r28, 0x05	; 5
    73f4:	72 01       	movw	r14, r4
    73f6:	61 01       	movw	r12, r2
    73f8:	e3 96       	adiw	r28, 0x33	; 51
    73fa:	0f ac       	ldd	r0, Y+63	; 0x3f
    73fc:	e3 97       	sbiw	r28, 0x33	; 51
    73fe:	04 c0       	rjmp	.+8      	; 0x7408 <__moddi3+0xadc>
    7400:	cc 0c       	add	r12, r12
    7402:	dd 1c       	adc	r13, r13
    7404:	ee 1c       	adc	r14, r14
    7406:	ff 1c       	adc	r15, r15
    7408:	0a 94       	dec	r0
    740a:	d2 f7       	brpl	.-12     	; 0x7400 <__moddi3+0xad4>
    740c:	21 96       	adiw	r28, 0x01	; 1
    740e:	cc ae       	std	Y+60, r12	; 0x3c
    7410:	dd ae       	std	Y+61, r13	; 0x3d
    7412:	ee ae       	std	Y+62, r14	; 0x3e
    7414:	ff ae       	std	Y+63, r15	; 0x3f
    7416:	21 97       	sbiw	r28, 0x01	; 1
    7418:	64 01       	movw	r12, r8
    741a:	53 01       	movw	r10, r6
    741c:	01 2e       	mov	r0, r17
    741e:	04 c0       	rjmp	.+8      	; 0x7428 <__moddi3+0xafc>
    7420:	d6 94       	lsr	r13
    7422:	c7 94       	ror	r12
    7424:	b7 94       	ror	r11
    7426:	a7 94       	ror	r10
    7428:	0a 94       	dec	r0
    742a:	d2 f7       	brpl	.-12     	; 0x7420 <__moddi3+0xaf4>
    742c:	a4 01       	movw	r20, r8
    742e:	93 01       	movw	r18, r6
    7430:	e3 96       	adiw	r28, 0x33	; 51
    7432:	0f ac       	ldd	r0, Y+63	; 0x3f
    7434:	e3 97       	sbiw	r28, 0x33	; 51
    7436:	04 c0       	rjmp	.+8      	; 0x7440 <__moddi3+0xb14>
    7438:	22 0f       	add	r18, r18
    743a:	33 1f       	adc	r19, r19
    743c:	44 1f       	adc	r20, r20
    743e:	55 1f       	adc	r21, r21
    7440:	0a 94       	dec	r0
    7442:	d2 f7       	brpl	.-12     	; 0x7438 <__moddi3+0xb0c>
    7444:	e8 96       	adiw	r28, 0x38	; 56
    7446:	8c ad       	ldd	r24, Y+60	; 0x3c
    7448:	9d ad       	ldd	r25, Y+61	; 0x3d
    744a:	ae ad       	ldd	r26, Y+62	; 0x3e
    744c:	bf ad       	ldd	r27, Y+63	; 0x3f
    744e:	e8 97       	sbiw	r28, 0x38	; 56
    7450:	04 c0       	rjmp	.+8      	; 0x745a <__moddi3+0xb2e>
    7452:	b6 95       	lsr	r27
    7454:	a7 95       	ror	r26
    7456:	97 95       	ror	r25
    7458:	87 95       	ror	r24
    745a:	1a 95       	dec	r17
    745c:	d2 f7       	brpl	.-12     	; 0x7452 <__moddi3+0xb26>
    745e:	7c 01       	movw	r14, r24
    7460:	8d 01       	movw	r16, r26
    7462:	e2 2a       	or	r14, r18
    7464:	f3 2a       	or	r15, r19
    7466:	04 2b       	or	r16, r20
    7468:	15 2b       	or	r17, r21
    746a:	e9 ae       	std	Y+57, r14	; 0x39
    746c:	fa ae       	std	Y+58, r15	; 0x3a
    746e:	0b af       	std	Y+59, r16	; 0x3b
    7470:	1c af       	std	Y+60, r17	; 0x3c
    7472:	e8 96       	adiw	r28, 0x38	; 56
    7474:	0c ad       	ldd	r16, Y+60	; 0x3c
    7476:	1d ad       	ldd	r17, Y+61	; 0x3d
    7478:	2e ad       	ldd	r18, Y+62	; 0x3e
    747a:	3f ad       	ldd	r19, Y+63	; 0x3f
    747c:	e8 97       	sbiw	r28, 0x38	; 56
    747e:	e3 96       	adiw	r28, 0x33	; 51
    7480:	0f ac       	ldd	r0, Y+63	; 0x3f
    7482:	e3 97       	sbiw	r28, 0x33	; 51
    7484:	04 c0       	rjmp	.+8      	; 0x748e <__moddi3+0xb62>
    7486:	00 0f       	add	r16, r16
    7488:	11 1f       	adc	r17, r17
    748a:	22 1f       	adc	r18, r18
    748c:	33 1f       	adc	r19, r19
    748e:	0a 94       	dec	r0
    7490:	d2 f7       	brpl	.-12     	; 0x7486 <__moddi3+0xb5a>
    7492:	0d ab       	std	Y+53, r16	; 0x35
    7494:	1e ab       	std	Y+54, r17	; 0x36
    7496:	2f ab       	std	Y+55, r18	; 0x37
    7498:	38 af       	std	Y+56, r19	; 0x38
    749a:	25 96       	adiw	r28, 0x05	; 5
    749c:	2c ad       	ldd	r18, Y+60	; 0x3c
    749e:	3d ad       	ldd	r19, Y+61	; 0x3d
    74a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    74a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    74a4:	25 97       	sbiw	r28, 0x05	; 5
    74a6:	3a 01       	movw	r6, r20
    74a8:	88 24       	eor	r8, r8
    74aa:	99 24       	eor	r9, r9
    74ac:	40 70       	andi	r20, 0x00	; 0
    74ae:	50 70       	andi	r21, 0x00	; 0
    74b0:	a5 96       	adiw	r28, 0x25	; 37
    74b2:	2c af       	std	Y+60, r18	; 0x3c
    74b4:	3d af       	std	Y+61, r19	; 0x3d
    74b6:	4e af       	std	Y+62, r20	; 0x3e
    74b8:	5f af       	std	Y+63, r21	; 0x3f
    74ba:	a5 97       	sbiw	r28, 0x25	; 37
    74bc:	c6 01       	movw	r24, r12
    74be:	b5 01       	movw	r22, r10
    74c0:	a4 01       	movw	r20, r8
    74c2:	93 01       	movw	r18, r6
    74c4:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    74c8:	7b 01       	movw	r14, r22
    74ca:	8c 01       	movw	r16, r24
    74cc:	c6 01       	movw	r24, r12
    74ce:	b5 01       	movw	r22, r10
    74d0:	a4 01       	movw	r20, r8
    74d2:	93 01       	movw	r18, r6
    74d4:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    74d8:	c9 01       	movw	r24, r18
    74da:	da 01       	movw	r26, r20
    74dc:	1c 01       	movw	r2, r24
    74de:	2d 01       	movw	r4, r26
    74e0:	c2 01       	movw	r24, r4
    74e2:	b1 01       	movw	r22, r2
    74e4:	a5 96       	adiw	r28, 0x25	; 37
    74e6:	2c ad       	ldd	r18, Y+60	; 0x3c
    74e8:	3d ad       	ldd	r19, Y+61	; 0x3d
    74ea:	4e ad       	ldd	r20, Y+62	; 0x3e
    74ec:	5f ad       	ldd	r21, Y+63	; 0x3f
    74ee:	a5 97       	sbiw	r28, 0x25	; 37
    74f0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    74f4:	9b 01       	movw	r18, r22
    74f6:	ac 01       	movw	r20, r24
    74f8:	87 01       	movw	r16, r14
    74fa:	ff 24       	eor	r15, r15
    74fc:	ee 24       	eor	r14, r14
    74fe:	a9 ac       	ldd	r10, Y+57	; 0x39
    7500:	ba ac       	ldd	r11, Y+58	; 0x3a
    7502:	cb ac       	ldd	r12, Y+59	; 0x3b
    7504:	dc ac       	ldd	r13, Y+60	; 0x3c
    7506:	c6 01       	movw	r24, r12
    7508:	aa 27       	eor	r26, r26
    750a:	bb 27       	eor	r27, r27
    750c:	57 01       	movw	r10, r14
    750e:	68 01       	movw	r12, r16
    7510:	a8 2a       	or	r10, r24
    7512:	b9 2a       	or	r11, r25
    7514:	ca 2a       	or	r12, r26
    7516:	db 2a       	or	r13, r27
    7518:	a2 16       	cp	r10, r18
    751a:	b3 06       	cpc	r11, r19
    751c:	c4 06       	cpc	r12, r20
    751e:	d5 06       	cpc	r13, r21
    7520:	10 f5       	brcc	.+68     	; 0x7566 <__moddi3+0xc3a>
    7522:	08 94       	sec
    7524:	21 08       	sbc	r2, r1
    7526:	31 08       	sbc	r3, r1
    7528:	41 08       	sbc	r4, r1
    752a:	51 08       	sbc	r5, r1
    752c:	25 96       	adiw	r28, 0x05	; 5
    752e:	ec ac       	ldd	r14, Y+60	; 0x3c
    7530:	fd ac       	ldd	r15, Y+61	; 0x3d
    7532:	0e ad       	ldd	r16, Y+62	; 0x3e
    7534:	1f ad       	ldd	r17, Y+63	; 0x3f
    7536:	25 97       	sbiw	r28, 0x05	; 5
    7538:	ae 0c       	add	r10, r14
    753a:	bf 1c       	adc	r11, r15
    753c:	c0 1e       	adc	r12, r16
    753e:	d1 1e       	adc	r13, r17
    7540:	ae 14       	cp	r10, r14
    7542:	bf 04       	cpc	r11, r15
    7544:	c0 06       	cpc	r12, r16
    7546:	d1 06       	cpc	r13, r17
    7548:	70 f0       	brcs	.+28     	; 0x7566 <__moddi3+0xc3a>
    754a:	a2 16       	cp	r10, r18
    754c:	b3 06       	cpc	r11, r19
    754e:	c4 06       	cpc	r12, r20
    7550:	d5 06       	cpc	r13, r21
    7552:	48 f4       	brcc	.+18     	; 0x7566 <__moddi3+0xc3a>
    7554:	08 94       	sec
    7556:	21 08       	sbc	r2, r1
    7558:	31 08       	sbc	r3, r1
    755a:	41 08       	sbc	r4, r1
    755c:	51 08       	sbc	r5, r1
    755e:	ae 0c       	add	r10, r14
    7560:	bf 1c       	adc	r11, r15
    7562:	c0 1e       	adc	r12, r16
    7564:	d1 1e       	adc	r13, r17
    7566:	a2 1a       	sub	r10, r18
    7568:	b3 0a       	sbc	r11, r19
    756a:	c4 0a       	sbc	r12, r20
    756c:	d5 0a       	sbc	r13, r21
    756e:	c6 01       	movw	r24, r12
    7570:	b5 01       	movw	r22, r10
    7572:	a4 01       	movw	r20, r8
    7574:	93 01       	movw	r18, r6
    7576:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    757a:	7b 01       	movw	r14, r22
    757c:	8c 01       	movw	r16, r24
    757e:	c6 01       	movw	r24, r12
    7580:	b5 01       	movw	r22, r10
    7582:	a4 01       	movw	r20, r8
    7584:	93 01       	movw	r18, r6
    7586:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodsi4>
    758a:	c9 01       	movw	r24, r18
    758c:	da 01       	movw	r26, r20
    758e:	3c 01       	movw	r6, r24
    7590:	4d 01       	movw	r8, r26
    7592:	c4 01       	movw	r24, r8
    7594:	b3 01       	movw	r22, r6
    7596:	a5 96       	adiw	r28, 0x25	; 37
    7598:	2c ad       	ldd	r18, Y+60	; 0x3c
    759a:	3d ad       	ldd	r19, Y+61	; 0x3d
    759c:	4e ad       	ldd	r20, Y+62	; 0x3e
    759e:	5f ad       	ldd	r21, Y+63	; 0x3f
    75a0:	a5 97       	sbiw	r28, 0x25	; 37
    75a2:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    75a6:	9b 01       	movw	r18, r22
    75a8:	ac 01       	movw	r20, r24
    75aa:	87 01       	movw	r16, r14
    75ac:	ff 24       	eor	r15, r15
    75ae:	ee 24       	eor	r14, r14
    75b0:	89 ad       	ldd	r24, Y+57	; 0x39
    75b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    75b4:	ab ad       	ldd	r26, Y+59	; 0x3b
    75b6:	bc ad       	ldd	r27, Y+60	; 0x3c
    75b8:	a0 70       	andi	r26, 0x00	; 0
    75ba:	b0 70       	andi	r27, 0x00	; 0
    75bc:	57 01       	movw	r10, r14
    75be:	68 01       	movw	r12, r16
    75c0:	a8 2a       	or	r10, r24
    75c2:	b9 2a       	or	r11, r25
    75c4:	ca 2a       	or	r12, r26
    75c6:	db 2a       	or	r13, r27
    75c8:	a2 16       	cp	r10, r18
    75ca:	b3 06       	cpc	r11, r19
    75cc:	c4 06       	cpc	r12, r20
    75ce:	d5 06       	cpc	r13, r21
    75d0:	10 f5       	brcc	.+68     	; 0x7616 <__moddi3+0xcea>
    75d2:	08 94       	sec
    75d4:	61 08       	sbc	r6, r1
    75d6:	71 08       	sbc	r7, r1
    75d8:	81 08       	sbc	r8, r1
    75da:	91 08       	sbc	r9, r1
    75dc:	25 96       	adiw	r28, 0x05	; 5
    75de:	6c ad       	ldd	r22, Y+60	; 0x3c
    75e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    75e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    75e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    75e6:	25 97       	sbiw	r28, 0x05	; 5
    75e8:	a6 0e       	add	r10, r22
    75ea:	b7 1e       	adc	r11, r23
    75ec:	c8 1e       	adc	r12, r24
    75ee:	d9 1e       	adc	r13, r25
    75f0:	a6 16       	cp	r10, r22
    75f2:	b7 06       	cpc	r11, r23
    75f4:	c8 06       	cpc	r12, r24
    75f6:	d9 06       	cpc	r13, r25
    75f8:	70 f0       	brcs	.+28     	; 0x7616 <__moddi3+0xcea>
    75fa:	a2 16       	cp	r10, r18
    75fc:	b3 06       	cpc	r11, r19
    75fe:	c4 06       	cpc	r12, r20
    7600:	d5 06       	cpc	r13, r21
    7602:	48 f4       	brcc	.+18     	; 0x7616 <__moddi3+0xcea>
    7604:	08 94       	sec
    7606:	61 08       	sbc	r6, r1
    7608:	71 08       	sbc	r7, r1
    760a:	81 08       	sbc	r8, r1
    760c:	91 08       	sbc	r9, r1
    760e:	a6 0e       	add	r10, r22
    7610:	b7 1e       	adc	r11, r23
    7612:	c8 1e       	adc	r12, r24
    7614:	d9 1e       	adc	r13, r25
    7616:	d6 01       	movw	r26, r12
    7618:	c5 01       	movw	r24, r10
    761a:	82 1b       	sub	r24, r18
    761c:	93 0b       	sbc	r25, r19
    761e:	a4 0b       	sbc	r26, r20
    7620:	b5 0b       	sbc	r27, r21
    7622:	89 ab       	std	Y+49, r24	; 0x31
    7624:	9a ab       	std	Y+50, r25	; 0x32
    7626:	ab ab       	std	Y+51, r26	; 0x33
    7628:	bc ab       	std	Y+52, r27	; 0x34
    762a:	d1 01       	movw	r26, r2
    762c:	99 27       	eor	r25, r25
    762e:	88 27       	eor	r24, r24
    7630:	84 01       	movw	r16, r8
    7632:	73 01       	movw	r14, r6
    7634:	e8 2a       	or	r14, r24
    7636:	f9 2a       	or	r15, r25
    7638:	0a 2b       	or	r16, r26
    763a:	1b 2b       	or	r17, r27
    763c:	8f ef       	ldi	r24, 0xFF	; 255
    763e:	a8 2e       	mov	r10, r24
    7640:	8f ef       	ldi	r24, 0xFF	; 255
    7642:	b8 2e       	mov	r11, r24
    7644:	c1 2c       	mov	r12, r1
    7646:	d1 2c       	mov	r13, r1
    7648:	ae 20       	and	r10, r14
    764a:	bf 20       	and	r11, r15
    764c:	c0 22       	and	r12, r16
    764e:	d1 22       	and	r13, r17
    7650:	78 01       	movw	r14, r16
    7652:	00 27       	eor	r16, r16
    7654:	11 27       	eor	r17, r17
    7656:	21 96       	adiw	r28, 0x01	; 1
    7658:	6c ac       	ldd	r6, Y+60	; 0x3c
    765a:	7d ac       	ldd	r7, Y+61	; 0x3d
    765c:	8e ac       	ldd	r8, Y+62	; 0x3e
    765e:	9f ac       	ldd	r9, Y+63	; 0x3f
    7660:	21 97       	sbiw	r28, 0x01	; 1
    7662:	2f ef       	ldi	r18, 0xFF	; 255
    7664:	3f ef       	ldi	r19, 0xFF	; 255
    7666:	40 e0       	ldi	r20, 0x00	; 0
    7668:	50 e0       	ldi	r21, 0x00	; 0
    766a:	62 22       	and	r6, r18
    766c:	73 22       	and	r7, r19
    766e:	84 22       	and	r8, r20
    7670:	95 22       	and	r9, r21
    7672:	21 96       	adiw	r28, 0x01	; 1
    7674:	6c ad       	ldd	r22, Y+60	; 0x3c
    7676:	7d ad       	ldd	r23, Y+61	; 0x3d
    7678:	8e ad       	ldd	r24, Y+62	; 0x3e
    767a:	9f ad       	ldd	r25, Y+63	; 0x3f
    767c:	21 97       	sbiw	r28, 0x01	; 1
    767e:	ac 01       	movw	r20, r24
    7680:	66 27       	eor	r22, r22
    7682:	77 27       	eor	r23, r23
    7684:	ad 96       	adiw	r28, 0x2d	; 45
    7686:	4c af       	std	Y+60, r20	; 0x3c
    7688:	5d af       	std	Y+61, r21	; 0x3d
    768a:	6e af       	std	Y+62, r22	; 0x3e
    768c:	7f af       	std	Y+63, r23	; 0x3f
    768e:	ad 97       	sbiw	r28, 0x2d	; 45
    7690:	c6 01       	movw	r24, r12
    7692:	b5 01       	movw	r22, r10
    7694:	a4 01       	movw	r20, r8
    7696:	93 01       	movw	r18, r6
    7698:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    769c:	a9 96       	adiw	r28, 0x29	; 41
    769e:	6c af       	std	Y+60, r22	; 0x3c
    76a0:	7d af       	std	Y+61, r23	; 0x3d
    76a2:	8e af       	std	Y+62, r24	; 0x3e
    76a4:	9f af       	std	Y+63, r25	; 0x3f
    76a6:	a9 97       	sbiw	r28, 0x29	; 41
    76a8:	c6 01       	movw	r24, r12
    76aa:	b5 01       	movw	r22, r10
    76ac:	ad 96       	adiw	r28, 0x2d	; 45
    76ae:	2c ad       	ldd	r18, Y+60	; 0x3c
    76b0:	3d ad       	ldd	r19, Y+61	; 0x3d
    76b2:	4e ad       	ldd	r20, Y+62	; 0x3e
    76b4:	5f ad       	ldd	r21, Y+63	; 0x3f
    76b6:	ad 97       	sbiw	r28, 0x2d	; 45
    76b8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    76bc:	1b 01       	movw	r2, r22
    76be:	2c 01       	movw	r4, r24
    76c0:	c8 01       	movw	r24, r16
    76c2:	b7 01       	movw	r22, r14
    76c4:	a4 01       	movw	r20, r8
    76c6:	93 01       	movw	r18, r6
    76c8:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    76cc:	5b 01       	movw	r10, r22
    76ce:	6c 01       	movw	r12, r24
    76d0:	c8 01       	movw	r24, r16
    76d2:	b7 01       	movw	r22, r14
    76d4:	ad 96       	adiw	r28, 0x2d	; 45
    76d6:	2c ad       	ldd	r18, Y+60	; 0x3c
    76d8:	3d ad       	ldd	r19, Y+61	; 0x3d
    76da:	4e ad       	ldd	r20, Y+62	; 0x3e
    76dc:	5f ad       	ldd	r21, Y+63	; 0x3f
    76de:	ad 97       	sbiw	r28, 0x2d	; 45
    76e0:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    76e4:	7b 01       	movw	r14, r22
    76e6:	8c 01       	movw	r16, r24
    76e8:	a6 01       	movw	r20, r12
    76ea:	95 01       	movw	r18, r10
    76ec:	22 0d       	add	r18, r2
    76ee:	33 1d       	adc	r19, r3
    76f0:	44 1d       	adc	r20, r4
    76f2:	55 1d       	adc	r21, r5
    76f4:	a9 96       	adiw	r28, 0x29	; 41
    76f6:	6c ac       	ldd	r6, Y+60	; 0x3c
    76f8:	7d ac       	ldd	r7, Y+61	; 0x3d
    76fa:	8e ac       	ldd	r8, Y+62	; 0x3e
    76fc:	9f ac       	ldd	r9, Y+63	; 0x3f
    76fe:	a9 97       	sbiw	r28, 0x29	; 41
    7700:	c4 01       	movw	r24, r8
    7702:	aa 27       	eor	r26, r26
    7704:	bb 27       	eor	r27, r27
    7706:	28 0f       	add	r18, r24
    7708:	39 1f       	adc	r19, r25
    770a:	4a 1f       	adc	r20, r26
    770c:	5b 1f       	adc	r21, r27
    770e:	2a 15       	cp	r18, r10
    7710:	3b 05       	cpc	r19, r11
    7712:	4c 05       	cpc	r20, r12
    7714:	5d 05       	cpc	r21, r13
    7716:	48 f4       	brcc	.+18     	; 0x772a <__moddi3+0xdfe>
    7718:	81 2c       	mov	r8, r1
    771a:	91 2c       	mov	r9, r1
    771c:	e1 e0       	ldi	r30, 0x01	; 1
    771e:	ae 2e       	mov	r10, r30
    7720:	b1 2c       	mov	r11, r1
    7722:	e8 0c       	add	r14, r8
    7724:	f9 1c       	adc	r15, r9
    7726:	0a 1d       	adc	r16, r10
    7728:	1b 1d       	adc	r17, r11
    772a:	ca 01       	movw	r24, r20
    772c:	aa 27       	eor	r26, r26
    772e:	bb 27       	eor	r27, r27
    7730:	57 01       	movw	r10, r14
    7732:	68 01       	movw	r12, r16
    7734:	a8 0e       	add	r10, r24
    7736:	b9 1e       	adc	r11, r25
    7738:	ca 1e       	adc	r12, r26
    773a:	db 1e       	adc	r13, r27
    773c:	a9 01       	movw	r20, r18
    773e:	33 27       	eor	r19, r19
    7740:	22 27       	eor	r18, r18
    7742:	a9 96       	adiw	r28, 0x29	; 41
    7744:	8c ad       	ldd	r24, Y+60	; 0x3c
    7746:	9d ad       	ldd	r25, Y+61	; 0x3d
    7748:	ae ad       	ldd	r26, Y+62	; 0x3e
    774a:	bf ad       	ldd	r27, Y+63	; 0x3f
    774c:	a9 97       	sbiw	r28, 0x29	; 41
    774e:	a0 70       	andi	r26, 0x00	; 0
    7750:	b0 70       	andi	r27, 0x00	; 0
    7752:	28 0f       	add	r18, r24
    7754:	39 1f       	adc	r19, r25
    7756:	4a 1f       	adc	r20, r26
    7758:	5b 1f       	adc	r21, r27
    775a:	e9 a8       	ldd	r14, Y+49	; 0x31
    775c:	fa a8       	ldd	r15, Y+50	; 0x32
    775e:	0b a9       	ldd	r16, Y+51	; 0x33
    7760:	1c a9       	ldd	r17, Y+52	; 0x34
    7762:	ea 14       	cp	r14, r10
    7764:	fb 04       	cpc	r15, r11
    7766:	0c 05       	cpc	r16, r12
    7768:	1d 05       	cpc	r17, r13
    776a:	70 f0       	brcs	.+28     	; 0x7788 <__moddi3+0xe5c>
    776c:	ae 14       	cp	r10, r14
    776e:	bf 04       	cpc	r11, r15
    7770:	c0 06       	cpc	r12, r16
    7772:	d1 06       	cpc	r13, r17
    7774:	89 f5       	brne	.+98     	; 0x77d8 <__moddi3+0xeac>
    7776:	6d a9       	ldd	r22, Y+53	; 0x35
    7778:	7e a9       	ldd	r23, Y+54	; 0x36
    777a:	8f a9       	ldd	r24, Y+55	; 0x37
    777c:	98 ad       	ldd	r25, Y+56	; 0x38
    777e:	62 17       	cp	r22, r18
    7780:	73 07       	cpc	r23, r19
    7782:	84 07       	cpc	r24, r20
    7784:	95 07       	cpc	r25, r21
    7786:	40 f5       	brcc	.+80     	; 0x77d8 <__moddi3+0xeac>
    7788:	da 01       	movw	r26, r20
    778a:	c9 01       	movw	r24, r18
    778c:	21 96       	adiw	r28, 0x01	; 1
    778e:	6c ac       	ldd	r6, Y+60	; 0x3c
    7790:	7d ac       	ldd	r7, Y+61	; 0x3d
    7792:	8e ac       	ldd	r8, Y+62	; 0x3e
    7794:	9f ac       	ldd	r9, Y+63	; 0x3f
    7796:	21 97       	sbiw	r28, 0x01	; 1
    7798:	86 19       	sub	r24, r6
    779a:	97 09       	sbc	r25, r7
    779c:	a8 09       	sbc	r26, r8
    779e:	b9 09       	sbc	r27, r9
    77a0:	25 96       	adiw	r28, 0x05	; 5
    77a2:	ec ac       	ldd	r14, Y+60	; 0x3c
    77a4:	fd ac       	ldd	r15, Y+61	; 0x3d
    77a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    77a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    77aa:	25 97       	sbiw	r28, 0x05	; 5
    77ac:	ae 18       	sub	r10, r14
    77ae:	bf 08       	sbc	r11, r15
    77b0:	c0 0a       	sbc	r12, r16
    77b2:	d1 0a       	sbc	r13, r17
    77b4:	ee 24       	eor	r14, r14
    77b6:	ff 24       	eor	r15, r15
    77b8:	87 01       	movw	r16, r14
    77ba:	28 17       	cp	r18, r24
    77bc:	39 07       	cpc	r19, r25
    77be:	4a 07       	cpc	r20, r26
    77c0:	5b 07       	cpc	r21, r27
    77c2:	28 f4       	brcc	.+10     	; 0x77ce <__moddi3+0xea2>
    77c4:	21 e0       	ldi	r18, 0x01	; 1
    77c6:	e2 2e       	mov	r14, r18
    77c8:	f1 2c       	mov	r15, r1
    77ca:	01 2d       	mov	r16, r1
    77cc:	11 2d       	mov	r17, r1
    77ce:	ae 18       	sub	r10, r14
    77d0:	bf 08       	sbc	r11, r15
    77d2:	c0 0a       	sbc	r12, r16
    77d4:	d1 0a       	sbc	r13, r17
    77d6:	02 c0       	rjmp	.+4      	; 0x77dc <__moddi3+0xeb0>
    77d8:	da 01       	movw	r26, r20
    77da:	c9 01       	movw	r24, r18
    77dc:	6d a8       	ldd	r6, Y+53	; 0x35
    77de:	7e a8       	ldd	r7, Y+54	; 0x36
    77e0:	8f a8       	ldd	r8, Y+55	; 0x37
    77e2:	98 ac       	ldd	r9, Y+56	; 0x38
    77e4:	68 1a       	sub	r6, r24
    77e6:	79 0a       	sbc	r7, r25
    77e8:	8a 0a       	sbc	r8, r26
    77ea:	9b 0a       	sbc	r9, r27
    77ec:	09 a9       	ldd	r16, Y+49	; 0x31
    77ee:	1a a9       	ldd	r17, Y+50	; 0x32
    77f0:	2b a9       	ldd	r18, Y+51	; 0x33
    77f2:	3c a9       	ldd	r19, Y+52	; 0x34
    77f4:	0a 19       	sub	r16, r10
    77f6:	1b 09       	sbc	r17, r11
    77f8:	2c 09       	sbc	r18, r12
    77fa:	3d 09       	sbc	r19, r13
    77fc:	58 01       	movw	r10, r16
    77fe:	69 01       	movw	r12, r18
    7800:	22 24       	eor	r2, r2
    7802:	33 24       	eor	r3, r3
    7804:	21 01       	movw	r4, r2
    7806:	2d a9       	ldd	r18, Y+53	; 0x35
    7808:	3e a9       	ldd	r19, Y+54	; 0x36
    780a:	4f a9       	ldd	r20, Y+55	; 0x37
    780c:	58 ad       	ldd	r21, Y+56	; 0x38
    780e:	26 15       	cp	r18, r6
    7810:	37 05       	cpc	r19, r7
    7812:	48 05       	cpc	r20, r8
    7814:	59 05       	cpc	r21, r9
    7816:	28 f4       	brcc	.+10     	; 0x7822 <__moddi3+0xef6>
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	28 2e       	mov	r2, r24
    781c:	31 2c       	mov	r3, r1
    781e:	41 2c       	mov	r4, r1
    7820:	51 2c       	mov	r5, r1
    7822:	86 01       	movw	r16, r12
    7824:	75 01       	movw	r14, r10
    7826:	e2 18       	sub	r14, r2
    7828:	f3 08       	sbc	r15, r3
    782a:	04 09       	sbc	r16, r4
    782c:	15 09       	sbc	r17, r5
    782e:	a8 01       	movw	r20, r16
    7830:	97 01       	movw	r18, r14
    7832:	e2 96       	adiw	r28, 0x32	; 50
    7834:	0f ac       	ldd	r0, Y+63	; 0x3f
    7836:	e2 97       	sbiw	r28, 0x32	; 50
    7838:	04 c0       	rjmp	.+8      	; 0x7842 <__moddi3+0xf16>
    783a:	22 0f       	add	r18, r18
    783c:	33 1f       	adc	r19, r19
    783e:	44 1f       	adc	r20, r20
    7840:	55 1f       	adc	r21, r21
    7842:	0a 94       	dec	r0
    7844:	d2 f7       	brpl	.-12     	; 0x783a <__moddi3+0xf0e>
    7846:	d4 01       	movw	r26, r8
    7848:	c3 01       	movw	r24, r6
    784a:	e3 96       	adiw	r28, 0x33	; 51
    784c:	0f ac       	ldd	r0, Y+63	; 0x3f
    784e:	e3 97       	sbiw	r28, 0x33	; 51
    7850:	04 c0       	rjmp	.+8      	; 0x785a <__moddi3+0xf2e>
    7852:	b6 95       	lsr	r27
    7854:	a7 95       	ror	r26
    7856:	97 95       	ror	r25
    7858:	87 95       	ror	r24
    785a:	0a 94       	dec	r0
    785c:	d2 f7       	brpl	.-12     	; 0x7852 <__moddi3+0xf26>
    785e:	28 2b       	or	r18, r24
    7860:	39 2b       	or	r19, r25
    7862:	4a 2b       	or	r20, r26
    7864:	5b 2b       	or	r21, r27
    7866:	29 a7       	std	Y+41, r18	; 0x29
    7868:	3a a7       	std	Y+42, r19	; 0x2a
    786a:	4b a7       	std	Y+43, r20	; 0x2b
    786c:	5c a7       	std	Y+44, r21	; 0x2c
    786e:	e3 96       	adiw	r28, 0x33	; 51
    7870:	0f ac       	ldd	r0, Y+63	; 0x3f
    7872:	e3 97       	sbiw	r28, 0x33	; 51
    7874:	04 c0       	rjmp	.+8      	; 0x787e <__moddi3+0xf52>
    7876:	16 95       	lsr	r17
    7878:	07 95       	ror	r16
    787a:	f7 94       	ror	r15
    787c:	e7 94       	ror	r14
    787e:	0a 94       	dec	r0
    7880:	d2 f7       	brpl	.-12     	; 0x7876 <__moddi3+0xf4a>
    7882:	ed a6       	std	Y+45, r14	; 0x2d
    7884:	fe a6       	std	Y+46, r15	; 0x2e
    7886:	0f a7       	std	Y+47, r16	; 0x2f
    7888:	18 ab       	std	Y+48, r17	; 0x30
    788a:	29 8b       	std	Y+17, r18	; 0x11
    788c:	8a a5       	ldd	r24, Y+42	; 0x2a
    788e:	8a 8b       	std	Y+18, r24	; 0x12
    7890:	8b a5       	ldd	r24, Y+43	; 0x2b
    7892:	8b 8b       	std	Y+19, r24	; 0x13
    7894:	8c a5       	ldd	r24, Y+44	; 0x2c
    7896:	8c 8b       	std	Y+20, r24	; 0x14
    7898:	ed 8a       	std	Y+21, r14	; 0x15
    789a:	8e a5       	ldd	r24, Y+46	; 0x2e
    789c:	8e 8b       	std	Y+22, r24	; 0x16
    789e:	8f a5       	ldd	r24, Y+47	; 0x2f
    78a0:	8f 8b       	std	Y+23, r24	; 0x17
    78a2:	88 a9       	ldd	r24, Y+48	; 0x30
    78a4:	88 8f       	std	Y+24, r24	; 0x18
    78a6:	e1 96       	adiw	r28, 0x31	; 49
    78a8:	4c ad       	ldd	r20, Y+60	; 0x3c
    78aa:	5d ad       	ldd	r21, Y+61	; 0x3d
    78ac:	6e ad       	ldd	r22, Y+62	; 0x3e
    78ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    78b0:	e1 97       	sbiw	r28, 0x31	; 49
    78b2:	41 15       	cp	r20, r1
    78b4:	51 05       	cpc	r21, r1
    78b6:	61 05       	cpc	r22, r1
    78b8:	71 05       	cpc	r23, r1
    78ba:	09 f4       	brne	.+2      	; 0x78be <__moddi3+0xf92>
    78bc:	67 c0       	rjmp	.+206    	; 0x798c <__moddi3+0x1060>
    78be:	89 89       	ldd	r24, Y+17	; 0x11
    78c0:	2a 89       	ldd	r18, Y+18	; 0x12
    78c2:	3b 89       	ldd	r19, Y+19	; 0x13
    78c4:	4c 89       	ldd	r20, Y+20	; 0x14
    78c6:	5d 89       	ldd	r21, Y+21	; 0x15
    78c8:	ae 89       	ldd	r26, Y+22	; 0x16
    78ca:	bf 89       	ldd	r27, Y+23	; 0x17
    78cc:	18 8d       	ldd	r17, Y+24	; 0x18
    78ce:	f8 2f       	mov	r31, r24
    78d0:	f1 95       	neg	r31
    78d2:	91 e0       	ldi	r25, 0x01	; 1
    78d4:	1f 16       	cp	r1, r31
    78d6:	08 f0       	brcs	.+2      	; 0x78da <__moddi3+0xfae>
    78d8:	90 e0       	ldi	r25, 0x00	; 0
    78da:	82 2f       	mov	r24, r18
    78dc:	81 95       	neg	r24
    78de:	21 e0       	ldi	r18, 0x01	; 1
    78e0:	18 16       	cp	r1, r24
    78e2:	08 f0       	brcs	.+2      	; 0x78e6 <__moddi3+0xfba>
    78e4:	20 e0       	ldi	r18, 0x00	; 0
    78e6:	e8 2f       	mov	r30, r24
    78e8:	e9 1b       	sub	r30, r25
    78ea:	91 e0       	ldi	r25, 0x01	; 1
    78ec:	8e 17       	cp	r24, r30
    78ee:	08 f0       	brcs	.+2      	; 0x78f2 <__moddi3+0xfc6>
    78f0:	90 e0       	ldi	r25, 0x00	; 0
    78f2:	29 2b       	or	r18, r25
    78f4:	83 2f       	mov	r24, r19
    78f6:	81 95       	neg	r24
    78f8:	31 e0       	ldi	r19, 0x01	; 1
    78fa:	18 16       	cp	r1, r24
    78fc:	08 f0       	brcs	.+2      	; 0x7900 <__moddi3+0xfd4>
    78fe:	30 e0       	ldi	r19, 0x00	; 0
    7900:	78 2f       	mov	r23, r24
    7902:	72 1b       	sub	r23, r18
    7904:	91 e0       	ldi	r25, 0x01	; 1
    7906:	87 17       	cp	r24, r23
    7908:	08 f0       	brcs	.+2      	; 0x790c <__moddi3+0xfe0>
    790a:	90 e0       	ldi	r25, 0x00	; 0
    790c:	39 2b       	or	r19, r25
    790e:	84 2f       	mov	r24, r20
    7910:	81 95       	neg	r24
    7912:	21 e0       	ldi	r18, 0x01	; 1
    7914:	18 16       	cp	r1, r24
    7916:	08 f0       	brcs	.+2      	; 0x791a <__moddi3+0xfee>
    7918:	20 e0       	ldi	r18, 0x00	; 0
    791a:	68 2f       	mov	r22, r24
    791c:	63 1b       	sub	r22, r19
    791e:	91 e0       	ldi	r25, 0x01	; 1
    7920:	86 17       	cp	r24, r22
    7922:	08 f0       	brcs	.+2      	; 0x7926 <__moddi3+0xffa>
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	29 2b       	or	r18, r25
    7928:	85 2f       	mov	r24, r21
    792a:	81 95       	neg	r24
    792c:	31 e0       	ldi	r19, 0x01	; 1
    792e:	18 16       	cp	r1, r24
    7930:	08 f0       	brcs	.+2      	; 0x7934 <__moddi3+0x1008>
    7932:	30 e0       	ldi	r19, 0x00	; 0
    7934:	58 2f       	mov	r21, r24
    7936:	52 1b       	sub	r21, r18
    7938:	91 e0       	ldi	r25, 0x01	; 1
    793a:	85 17       	cp	r24, r21
    793c:	08 f0       	brcs	.+2      	; 0x7940 <__moddi3+0x1014>
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	39 2b       	or	r19, r25
    7942:	8a 2f       	mov	r24, r26
    7944:	81 95       	neg	r24
    7946:	21 e0       	ldi	r18, 0x01	; 1
    7948:	18 16       	cp	r1, r24
    794a:	08 f0       	brcs	.+2      	; 0x794e <__moddi3+0x1022>
    794c:	20 e0       	ldi	r18, 0x00	; 0
    794e:	48 2f       	mov	r20, r24
    7950:	43 1b       	sub	r20, r19
    7952:	91 e0       	ldi	r25, 0x01	; 1
    7954:	84 17       	cp	r24, r20
    7956:	08 f0       	brcs	.+2      	; 0x795a <__moddi3+0x102e>
    7958:	90 e0       	ldi	r25, 0x00	; 0
    795a:	29 2b       	or	r18, r25
    795c:	8b 2f       	mov	r24, r27
    795e:	81 95       	neg	r24
    7960:	91 e0       	ldi	r25, 0x01	; 1
    7962:	18 16       	cp	r1, r24
    7964:	08 f0       	brcs	.+2      	; 0x7968 <__moddi3+0x103c>
    7966:	90 e0       	ldi	r25, 0x00	; 0
    7968:	38 2f       	mov	r19, r24
    796a:	32 1b       	sub	r19, r18
    796c:	21 e0       	ldi	r18, 0x01	; 1
    796e:	83 17       	cp	r24, r19
    7970:	08 f0       	brcs	.+2      	; 0x7974 <__moddi3+0x1048>
    7972:	20 e0       	ldi	r18, 0x00	; 0
    7974:	92 2b       	or	r25, r18
    7976:	81 2f       	mov	r24, r17
    7978:	81 95       	neg	r24
    797a:	89 1b       	sub	r24, r25
    797c:	f9 8b       	std	Y+17, r31	; 0x11
    797e:	ea 8b       	std	Y+18, r30	; 0x12
    7980:	7b 8b       	std	Y+19, r23	; 0x13
    7982:	6c 8b       	std	Y+20, r22	; 0x14
    7984:	5d 8b       	std	Y+21, r21	; 0x15
    7986:	4e 8b       	std	Y+22, r20	; 0x16
    7988:	3f 8b       	std	Y+23, r19	; 0x17
    798a:	88 8f       	std	Y+24, r24	; 0x18
    798c:	29 89       	ldd	r18, Y+17	; 0x11
    798e:	3a 89       	ldd	r19, Y+18	; 0x12
    7990:	4b 89       	ldd	r20, Y+19	; 0x13
    7992:	5c 89       	ldd	r21, Y+20	; 0x14
    7994:	6d 89       	ldd	r22, Y+21	; 0x15
    7996:	7e 89       	ldd	r23, Y+22	; 0x16
    7998:	8f 89       	ldd	r24, Y+23	; 0x17
    799a:	98 8d       	ldd	r25, Y+24	; 0x18
    799c:	c9 58       	subi	r28, 0x89	; 137
    799e:	df 4f       	sbci	r29, 0xFF	; 255
    79a0:	e2 e1       	ldi	r30, 0x12	; 18
    79a2:	0c 94 c9 45 	jmp	0x8b92	; 0x8b92 <__epilogue_restores__>

000079a6 <_fpadd_parts>:
    79a6:	a0 e0       	ldi	r26, 0x00	; 0
    79a8:	b0 e0       	ldi	r27, 0x00	; 0
    79aa:	e9 ed       	ldi	r30, 0xD9	; 217
    79ac:	fc e3       	ldi	r31, 0x3C	; 60
    79ae:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <__prologue_saves__>
    79b2:	dc 01       	movw	r26, r24
    79b4:	2b 01       	movw	r4, r22
    79b6:	fa 01       	movw	r30, r20
    79b8:	9c 91       	ld	r25, X
    79ba:	92 30       	cpi	r25, 0x02	; 2
    79bc:	08 f4       	brcc	.+2      	; 0x79c0 <_fpadd_parts+0x1a>
    79be:	39 c1       	rjmp	.+626    	; 0x7c32 <_fpadd_parts+0x28c>
    79c0:	eb 01       	movw	r28, r22
    79c2:	88 81       	ld	r24, Y
    79c4:	82 30       	cpi	r24, 0x02	; 2
    79c6:	08 f4       	brcc	.+2      	; 0x79ca <_fpadd_parts+0x24>
    79c8:	33 c1       	rjmp	.+614    	; 0x7c30 <_fpadd_parts+0x28a>
    79ca:	94 30       	cpi	r25, 0x04	; 4
    79cc:	69 f4       	brne	.+26     	; 0x79e8 <_fpadd_parts+0x42>
    79ce:	84 30       	cpi	r24, 0x04	; 4
    79d0:	09 f0       	breq	.+2      	; 0x79d4 <_fpadd_parts+0x2e>
    79d2:	2f c1       	rjmp	.+606    	; 0x7c32 <_fpadd_parts+0x28c>
    79d4:	11 96       	adiw	r26, 0x01	; 1
    79d6:	9c 91       	ld	r25, X
    79d8:	11 97       	sbiw	r26, 0x01	; 1
    79da:	89 81       	ldd	r24, Y+1	; 0x01
    79dc:	98 17       	cp	r25, r24
    79de:	09 f4       	brne	.+2      	; 0x79e2 <_fpadd_parts+0x3c>
    79e0:	28 c1       	rjmp	.+592    	; 0x7c32 <_fpadd_parts+0x28c>
    79e2:	a2 e4       	ldi	r26, 0x42	; 66
    79e4:	b2 e0       	ldi	r27, 0x02	; 2
    79e6:	25 c1       	rjmp	.+586    	; 0x7c32 <_fpadd_parts+0x28c>
    79e8:	84 30       	cpi	r24, 0x04	; 4
    79ea:	09 f4       	brne	.+2      	; 0x79ee <_fpadd_parts+0x48>
    79ec:	21 c1       	rjmp	.+578    	; 0x7c30 <_fpadd_parts+0x28a>
    79ee:	82 30       	cpi	r24, 0x02	; 2
    79f0:	a9 f4       	brne	.+42     	; 0x7a1c <_fpadd_parts+0x76>
    79f2:	92 30       	cpi	r25, 0x02	; 2
    79f4:	09 f0       	breq	.+2      	; 0x79f8 <_fpadd_parts+0x52>
    79f6:	1d c1       	rjmp	.+570    	; 0x7c32 <_fpadd_parts+0x28c>
    79f8:	9a 01       	movw	r18, r20
    79fa:	ad 01       	movw	r20, r26
    79fc:	88 e0       	ldi	r24, 0x08	; 8
    79fe:	ea 01       	movw	r28, r20
    7a00:	09 90       	ld	r0, Y+
    7a02:	ae 01       	movw	r20, r28
    7a04:	e9 01       	movw	r28, r18
    7a06:	09 92       	st	Y+, r0
    7a08:	9e 01       	movw	r18, r28
    7a0a:	81 50       	subi	r24, 0x01	; 1
    7a0c:	c1 f7       	brne	.-16     	; 0x79fe <_fpadd_parts+0x58>
    7a0e:	e2 01       	movw	r28, r4
    7a10:	89 81       	ldd	r24, Y+1	; 0x01
    7a12:	11 96       	adiw	r26, 0x01	; 1
    7a14:	9c 91       	ld	r25, X
    7a16:	89 23       	and	r24, r25
    7a18:	81 83       	std	Z+1, r24	; 0x01
    7a1a:	08 c1       	rjmp	.+528    	; 0x7c2c <_fpadd_parts+0x286>
    7a1c:	92 30       	cpi	r25, 0x02	; 2
    7a1e:	09 f4       	brne	.+2      	; 0x7a22 <_fpadd_parts+0x7c>
    7a20:	07 c1       	rjmp	.+526    	; 0x7c30 <_fpadd_parts+0x28a>
    7a22:	12 96       	adiw	r26, 0x02	; 2
    7a24:	2d 90       	ld	r2, X+
    7a26:	3c 90       	ld	r3, X
    7a28:	13 97       	sbiw	r26, 0x03	; 3
    7a2a:	eb 01       	movw	r28, r22
    7a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    7a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    7a30:	14 96       	adiw	r26, 0x04	; 4
    7a32:	ad 90       	ld	r10, X+
    7a34:	bd 90       	ld	r11, X+
    7a36:	cd 90       	ld	r12, X+
    7a38:	dc 90       	ld	r13, X
    7a3a:	17 97       	sbiw	r26, 0x07	; 7
    7a3c:	ec 80       	ldd	r14, Y+4	; 0x04
    7a3e:	fd 80       	ldd	r15, Y+5	; 0x05
    7a40:	0e 81       	ldd	r16, Y+6	; 0x06
    7a42:	1f 81       	ldd	r17, Y+7	; 0x07
    7a44:	91 01       	movw	r18, r2
    7a46:	28 1b       	sub	r18, r24
    7a48:	39 0b       	sbc	r19, r25
    7a4a:	b9 01       	movw	r22, r18
    7a4c:	37 ff       	sbrs	r19, 7
    7a4e:	04 c0       	rjmp	.+8      	; 0x7a58 <_fpadd_parts+0xb2>
    7a50:	66 27       	eor	r22, r22
    7a52:	77 27       	eor	r23, r23
    7a54:	62 1b       	sub	r22, r18
    7a56:	73 0b       	sbc	r23, r19
    7a58:	60 32       	cpi	r22, 0x20	; 32
    7a5a:	71 05       	cpc	r23, r1
    7a5c:	0c f0       	brlt	.+2      	; 0x7a60 <_fpadd_parts+0xba>
    7a5e:	61 c0       	rjmp	.+194    	; 0x7b22 <_fpadd_parts+0x17c>
    7a60:	12 16       	cp	r1, r18
    7a62:	13 06       	cpc	r1, r19
    7a64:	6c f5       	brge	.+90     	; 0x7ac0 <_fpadd_parts+0x11a>
    7a66:	37 01       	movw	r6, r14
    7a68:	48 01       	movw	r8, r16
    7a6a:	06 2e       	mov	r0, r22
    7a6c:	04 c0       	rjmp	.+8      	; 0x7a76 <_fpadd_parts+0xd0>
    7a6e:	96 94       	lsr	r9
    7a70:	87 94       	ror	r8
    7a72:	77 94       	ror	r7
    7a74:	67 94       	ror	r6
    7a76:	0a 94       	dec	r0
    7a78:	d2 f7       	brpl	.-12     	; 0x7a6e <_fpadd_parts+0xc8>
    7a7a:	21 e0       	ldi	r18, 0x01	; 1
    7a7c:	30 e0       	ldi	r19, 0x00	; 0
    7a7e:	40 e0       	ldi	r20, 0x00	; 0
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	04 c0       	rjmp	.+8      	; 0x7a8c <_fpadd_parts+0xe6>
    7a84:	22 0f       	add	r18, r18
    7a86:	33 1f       	adc	r19, r19
    7a88:	44 1f       	adc	r20, r20
    7a8a:	55 1f       	adc	r21, r21
    7a8c:	6a 95       	dec	r22
    7a8e:	d2 f7       	brpl	.-12     	; 0x7a84 <_fpadd_parts+0xde>
    7a90:	21 50       	subi	r18, 0x01	; 1
    7a92:	30 40       	sbci	r19, 0x00	; 0
    7a94:	40 40       	sbci	r20, 0x00	; 0
    7a96:	50 40       	sbci	r21, 0x00	; 0
    7a98:	2e 21       	and	r18, r14
    7a9a:	3f 21       	and	r19, r15
    7a9c:	40 23       	and	r20, r16
    7a9e:	51 23       	and	r21, r17
    7aa0:	21 15       	cp	r18, r1
    7aa2:	31 05       	cpc	r19, r1
    7aa4:	41 05       	cpc	r20, r1
    7aa6:	51 05       	cpc	r21, r1
    7aa8:	21 f0       	breq	.+8      	; 0x7ab2 <_fpadd_parts+0x10c>
    7aaa:	21 e0       	ldi	r18, 0x01	; 1
    7aac:	30 e0       	ldi	r19, 0x00	; 0
    7aae:	40 e0       	ldi	r20, 0x00	; 0
    7ab0:	50 e0       	ldi	r21, 0x00	; 0
    7ab2:	79 01       	movw	r14, r18
    7ab4:	8a 01       	movw	r16, r20
    7ab6:	e6 28       	or	r14, r6
    7ab8:	f7 28       	or	r15, r7
    7aba:	08 29       	or	r16, r8
    7abc:	19 29       	or	r17, r9
    7abe:	3c c0       	rjmp	.+120    	; 0x7b38 <_fpadd_parts+0x192>
    7ac0:	23 2b       	or	r18, r19
    7ac2:	d1 f1       	breq	.+116    	; 0x7b38 <_fpadd_parts+0x192>
    7ac4:	26 0e       	add	r2, r22
    7ac6:	37 1e       	adc	r3, r23
    7ac8:	35 01       	movw	r6, r10
    7aca:	46 01       	movw	r8, r12
    7acc:	06 2e       	mov	r0, r22
    7ace:	04 c0       	rjmp	.+8      	; 0x7ad8 <_fpadd_parts+0x132>
    7ad0:	96 94       	lsr	r9
    7ad2:	87 94       	ror	r8
    7ad4:	77 94       	ror	r7
    7ad6:	67 94       	ror	r6
    7ad8:	0a 94       	dec	r0
    7ada:	d2 f7       	brpl	.-12     	; 0x7ad0 <_fpadd_parts+0x12a>
    7adc:	21 e0       	ldi	r18, 0x01	; 1
    7ade:	30 e0       	ldi	r19, 0x00	; 0
    7ae0:	40 e0       	ldi	r20, 0x00	; 0
    7ae2:	50 e0       	ldi	r21, 0x00	; 0
    7ae4:	04 c0       	rjmp	.+8      	; 0x7aee <_fpadd_parts+0x148>
    7ae6:	22 0f       	add	r18, r18
    7ae8:	33 1f       	adc	r19, r19
    7aea:	44 1f       	adc	r20, r20
    7aec:	55 1f       	adc	r21, r21
    7aee:	6a 95       	dec	r22
    7af0:	d2 f7       	brpl	.-12     	; 0x7ae6 <_fpadd_parts+0x140>
    7af2:	21 50       	subi	r18, 0x01	; 1
    7af4:	30 40       	sbci	r19, 0x00	; 0
    7af6:	40 40       	sbci	r20, 0x00	; 0
    7af8:	50 40       	sbci	r21, 0x00	; 0
    7afa:	2a 21       	and	r18, r10
    7afc:	3b 21       	and	r19, r11
    7afe:	4c 21       	and	r20, r12
    7b00:	5d 21       	and	r21, r13
    7b02:	21 15       	cp	r18, r1
    7b04:	31 05       	cpc	r19, r1
    7b06:	41 05       	cpc	r20, r1
    7b08:	51 05       	cpc	r21, r1
    7b0a:	21 f0       	breq	.+8      	; 0x7b14 <_fpadd_parts+0x16e>
    7b0c:	21 e0       	ldi	r18, 0x01	; 1
    7b0e:	30 e0       	ldi	r19, 0x00	; 0
    7b10:	40 e0       	ldi	r20, 0x00	; 0
    7b12:	50 e0       	ldi	r21, 0x00	; 0
    7b14:	59 01       	movw	r10, r18
    7b16:	6a 01       	movw	r12, r20
    7b18:	a6 28       	or	r10, r6
    7b1a:	b7 28       	or	r11, r7
    7b1c:	c8 28       	or	r12, r8
    7b1e:	d9 28       	or	r13, r9
    7b20:	0b c0       	rjmp	.+22     	; 0x7b38 <_fpadd_parts+0x192>
    7b22:	82 15       	cp	r24, r2
    7b24:	93 05       	cpc	r25, r3
    7b26:	2c f0       	brlt	.+10     	; 0x7b32 <_fpadd_parts+0x18c>
    7b28:	1c 01       	movw	r2, r24
    7b2a:	aa 24       	eor	r10, r10
    7b2c:	bb 24       	eor	r11, r11
    7b2e:	65 01       	movw	r12, r10
    7b30:	03 c0       	rjmp	.+6      	; 0x7b38 <_fpadd_parts+0x192>
    7b32:	ee 24       	eor	r14, r14
    7b34:	ff 24       	eor	r15, r15
    7b36:	87 01       	movw	r16, r14
    7b38:	11 96       	adiw	r26, 0x01	; 1
    7b3a:	9c 91       	ld	r25, X
    7b3c:	d2 01       	movw	r26, r4
    7b3e:	11 96       	adiw	r26, 0x01	; 1
    7b40:	8c 91       	ld	r24, X
    7b42:	98 17       	cp	r25, r24
    7b44:	09 f4       	brne	.+2      	; 0x7b48 <_fpadd_parts+0x1a2>
    7b46:	45 c0       	rjmp	.+138    	; 0x7bd2 <_fpadd_parts+0x22c>
    7b48:	99 23       	and	r25, r25
    7b4a:	39 f0       	breq	.+14     	; 0x7b5a <_fpadd_parts+0x1b4>
    7b4c:	a8 01       	movw	r20, r16
    7b4e:	97 01       	movw	r18, r14
    7b50:	2a 19       	sub	r18, r10
    7b52:	3b 09       	sbc	r19, r11
    7b54:	4c 09       	sbc	r20, r12
    7b56:	5d 09       	sbc	r21, r13
    7b58:	06 c0       	rjmp	.+12     	; 0x7b66 <_fpadd_parts+0x1c0>
    7b5a:	a6 01       	movw	r20, r12
    7b5c:	95 01       	movw	r18, r10
    7b5e:	2e 19       	sub	r18, r14
    7b60:	3f 09       	sbc	r19, r15
    7b62:	40 0b       	sbc	r20, r16
    7b64:	51 0b       	sbc	r21, r17
    7b66:	57 fd       	sbrc	r21, 7
    7b68:	08 c0       	rjmp	.+16     	; 0x7b7a <_fpadd_parts+0x1d4>
    7b6a:	11 82       	std	Z+1, r1	; 0x01
    7b6c:	33 82       	std	Z+3, r3	; 0x03
    7b6e:	22 82       	std	Z+2, r2	; 0x02
    7b70:	24 83       	std	Z+4, r18	; 0x04
    7b72:	35 83       	std	Z+5, r19	; 0x05
    7b74:	46 83       	std	Z+6, r20	; 0x06
    7b76:	57 83       	std	Z+7, r21	; 0x07
    7b78:	1d c0       	rjmp	.+58     	; 0x7bb4 <_fpadd_parts+0x20e>
    7b7a:	81 e0       	ldi	r24, 0x01	; 1
    7b7c:	81 83       	std	Z+1, r24	; 0x01
    7b7e:	33 82       	std	Z+3, r3	; 0x03
    7b80:	22 82       	std	Z+2, r2	; 0x02
    7b82:	88 27       	eor	r24, r24
    7b84:	99 27       	eor	r25, r25
    7b86:	dc 01       	movw	r26, r24
    7b88:	82 1b       	sub	r24, r18
    7b8a:	93 0b       	sbc	r25, r19
    7b8c:	a4 0b       	sbc	r26, r20
    7b8e:	b5 0b       	sbc	r27, r21
    7b90:	84 83       	std	Z+4, r24	; 0x04
    7b92:	95 83       	std	Z+5, r25	; 0x05
    7b94:	a6 83       	std	Z+6, r26	; 0x06
    7b96:	b7 83       	std	Z+7, r27	; 0x07
    7b98:	0d c0       	rjmp	.+26     	; 0x7bb4 <_fpadd_parts+0x20e>
    7b9a:	22 0f       	add	r18, r18
    7b9c:	33 1f       	adc	r19, r19
    7b9e:	44 1f       	adc	r20, r20
    7ba0:	55 1f       	adc	r21, r21
    7ba2:	24 83       	std	Z+4, r18	; 0x04
    7ba4:	35 83       	std	Z+5, r19	; 0x05
    7ba6:	46 83       	std	Z+6, r20	; 0x06
    7ba8:	57 83       	std	Z+7, r21	; 0x07
    7baa:	82 81       	ldd	r24, Z+2	; 0x02
    7bac:	93 81       	ldd	r25, Z+3	; 0x03
    7bae:	01 97       	sbiw	r24, 0x01	; 1
    7bb0:	93 83       	std	Z+3, r25	; 0x03
    7bb2:	82 83       	std	Z+2, r24	; 0x02
    7bb4:	24 81       	ldd	r18, Z+4	; 0x04
    7bb6:	35 81       	ldd	r19, Z+5	; 0x05
    7bb8:	46 81       	ldd	r20, Z+6	; 0x06
    7bba:	57 81       	ldd	r21, Z+7	; 0x07
    7bbc:	da 01       	movw	r26, r20
    7bbe:	c9 01       	movw	r24, r18
    7bc0:	01 97       	sbiw	r24, 0x01	; 1
    7bc2:	a1 09       	sbc	r26, r1
    7bc4:	b1 09       	sbc	r27, r1
    7bc6:	8f 5f       	subi	r24, 0xFF	; 255
    7bc8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bca:	af 4f       	sbci	r26, 0xFF	; 255
    7bcc:	bf 43       	sbci	r27, 0x3F	; 63
    7bce:	28 f3       	brcs	.-54     	; 0x7b9a <_fpadd_parts+0x1f4>
    7bd0:	0b c0       	rjmp	.+22     	; 0x7be8 <_fpadd_parts+0x242>
    7bd2:	91 83       	std	Z+1, r25	; 0x01
    7bd4:	33 82       	std	Z+3, r3	; 0x03
    7bd6:	22 82       	std	Z+2, r2	; 0x02
    7bd8:	ea 0c       	add	r14, r10
    7bda:	fb 1c       	adc	r15, r11
    7bdc:	0c 1d       	adc	r16, r12
    7bde:	1d 1d       	adc	r17, r13
    7be0:	e4 82       	std	Z+4, r14	; 0x04
    7be2:	f5 82       	std	Z+5, r15	; 0x05
    7be4:	06 83       	std	Z+6, r16	; 0x06
    7be6:	17 83       	std	Z+7, r17	; 0x07
    7be8:	83 e0       	ldi	r24, 0x03	; 3
    7bea:	80 83       	st	Z, r24
    7bec:	24 81       	ldd	r18, Z+4	; 0x04
    7bee:	35 81       	ldd	r19, Z+5	; 0x05
    7bf0:	46 81       	ldd	r20, Z+6	; 0x06
    7bf2:	57 81       	ldd	r21, Z+7	; 0x07
    7bf4:	57 ff       	sbrs	r21, 7
    7bf6:	1a c0       	rjmp	.+52     	; 0x7c2c <_fpadd_parts+0x286>
    7bf8:	c9 01       	movw	r24, r18
    7bfa:	aa 27       	eor	r26, r26
    7bfc:	97 fd       	sbrc	r25, 7
    7bfe:	a0 95       	com	r26
    7c00:	ba 2f       	mov	r27, r26
    7c02:	81 70       	andi	r24, 0x01	; 1
    7c04:	90 70       	andi	r25, 0x00	; 0
    7c06:	a0 70       	andi	r26, 0x00	; 0
    7c08:	b0 70       	andi	r27, 0x00	; 0
    7c0a:	56 95       	lsr	r21
    7c0c:	47 95       	ror	r20
    7c0e:	37 95       	ror	r19
    7c10:	27 95       	ror	r18
    7c12:	82 2b       	or	r24, r18
    7c14:	93 2b       	or	r25, r19
    7c16:	a4 2b       	or	r26, r20
    7c18:	b5 2b       	or	r27, r21
    7c1a:	84 83       	std	Z+4, r24	; 0x04
    7c1c:	95 83       	std	Z+5, r25	; 0x05
    7c1e:	a6 83       	std	Z+6, r26	; 0x06
    7c20:	b7 83       	std	Z+7, r27	; 0x07
    7c22:	82 81       	ldd	r24, Z+2	; 0x02
    7c24:	93 81       	ldd	r25, Z+3	; 0x03
    7c26:	01 96       	adiw	r24, 0x01	; 1
    7c28:	93 83       	std	Z+3, r25	; 0x03
    7c2a:	82 83       	std	Z+2, r24	; 0x02
    7c2c:	df 01       	movw	r26, r30
    7c2e:	01 c0       	rjmp	.+2      	; 0x7c32 <_fpadd_parts+0x28c>
    7c30:	d2 01       	movw	r26, r4
    7c32:	cd 01       	movw	r24, r26
    7c34:	cd b7       	in	r28, 0x3d	; 61
    7c36:	de b7       	in	r29, 0x3e	; 62
    7c38:	e2 e1       	ldi	r30, 0x12	; 18
    7c3a:	0c 94 c9 45 	jmp	0x8b92	; 0x8b92 <__epilogue_restores__>

00007c3e <__subsf3>:
    7c3e:	a0 e2       	ldi	r26, 0x20	; 32
    7c40:	b0 e0       	ldi	r27, 0x00	; 0
    7c42:	e5 e2       	ldi	r30, 0x25	; 37
    7c44:	fe e3       	ldi	r31, 0x3E	; 62
    7c46:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__prologue_saves__+0x18>
    7c4a:	69 83       	std	Y+1, r22	; 0x01
    7c4c:	7a 83       	std	Y+2, r23	; 0x02
    7c4e:	8b 83       	std	Y+3, r24	; 0x03
    7c50:	9c 83       	std	Y+4, r25	; 0x04
    7c52:	2d 83       	std	Y+5, r18	; 0x05
    7c54:	3e 83       	std	Y+6, r19	; 0x06
    7c56:	4f 83       	std	Y+7, r20	; 0x07
    7c58:	58 87       	std	Y+8, r21	; 0x08
    7c5a:	e9 e0       	ldi	r30, 0x09	; 9
    7c5c:	ee 2e       	mov	r14, r30
    7c5e:	f1 2c       	mov	r15, r1
    7c60:	ec 0e       	add	r14, r28
    7c62:	fd 1e       	adc	r15, r29
    7c64:	ce 01       	movw	r24, r28
    7c66:	01 96       	adiw	r24, 0x01	; 1
    7c68:	b7 01       	movw	r22, r14
    7c6a:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7c6e:	8e 01       	movw	r16, r28
    7c70:	0f 5e       	subi	r16, 0xEF	; 239
    7c72:	1f 4f       	sbci	r17, 0xFF	; 255
    7c74:	ce 01       	movw	r24, r28
    7c76:	05 96       	adiw	r24, 0x05	; 5
    7c78:	b8 01       	movw	r22, r16
    7c7a:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7c7e:	8a 89       	ldd	r24, Y+18	; 0x12
    7c80:	91 e0       	ldi	r25, 0x01	; 1
    7c82:	89 27       	eor	r24, r25
    7c84:	8a 8b       	std	Y+18, r24	; 0x12
    7c86:	c7 01       	movw	r24, r14
    7c88:	b8 01       	movw	r22, r16
    7c8a:	ae 01       	movw	r20, r28
    7c8c:	47 5e       	subi	r20, 0xE7	; 231
    7c8e:	5f 4f       	sbci	r21, 0xFF	; 255
    7c90:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <_fpadd_parts>
    7c94:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    7c98:	a0 96       	adiw	r28, 0x20	; 32
    7c9a:	e6 e0       	ldi	r30, 0x06	; 6
    7c9c:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__epilogue_restores__+0x18>

00007ca0 <__addsf3>:
    7ca0:	a0 e2       	ldi	r26, 0x20	; 32
    7ca2:	b0 e0       	ldi	r27, 0x00	; 0
    7ca4:	e6 e5       	ldi	r30, 0x56	; 86
    7ca6:	fe e3       	ldi	r31, 0x3E	; 62
    7ca8:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__prologue_saves__+0x18>
    7cac:	69 83       	std	Y+1, r22	; 0x01
    7cae:	7a 83       	std	Y+2, r23	; 0x02
    7cb0:	8b 83       	std	Y+3, r24	; 0x03
    7cb2:	9c 83       	std	Y+4, r25	; 0x04
    7cb4:	2d 83       	std	Y+5, r18	; 0x05
    7cb6:	3e 83       	std	Y+6, r19	; 0x06
    7cb8:	4f 83       	std	Y+7, r20	; 0x07
    7cba:	58 87       	std	Y+8, r21	; 0x08
    7cbc:	f9 e0       	ldi	r31, 0x09	; 9
    7cbe:	ef 2e       	mov	r14, r31
    7cc0:	f1 2c       	mov	r15, r1
    7cc2:	ec 0e       	add	r14, r28
    7cc4:	fd 1e       	adc	r15, r29
    7cc6:	ce 01       	movw	r24, r28
    7cc8:	01 96       	adiw	r24, 0x01	; 1
    7cca:	b7 01       	movw	r22, r14
    7ccc:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7cd0:	8e 01       	movw	r16, r28
    7cd2:	0f 5e       	subi	r16, 0xEF	; 239
    7cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    7cd6:	ce 01       	movw	r24, r28
    7cd8:	05 96       	adiw	r24, 0x05	; 5
    7cda:	b8 01       	movw	r22, r16
    7cdc:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7ce0:	c7 01       	movw	r24, r14
    7ce2:	b8 01       	movw	r22, r16
    7ce4:	ae 01       	movw	r20, r28
    7ce6:	47 5e       	subi	r20, 0xE7	; 231
    7ce8:	5f 4f       	sbci	r21, 0xFF	; 255
    7cea:	0e 94 d3 3c 	call	0x79a6	; 0x79a6 <_fpadd_parts>
    7cee:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    7cf2:	a0 96       	adiw	r28, 0x20	; 32
    7cf4:	e6 e0       	ldi	r30, 0x06	; 6
    7cf6:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__epilogue_restores__+0x18>

00007cfa <__mulsf3>:
    7cfa:	a0 e2       	ldi	r26, 0x20	; 32
    7cfc:	b0 e0       	ldi	r27, 0x00	; 0
    7cfe:	e3 e8       	ldi	r30, 0x83	; 131
    7d00:	fe e3       	ldi	r31, 0x3E	; 62
    7d02:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <__prologue_saves__>
    7d06:	69 83       	std	Y+1, r22	; 0x01
    7d08:	7a 83       	std	Y+2, r23	; 0x02
    7d0a:	8b 83       	std	Y+3, r24	; 0x03
    7d0c:	9c 83       	std	Y+4, r25	; 0x04
    7d0e:	2d 83       	std	Y+5, r18	; 0x05
    7d10:	3e 83       	std	Y+6, r19	; 0x06
    7d12:	4f 83       	std	Y+7, r20	; 0x07
    7d14:	58 87       	std	Y+8, r21	; 0x08
    7d16:	ce 01       	movw	r24, r28
    7d18:	01 96       	adiw	r24, 0x01	; 1
    7d1a:	be 01       	movw	r22, r28
    7d1c:	67 5f       	subi	r22, 0xF7	; 247
    7d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d20:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7d24:	ce 01       	movw	r24, r28
    7d26:	05 96       	adiw	r24, 0x05	; 5
    7d28:	be 01       	movw	r22, r28
    7d2a:	6f 5e       	subi	r22, 0xEF	; 239
    7d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d2e:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7d32:	99 85       	ldd	r25, Y+9	; 0x09
    7d34:	92 30       	cpi	r25, 0x02	; 2
    7d36:	88 f0       	brcs	.+34     	; 0x7d5a <__mulsf3+0x60>
    7d38:	89 89       	ldd	r24, Y+17	; 0x11
    7d3a:	82 30       	cpi	r24, 0x02	; 2
    7d3c:	c8 f0       	brcs	.+50     	; 0x7d70 <__mulsf3+0x76>
    7d3e:	94 30       	cpi	r25, 0x04	; 4
    7d40:	19 f4       	brne	.+6      	; 0x7d48 <__mulsf3+0x4e>
    7d42:	82 30       	cpi	r24, 0x02	; 2
    7d44:	51 f4       	brne	.+20     	; 0x7d5a <__mulsf3+0x60>
    7d46:	04 c0       	rjmp	.+8      	; 0x7d50 <__mulsf3+0x56>
    7d48:	84 30       	cpi	r24, 0x04	; 4
    7d4a:	29 f4       	brne	.+10     	; 0x7d56 <__mulsf3+0x5c>
    7d4c:	92 30       	cpi	r25, 0x02	; 2
    7d4e:	81 f4       	brne	.+32     	; 0x7d70 <__mulsf3+0x76>
    7d50:	82 e4       	ldi	r24, 0x42	; 66
    7d52:	92 e0       	ldi	r25, 0x02	; 2
    7d54:	c6 c0       	rjmp	.+396    	; 0x7ee2 <__mulsf3+0x1e8>
    7d56:	92 30       	cpi	r25, 0x02	; 2
    7d58:	49 f4       	brne	.+18     	; 0x7d6c <__mulsf3+0x72>
    7d5a:	20 e0       	ldi	r18, 0x00	; 0
    7d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d5e:	8a 89       	ldd	r24, Y+18	; 0x12
    7d60:	98 13       	cpse	r25, r24
    7d62:	21 e0       	ldi	r18, 0x01	; 1
    7d64:	2a 87       	std	Y+10, r18	; 0x0a
    7d66:	ce 01       	movw	r24, r28
    7d68:	09 96       	adiw	r24, 0x09	; 9
    7d6a:	bb c0       	rjmp	.+374    	; 0x7ee2 <__mulsf3+0x1e8>
    7d6c:	82 30       	cpi	r24, 0x02	; 2
    7d6e:	49 f4       	brne	.+18     	; 0x7d82 <__mulsf3+0x88>
    7d70:	20 e0       	ldi	r18, 0x00	; 0
    7d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    7d74:	8a 89       	ldd	r24, Y+18	; 0x12
    7d76:	98 13       	cpse	r25, r24
    7d78:	21 e0       	ldi	r18, 0x01	; 1
    7d7a:	2a 8b       	std	Y+18, r18	; 0x12
    7d7c:	ce 01       	movw	r24, r28
    7d7e:	41 96       	adiw	r24, 0x11	; 17
    7d80:	b0 c0       	rjmp	.+352    	; 0x7ee2 <__mulsf3+0x1e8>
    7d82:	2d 84       	ldd	r2, Y+13	; 0x0d
    7d84:	3e 84       	ldd	r3, Y+14	; 0x0e
    7d86:	4f 84       	ldd	r4, Y+15	; 0x0f
    7d88:	58 88       	ldd	r5, Y+16	; 0x10
    7d8a:	6d 88       	ldd	r6, Y+21	; 0x15
    7d8c:	7e 88       	ldd	r7, Y+22	; 0x16
    7d8e:	8f 88       	ldd	r8, Y+23	; 0x17
    7d90:	98 8c       	ldd	r9, Y+24	; 0x18
    7d92:	ee 24       	eor	r14, r14
    7d94:	ff 24       	eor	r15, r15
    7d96:	87 01       	movw	r16, r14
    7d98:	aa 24       	eor	r10, r10
    7d9a:	bb 24       	eor	r11, r11
    7d9c:	65 01       	movw	r12, r10
    7d9e:	40 e0       	ldi	r20, 0x00	; 0
    7da0:	50 e0       	ldi	r21, 0x00	; 0
    7da2:	60 e0       	ldi	r22, 0x00	; 0
    7da4:	70 e0       	ldi	r23, 0x00	; 0
    7da6:	e0 e0       	ldi	r30, 0x00	; 0
    7da8:	f0 e0       	ldi	r31, 0x00	; 0
    7daa:	c1 01       	movw	r24, r2
    7dac:	81 70       	andi	r24, 0x01	; 1
    7dae:	90 70       	andi	r25, 0x00	; 0
    7db0:	89 2b       	or	r24, r25
    7db2:	e9 f0       	breq	.+58     	; 0x7dee <__mulsf3+0xf4>
    7db4:	e6 0c       	add	r14, r6
    7db6:	f7 1c       	adc	r15, r7
    7db8:	08 1d       	adc	r16, r8
    7dba:	19 1d       	adc	r17, r9
    7dbc:	9a 01       	movw	r18, r20
    7dbe:	ab 01       	movw	r20, r22
    7dc0:	2a 0d       	add	r18, r10
    7dc2:	3b 1d       	adc	r19, r11
    7dc4:	4c 1d       	adc	r20, r12
    7dc6:	5d 1d       	adc	r21, r13
    7dc8:	80 e0       	ldi	r24, 0x00	; 0
    7dca:	90 e0       	ldi	r25, 0x00	; 0
    7dcc:	a0 e0       	ldi	r26, 0x00	; 0
    7dce:	b0 e0       	ldi	r27, 0x00	; 0
    7dd0:	e6 14       	cp	r14, r6
    7dd2:	f7 04       	cpc	r15, r7
    7dd4:	08 05       	cpc	r16, r8
    7dd6:	19 05       	cpc	r17, r9
    7dd8:	20 f4       	brcc	.+8      	; 0x7de2 <__mulsf3+0xe8>
    7dda:	81 e0       	ldi	r24, 0x01	; 1
    7ddc:	90 e0       	ldi	r25, 0x00	; 0
    7dde:	a0 e0       	ldi	r26, 0x00	; 0
    7de0:	b0 e0       	ldi	r27, 0x00	; 0
    7de2:	ba 01       	movw	r22, r20
    7de4:	a9 01       	movw	r20, r18
    7de6:	48 0f       	add	r20, r24
    7de8:	59 1f       	adc	r21, r25
    7dea:	6a 1f       	adc	r22, r26
    7dec:	7b 1f       	adc	r23, r27
    7dee:	aa 0c       	add	r10, r10
    7df0:	bb 1c       	adc	r11, r11
    7df2:	cc 1c       	adc	r12, r12
    7df4:	dd 1c       	adc	r13, r13
    7df6:	97 fe       	sbrs	r9, 7
    7df8:	08 c0       	rjmp	.+16     	; 0x7e0a <__mulsf3+0x110>
    7dfa:	81 e0       	ldi	r24, 0x01	; 1
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	a0 e0       	ldi	r26, 0x00	; 0
    7e00:	b0 e0       	ldi	r27, 0x00	; 0
    7e02:	a8 2a       	or	r10, r24
    7e04:	b9 2a       	or	r11, r25
    7e06:	ca 2a       	or	r12, r26
    7e08:	db 2a       	or	r13, r27
    7e0a:	31 96       	adiw	r30, 0x01	; 1
    7e0c:	e0 32       	cpi	r30, 0x20	; 32
    7e0e:	f1 05       	cpc	r31, r1
    7e10:	49 f0       	breq	.+18     	; 0x7e24 <__mulsf3+0x12a>
    7e12:	66 0c       	add	r6, r6
    7e14:	77 1c       	adc	r7, r7
    7e16:	88 1c       	adc	r8, r8
    7e18:	99 1c       	adc	r9, r9
    7e1a:	56 94       	lsr	r5
    7e1c:	47 94       	ror	r4
    7e1e:	37 94       	ror	r3
    7e20:	27 94       	ror	r2
    7e22:	c3 cf       	rjmp	.-122    	; 0x7daa <__mulsf3+0xb0>
    7e24:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e26:	ea 89       	ldd	r30, Y+18	; 0x12
    7e28:	2b 89       	ldd	r18, Y+19	; 0x13
    7e2a:	3c 89       	ldd	r19, Y+20	; 0x14
    7e2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e30:	28 0f       	add	r18, r24
    7e32:	39 1f       	adc	r19, r25
    7e34:	2e 5f       	subi	r18, 0xFE	; 254
    7e36:	3f 4f       	sbci	r19, 0xFF	; 255
    7e38:	17 c0       	rjmp	.+46     	; 0x7e68 <__mulsf3+0x16e>
    7e3a:	ca 01       	movw	r24, r20
    7e3c:	81 70       	andi	r24, 0x01	; 1
    7e3e:	90 70       	andi	r25, 0x00	; 0
    7e40:	89 2b       	or	r24, r25
    7e42:	61 f0       	breq	.+24     	; 0x7e5c <__mulsf3+0x162>
    7e44:	16 95       	lsr	r17
    7e46:	07 95       	ror	r16
    7e48:	f7 94       	ror	r15
    7e4a:	e7 94       	ror	r14
    7e4c:	80 e0       	ldi	r24, 0x00	; 0
    7e4e:	90 e0       	ldi	r25, 0x00	; 0
    7e50:	a0 e0       	ldi	r26, 0x00	; 0
    7e52:	b0 e8       	ldi	r27, 0x80	; 128
    7e54:	e8 2a       	or	r14, r24
    7e56:	f9 2a       	or	r15, r25
    7e58:	0a 2b       	or	r16, r26
    7e5a:	1b 2b       	or	r17, r27
    7e5c:	76 95       	lsr	r23
    7e5e:	67 95       	ror	r22
    7e60:	57 95       	ror	r21
    7e62:	47 95       	ror	r20
    7e64:	2f 5f       	subi	r18, 0xFF	; 255
    7e66:	3f 4f       	sbci	r19, 0xFF	; 255
    7e68:	77 fd       	sbrc	r23, 7
    7e6a:	e7 cf       	rjmp	.-50     	; 0x7e3a <__mulsf3+0x140>
    7e6c:	0c c0       	rjmp	.+24     	; 0x7e86 <__mulsf3+0x18c>
    7e6e:	44 0f       	add	r20, r20
    7e70:	55 1f       	adc	r21, r21
    7e72:	66 1f       	adc	r22, r22
    7e74:	77 1f       	adc	r23, r23
    7e76:	17 fd       	sbrc	r17, 7
    7e78:	41 60       	ori	r20, 0x01	; 1
    7e7a:	ee 0c       	add	r14, r14
    7e7c:	ff 1c       	adc	r15, r15
    7e7e:	00 1f       	adc	r16, r16
    7e80:	11 1f       	adc	r17, r17
    7e82:	21 50       	subi	r18, 0x01	; 1
    7e84:	30 40       	sbci	r19, 0x00	; 0
    7e86:	40 30       	cpi	r20, 0x00	; 0
    7e88:	90 e0       	ldi	r25, 0x00	; 0
    7e8a:	59 07       	cpc	r21, r25
    7e8c:	90 e0       	ldi	r25, 0x00	; 0
    7e8e:	69 07       	cpc	r22, r25
    7e90:	90 e4       	ldi	r25, 0x40	; 64
    7e92:	79 07       	cpc	r23, r25
    7e94:	60 f3       	brcs	.-40     	; 0x7e6e <__mulsf3+0x174>
    7e96:	2b 8f       	std	Y+27, r18	; 0x1b
    7e98:	3c 8f       	std	Y+28, r19	; 0x1c
    7e9a:	db 01       	movw	r26, r22
    7e9c:	ca 01       	movw	r24, r20
    7e9e:	8f 77       	andi	r24, 0x7F	; 127
    7ea0:	90 70       	andi	r25, 0x00	; 0
    7ea2:	a0 70       	andi	r26, 0x00	; 0
    7ea4:	b0 70       	andi	r27, 0x00	; 0
    7ea6:	80 34       	cpi	r24, 0x40	; 64
    7ea8:	91 05       	cpc	r25, r1
    7eaa:	a1 05       	cpc	r26, r1
    7eac:	b1 05       	cpc	r27, r1
    7eae:	61 f4       	brne	.+24     	; 0x7ec8 <__mulsf3+0x1ce>
    7eb0:	47 fd       	sbrc	r20, 7
    7eb2:	0a c0       	rjmp	.+20     	; 0x7ec8 <__mulsf3+0x1ce>
    7eb4:	e1 14       	cp	r14, r1
    7eb6:	f1 04       	cpc	r15, r1
    7eb8:	01 05       	cpc	r16, r1
    7eba:	11 05       	cpc	r17, r1
    7ebc:	29 f0       	breq	.+10     	; 0x7ec8 <__mulsf3+0x1ce>
    7ebe:	40 5c       	subi	r20, 0xC0	; 192
    7ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ec2:	6f 4f       	sbci	r22, 0xFF	; 255
    7ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ec6:	40 78       	andi	r20, 0x80	; 128
    7ec8:	1a 8e       	std	Y+26, r1	; 0x1a
    7eca:	fe 17       	cp	r31, r30
    7ecc:	11 f0       	breq	.+4      	; 0x7ed2 <__mulsf3+0x1d8>
    7ece:	81 e0       	ldi	r24, 0x01	; 1
    7ed0:	8a 8f       	std	Y+26, r24	; 0x1a
    7ed2:	4d 8f       	std	Y+29, r20	; 0x1d
    7ed4:	5e 8f       	std	Y+30, r21	; 0x1e
    7ed6:	6f 8f       	std	Y+31, r22	; 0x1f
    7ed8:	78 a3       	std	Y+32, r23	; 0x20
    7eda:	83 e0       	ldi	r24, 0x03	; 3
    7edc:	89 8f       	std	Y+25, r24	; 0x19
    7ede:	ce 01       	movw	r24, r28
    7ee0:	49 96       	adiw	r24, 0x19	; 25
    7ee2:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    7ee6:	a0 96       	adiw	r28, 0x20	; 32
    7ee8:	e2 e1       	ldi	r30, 0x12	; 18
    7eea:	0c 94 c9 45 	jmp	0x8b92	; 0x8b92 <__epilogue_restores__>

00007eee <__divsf3>:
    7eee:	a8 e1       	ldi	r26, 0x18	; 24
    7ef0:	b0 e0       	ldi	r27, 0x00	; 0
    7ef2:	ed e7       	ldi	r30, 0x7D	; 125
    7ef4:	ff e3       	ldi	r31, 0x3F	; 63
    7ef6:	0c 94 b5 45 	jmp	0x8b6a	; 0x8b6a <__prologue_saves__+0x10>
    7efa:	69 83       	std	Y+1, r22	; 0x01
    7efc:	7a 83       	std	Y+2, r23	; 0x02
    7efe:	8b 83       	std	Y+3, r24	; 0x03
    7f00:	9c 83       	std	Y+4, r25	; 0x04
    7f02:	2d 83       	std	Y+5, r18	; 0x05
    7f04:	3e 83       	std	Y+6, r19	; 0x06
    7f06:	4f 83       	std	Y+7, r20	; 0x07
    7f08:	58 87       	std	Y+8, r21	; 0x08
    7f0a:	b9 e0       	ldi	r27, 0x09	; 9
    7f0c:	eb 2e       	mov	r14, r27
    7f0e:	f1 2c       	mov	r15, r1
    7f10:	ec 0e       	add	r14, r28
    7f12:	fd 1e       	adc	r15, r29
    7f14:	ce 01       	movw	r24, r28
    7f16:	01 96       	adiw	r24, 0x01	; 1
    7f18:	b7 01       	movw	r22, r14
    7f1a:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7f1e:	8e 01       	movw	r16, r28
    7f20:	0f 5e       	subi	r16, 0xEF	; 239
    7f22:	1f 4f       	sbci	r17, 0xFF	; 255
    7f24:	ce 01       	movw	r24, r28
    7f26:	05 96       	adiw	r24, 0x05	; 5
    7f28:	b8 01       	movw	r22, r16
    7f2a:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    7f2e:	29 85       	ldd	r18, Y+9	; 0x09
    7f30:	22 30       	cpi	r18, 0x02	; 2
    7f32:	08 f4       	brcc	.+2      	; 0x7f36 <__divsf3+0x48>
    7f34:	7e c0       	rjmp	.+252    	; 0x8032 <__divsf3+0x144>
    7f36:	39 89       	ldd	r19, Y+17	; 0x11
    7f38:	32 30       	cpi	r19, 0x02	; 2
    7f3a:	10 f4       	brcc	.+4      	; 0x7f40 <__divsf3+0x52>
    7f3c:	b8 01       	movw	r22, r16
    7f3e:	7c c0       	rjmp	.+248    	; 0x8038 <__divsf3+0x14a>
    7f40:	8a 85       	ldd	r24, Y+10	; 0x0a
    7f42:	9a 89       	ldd	r25, Y+18	; 0x12
    7f44:	89 27       	eor	r24, r25
    7f46:	8a 87       	std	Y+10, r24	; 0x0a
    7f48:	24 30       	cpi	r18, 0x04	; 4
    7f4a:	11 f0       	breq	.+4      	; 0x7f50 <__divsf3+0x62>
    7f4c:	22 30       	cpi	r18, 0x02	; 2
    7f4e:	31 f4       	brne	.+12     	; 0x7f5c <__divsf3+0x6e>
    7f50:	23 17       	cp	r18, r19
    7f52:	09 f0       	breq	.+2      	; 0x7f56 <__divsf3+0x68>
    7f54:	6e c0       	rjmp	.+220    	; 0x8032 <__divsf3+0x144>
    7f56:	62 e4       	ldi	r22, 0x42	; 66
    7f58:	72 e0       	ldi	r23, 0x02	; 2
    7f5a:	6e c0       	rjmp	.+220    	; 0x8038 <__divsf3+0x14a>
    7f5c:	34 30       	cpi	r19, 0x04	; 4
    7f5e:	39 f4       	brne	.+14     	; 0x7f6e <__divsf3+0x80>
    7f60:	1d 86       	std	Y+13, r1	; 0x0d
    7f62:	1e 86       	std	Y+14, r1	; 0x0e
    7f64:	1f 86       	std	Y+15, r1	; 0x0f
    7f66:	18 8a       	std	Y+16, r1	; 0x10
    7f68:	1c 86       	std	Y+12, r1	; 0x0c
    7f6a:	1b 86       	std	Y+11, r1	; 0x0b
    7f6c:	04 c0       	rjmp	.+8      	; 0x7f76 <__divsf3+0x88>
    7f6e:	32 30       	cpi	r19, 0x02	; 2
    7f70:	21 f4       	brne	.+8      	; 0x7f7a <__divsf3+0x8c>
    7f72:	84 e0       	ldi	r24, 0x04	; 4
    7f74:	89 87       	std	Y+9, r24	; 0x09
    7f76:	b7 01       	movw	r22, r14
    7f78:	5f c0       	rjmp	.+190    	; 0x8038 <__divsf3+0x14a>
    7f7a:	2b 85       	ldd	r18, Y+11	; 0x0b
    7f7c:	3c 85       	ldd	r19, Y+12	; 0x0c
    7f7e:	8b 89       	ldd	r24, Y+19	; 0x13
    7f80:	9c 89       	ldd	r25, Y+20	; 0x14
    7f82:	28 1b       	sub	r18, r24
    7f84:	39 0b       	sbc	r19, r25
    7f86:	3c 87       	std	Y+12, r19	; 0x0c
    7f88:	2b 87       	std	Y+11, r18	; 0x0b
    7f8a:	ed 84       	ldd	r14, Y+13	; 0x0d
    7f8c:	fe 84       	ldd	r15, Y+14	; 0x0e
    7f8e:	0f 85       	ldd	r16, Y+15	; 0x0f
    7f90:	18 89       	ldd	r17, Y+16	; 0x10
    7f92:	ad 88       	ldd	r10, Y+21	; 0x15
    7f94:	be 88       	ldd	r11, Y+22	; 0x16
    7f96:	cf 88       	ldd	r12, Y+23	; 0x17
    7f98:	d8 8c       	ldd	r13, Y+24	; 0x18
    7f9a:	ea 14       	cp	r14, r10
    7f9c:	fb 04       	cpc	r15, r11
    7f9e:	0c 05       	cpc	r16, r12
    7fa0:	1d 05       	cpc	r17, r13
    7fa2:	40 f4       	brcc	.+16     	; 0x7fb4 <__divsf3+0xc6>
    7fa4:	ee 0c       	add	r14, r14
    7fa6:	ff 1c       	adc	r15, r15
    7fa8:	00 1f       	adc	r16, r16
    7faa:	11 1f       	adc	r17, r17
    7fac:	21 50       	subi	r18, 0x01	; 1
    7fae:	30 40       	sbci	r19, 0x00	; 0
    7fb0:	3c 87       	std	Y+12, r19	; 0x0c
    7fb2:	2b 87       	std	Y+11, r18	; 0x0b
    7fb4:	20 e0       	ldi	r18, 0x00	; 0
    7fb6:	30 e0       	ldi	r19, 0x00	; 0
    7fb8:	40 e0       	ldi	r20, 0x00	; 0
    7fba:	50 e0       	ldi	r21, 0x00	; 0
    7fbc:	80 e0       	ldi	r24, 0x00	; 0
    7fbe:	90 e0       	ldi	r25, 0x00	; 0
    7fc0:	a0 e0       	ldi	r26, 0x00	; 0
    7fc2:	b0 e4       	ldi	r27, 0x40	; 64
    7fc4:	60 e0       	ldi	r22, 0x00	; 0
    7fc6:	70 e0       	ldi	r23, 0x00	; 0
    7fc8:	ea 14       	cp	r14, r10
    7fca:	fb 04       	cpc	r15, r11
    7fcc:	0c 05       	cpc	r16, r12
    7fce:	1d 05       	cpc	r17, r13
    7fd0:	40 f0       	brcs	.+16     	; 0x7fe2 <__divsf3+0xf4>
    7fd2:	28 2b       	or	r18, r24
    7fd4:	39 2b       	or	r19, r25
    7fd6:	4a 2b       	or	r20, r26
    7fd8:	5b 2b       	or	r21, r27
    7fda:	ea 18       	sub	r14, r10
    7fdc:	fb 08       	sbc	r15, r11
    7fde:	0c 09       	sbc	r16, r12
    7fe0:	1d 09       	sbc	r17, r13
    7fe2:	b6 95       	lsr	r27
    7fe4:	a7 95       	ror	r26
    7fe6:	97 95       	ror	r25
    7fe8:	87 95       	ror	r24
    7fea:	ee 0c       	add	r14, r14
    7fec:	ff 1c       	adc	r15, r15
    7fee:	00 1f       	adc	r16, r16
    7ff0:	11 1f       	adc	r17, r17
    7ff2:	6f 5f       	subi	r22, 0xFF	; 255
    7ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff6:	6f 31       	cpi	r22, 0x1F	; 31
    7ff8:	71 05       	cpc	r23, r1
    7ffa:	31 f7       	brne	.-52     	; 0x7fc8 <__divsf3+0xda>
    7ffc:	da 01       	movw	r26, r20
    7ffe:	c9 01       	movw	r24, r18
    8000:	8f 77       	andi	r24, 0x7F	; 127
    8002:	90 70       	andi	r25, 0x00	; 0
    8004:	a0 70       	andi	r26, 0x00	; 0
    8006:	b0 70       	andi	r27, 0x00	; 0
    8008:	80 34       	cpi	r24, 0x40	; 64
    800a:	91 05       	cpc	r25, r1
    800c:	a1 05       	cpc	r26, r1
    800e:	b1 05       	cpc	r27, r1
    8010:	61 f4       	brne	.+24     	; 0x802a <__divsf3+0x13c>
    8012:	27 fd       	sbrc	r18, 7
    8014:	0a c0       	rjmp	.+20     	; 0x802a <__divsf3+0x13c>
    8016:	e1 14       	cp	r14, r1
    8018:	f1 04       	cpc	r15, r1
    801a:	01 05       	cpc	r16, r1
    801c:	11 05       	cpc	r17, r1
    801e:	29 f0       	breq	.+10     	; 0x802a <__divsf3+0x13c>
    8020:	20 5c       	subi	r18, 0xC0	; 192
    8022:	3f 4f       	sbci	r19, 0xFF	; 255
    8024:	4f 4f       	sbci	r20, 0xFF	; 255
    8026:	5f 4f       	sbci	r21, 0xFF	; 255
    8028:	20 78       	andi	r18, 0x80	; 128
    802a:	2d 87       	std	Y+13, r18	; 0x0d
    802c:	3e 87       	std	Y+14, r19	; 0x0e
    802e:	4f 87       	std	Y+15, r20	; 0x0f
    8030:	58 8b       	std	Y+16, r21	; 0x10
    8032:	be 01       	movw	r22, r28
    8034:	67 5f       	subi	r22, 0xF7	; 247
    8036:	7f 4f       	sbci	r23, 0xFF	; 255
    8038:	cb 01       	movw	r24, r22
    803a:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    803e:	68 96       	adiw	r28, 0x18	; 24
    8040:	ea e0       	ldi	r30, 0x0A	; 10
    8042:	0c 94 d1 45 	jmp	0x8ba2	; 0x8ba2 <__epilogue_restores__+0x10>

00008046 <__gtsf2>:
    8046:	a8 e1       	ldi	r26, 0x18	; 24
    8048:	b0 e0       	ldi	r27, 0x00	; 0
    804a:	e9 e2       	ldi	r30, 0x29	; 41
    804c:	f0 e4       	ldi	r31, 0x40	; 64
    804e:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__prologue_saves__+0x18>
    8052:	69 83       	std	Y+1, r22	; 0x01
    8054:	7a 83       	std	Y+2, r23	; 0x02
    8056:	8b 83       	std	Y+3, r24	; 0x03
    8058:	9c 83       	std	Y+4, r25	; 0x04
    805a:	2d 83       	std	Y+5, r18	; 0x05
    805c:	3e 83       	std	Y+6, r19	; 0x06
    805e:	4f 83       	std	Y+7, r20	; 0x07
    8060:	58 87       	std	Y+8, r21	; 0x08
    8062:	89 e0       	ldi	r24, 0x09	; 9
    8064:	e8 2e       	mov	r14, r24
    8066:	f1 2c       	mov	r15, r1
    8068:	ec 0e       	add	r14, r28
    806a:	fd 1e       	adc	r15, r29
    806c:	ce 01       	movw	r24, r28
    806e:	01 96       	adiw	r24, 0x01	; 1
    8070:	b7 01       	movw	r22, r14
    8072:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    8076:	8e 01       	movw	r16, r28
    8078:	0f 5e       	subi	r16, 0xEF	; 239
    807a:	1f 4f       	sbci	r17, 0xFF	; 255
    807c:	ce 01       	movw	r24, r28
    807e:	05 96       	adiw	r24, 0x05	; 5
    8080:	b8 01       	movw	r22, r16
    8082:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    8086:	89 85       	ldd	r24, Y+9	; 0x09
    8088:	82 30       	cpi	r24, 0x02	; 2
    808a:	40 f0       	brcs	.+16     	; 0x809c <__gtsf2+0x56>
    808c:	89 89       	ldd	r24, Y+17	; 0x11
    808e:	82 30       	cpi	r24, 0x02	; 2
    8090:	28 f0       	brcs	.+10     	; 0x809c <__gtsf2+0x56>
    8092:	c7 01       	movw	r24, r14
    8094:	b8 01       	movw	r22, r16
    8096:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__fpcmp_parts_f>
    809a:	01 c0       	rjmp	.+2      	; 0x809e <__gtsf2+0x58>
    809c:	8f ef       	ldi	r24, 0xFF	; 255
    809e:	68 96       	adiw	r28, 0x18	; 24
    80a0:	e6 e0       	ldi	r30, 0x06	; 6
    80a2:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__epilogue_restores__+0x18>

000080a6 <__gesf2>:
    80a6:	a8 e1       	ldi	r26, 0x18	; 24
    80a8:	b0 e0       	ldi	r27, 0x00	; 0
    80aa:	e9 e5       	ldi	r30, 0x59	; 89
    80ac:	f0 e4       	ldi	r31, 0x40	; 64
    80ae:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__prologue_saves__+0x18>
    80b2:	69 83       	std	Y+1, r22	; 0x01
    80b4:	7a 83       	std	Y+2, r23	; 0x02
    80b6:	8b 83       	std	Y+3, r24	; 0x03
    80b8:	9c 83       	std	Y+4, r25	; 0x04
    80ba:	2d 83       	std	Y+5, r18	; 0x05
    80bc:	3e 83       	std	Y+6, r19	; 0x06
    80be:	4f 83       	std	Y+7, r20	; 0x07
    80c0:	58 87       	std	Y+8, r21	; 0x08
    80c2:	89 e0       	ldi	r24, 0x09	; 9
    80c4:	e8 2e       	mov	r14, r24
    80c6:	f1 2c       	mov	r15, r1
    80c8:	ec 0e       	add	r14, r28
    80ca:	fd 1e       	adc	r15, r29
    80cc:	ce 01       	movw	r24, r28
    80ce:	01 96       	adiw	r24, 0x01	; 1
    80d0:	b7 01       	movw	r22, r14
    80d2:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    80d6:	8e 01       	movw	r16, r28
    80d8:	0f 5e       	subi	r16, 0xEF	; 239
    80da:	1f 4f       	sbci	r17, 0xFF	; 255
    80dc:	ce 01       	movw	r24, r28
    80de:	05 96       	adiw	r24, 0x05	; 5
    80e0:	b8 01       	movw	r22, r16
    80e2:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    80e6:	89 85       	ldd	r24, Y+9	; 0x09
    80e8:	82 30       	cpi	r24, 0x02	; 2
    80ea:	40 f0       	brcs	.+16     	; 0x80fc <__gesf2+0x56>
    80ec:	89 89       	ldd	r24, Y+17	; 0x11
    80ee:	82 30       	cpi	r24, 0x02	; 2
    80f0:	28 f0       	brcs	.+10     	; 0x80fc <__gesf2+0x56>
    80f2:	c7 01       	movw	r24, r14
    80f4:	b8 01       	movw	r22, r16
    80f6:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__fpcmp_parts_f>
    80fa:	01 c0       	rjmp	.+2      	; 0x80fe <__gesf2+0x58>
    80fc:	8f ef       	ldi	r24, 0xFF	; 255
    80fe:	68 96       	adiw	r28, 0x18	; 24
    8100:	e6 e0       	ldi	r30, 0x06	; 6
    8102:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__epilogue_restores__+0x18>

00008106 <__ltsf2>:
    8106:	a8 e1       	ldi	r26, 0x18	; 24
    8108:	b0 e0       	ldi	r27, 0x00	; 0
    810a:	e9 e8       	ldi	r30, 0x89	; 137
    810c:	f0 e4       	ldi	r31, 0x40	; 64
    810e:	0c 94 b9 45 	jmp	0x8b72	; 0x8b72 <__prologue_saves__+0x18>
    8112:	69 83       	std	Y+1, r22	; 0x01
    8114:	7a 83       	std	Y+2, r23	; 0x02
    8116:	8b 83       	std	Y+3, r24	; 0x03
    8118:	9c 83       	std	Y+4, r25	; 0x04
    811a:	2d 83       	std	Y+5, r18	; 0x05
    811c:	3e 83       	std	Y+6, r19	; 0x06
    811e:	4f 83       	std	Y+7, r20	; 0x07
    8120:	58 87       	std	Y+8, r21	; 0x08
    8122:	89 e0       	ldi	r24, 0x09	; 9
    8124:	e8 2e       	mov	r14, r24
    8126:	f1 2c       	mov	r15, r1
    8128:	ec 0e       	add	r14, r28
    812a:	fd 1e       	adc	r15, r29
    812c:	ce 01       	movw	r24, r28
    812e:	01 96       	adiw	r24, 0x01	; 1
    8130:	b7 01       	movw	r22, r14
    8132:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    8136:	8e 01       	movw	r16, r28
    8138:	0f 5e       	subi	r16, 0xEF	; 239
    813a:	1f 4f       	sbci	r17, 0xFF	; 255
    813c:	ce 01       	movw	r24, r28
    813e:	05 96       	adiw	r24, 0x05	; 5
    8140:	b8 01       	movw	r22, r16
    8142:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    8146:	89 85       	ldd	r24, Y+9	; 0x09
    8148:	82 30       	cpi	r24, 0x02	; 2
    814a:	40 f0       	brcs	.+16     	; 0x815c <__ltsf2+0x56>
    814c:	89 89       	ldd	r24, Y+17	; 0x11
    814e:	82 30       	cpi	r24, 0x02	; 2
    8150:	28 f0       	brcs	.+10     	; 0x815c <__ltsf2+0x56>
    8152:	c7 01       	movw	r24, r14
    8154:	b8 01       	movw	r22, r16
    8156:	0e 94 7a 43 	call	0x86f4	; 0x86f4 <__fpcmp_parts_f>
    815a:	01 c0       	rjmp	.+2      	; 0x815e <__ltsf2+0x58>
    815c:	81 e0       	ldi	r24, 0x01	; 1
    815e:	68 96       	adiw	r28, 0x18	; 24
    8160:	e6 e0       	ldi	r30, 0x06	; 6
    8162:	0c 94 d5 45 	jmp	0x8baa	; 0x8baa <__epilogue_restores__+0x18>

00008166 <__floatsisf>:
    8166:	a8 e0       	ldi	r26, 0x08	; 8
    8168:	b0 e0       	ldi	r27, 0x00	; 0
    816a:	e9 eb       	ldi	r30, 0xB9	; 185
    816c:	f0 e4       	ldi	r31, 0x40	; 64
    816e:	0c 94 b6 45 	jmp	0x8b6c	; 0x8b6c <__prologue_saves__+0x12>
    8172:	9b 01       	movw	r18, r22
    8174:	ac 01       	movw	r20, r24
    8176:	83 e0       	ldi	r24, 0x03	; 3
    8178:	89 83       	std	Y+1, r24	; 0x01
    817a:	da 01       	movw	r26, r20
    817c:	c9 01       	movw	r24, r18
    817e:	88 27       	eor	r24, r24
    8180:	b7 fd       	sbrc	r27, 7
    8182:	83 95       	inc	r24
    8184:	99 27       	eor	r25, r25
    8186:	aa 27       	eor	r26, r26
    8188:	bb 27       	eor	r27, r27
    818a:	b8 2e       	mov	r11, r24
    818c:	21 15       	cp	r18, r1
    818e:	31 05       	cpc	r19, r1
    8190:	41 05       	cpc	r20, r1
    8192:	51 05       	cpc	r21, r1
    8194:	19 f4       	brne	.+6      	; 0x819c <__floatsisf+0x36>
    8196:	82 e0       	ldi	r24, 0x02	; 2
    8198:	89 83       	std	Y+1, r24	; 0x01
    819a:	3a c0       	rjmp	.+116    	; 0x8210 <__floatsisf+0xaa>
    819c:	88 23       	and	r24, r24
    819e:	a9 f0       	breq	.+42     	; 0x81ca <__floatsisf+0x64>
    81a0:	20 30       	cpi	r18, 0x00	; 0
    81a2:	80 e0       	ldi	r24, 0x00	; 0
    81a4:	38 07       	cpc	r19, r24
    81a6:	80 e0       	ldi	r24, 0x00	; 0
    81a8:	48 07       	cpc	r20, r24
    81aa:	80 e8       	ldi	r24, 0x80	; 128
    81ac:	58 07       	cpc	r21, r24
    81ae:	29 f4       	brne	.+10     	; 0x81ba <__floatsisf+0x54>
    81b0:	60 e0       	ldi	r22, 0x00	; 0
    81b2:	70 e0       	ldi	r23, 0x00	; 0
    81b4:	80 e0       	ldi	r24, 0x00	; 0
    81b6:	9f ec       	ldi	r25, 0xCF	; 207
    81b8:	30 c0       	rjmp	.+96     	; 0x821a <__floatsisf+0xb4>
    81ba:	ee 24       	eor	r14, r14
    81bc:	ff 24       	eor	r15, r15
    81be:	87 01       	movw	r16, r14
    81c0:	e2 1a       	sub	r14, r18
    81c2:	f3 0a       	sbc	r15, r19
    81c4:	04 0b       	sbc	r16, r20
    81c6:	15 0b       	sbc	r17, r21
    81c8:	02 c0       	rjmp	.+4      	; 0x81ce <__floatsisf+0x68>
    81ca:	79 01       	movw	r14, r18
    81cc:	8a 01       	movw	r16, r20
    81ce:	8e e1       	ldi	r24, 0x1E	; 30
    81d0:	c8 2e       	mov	r12, r24
    81d2:	d1 2c       	mov	r13, r1
    81d4:	dc 82       	std	Y+4, r13	; 0x04
    81d6:	cb 82       	std	Y+3, r12	; 0x03
    81d8:	ed 82       	std	Y+5, r14	; 0x05
    81da:	fe 82       	std	Y+6, r15	; 0x06
    81dc:	0f 83       	std	Y+7, r16	; 0x07
    81de:	18 87       	std	Y+8, r17	; 0x08
    81e0:	c8 01       	movw	r24, r16
    81e2:	b7 01       	movw	r22, r14
    81e4:	0e 94 de 41 	call	0x83bc	; 0x83bc <__clzsi2>
    81e8:	01 97       	sbiw	r24, 0x01	; 1
    81ea:	18 16       	cp	r1, r24
    81ec:	19 06       	cpc	r1, r25
    81ee:	84 f4       	brge	.+32     	; 0x8210 <__floatsisf+0xaa>
    81f0:	08 2e       	mov	r0, r24
    81f2:	04 c0       	rjmp	.+8      	; 0x81fc <__floatsisf+0x96>
    81f4:	ee 0c       	add	r14, r14
    81f6:	ff 1c       	adc	r15, r15
    81f8:	00 1f       	adc	r16, r16
    81fa:	11 1f       	adc	r17, r17
    81fc:	0a 94       	dec	r0
    81fe:	d2 f7       	brpl	.-12     	; 0x81f4 <__floatsisf+0x8e>
    8200:	ed 82       	std	Y+5, r14	; 0x05
    8202:	fe 82       	std	Y+6, r15	; 0x06
    8204:	0f 83       	std	Y+7, r16	; 0x07
    8206:	18 87       	std	Y+8, r17	; 0x08
    8208:	c8 1a       	sub	r12, r24
    820a:	d9 0a       	sbc	r13, r25
    820c:	dc 82       	std	Y+4, r13	; 0x04
    820e:	cb 82       	std	Y+3, r12	; 0x03
    8210:	ba 82       	std	Y+2, r11	; 0x02
    8212:	ce 01       	movw	r24, r28
    8214:	01 96       	adiw	r24, 0x01	; 1
    8216:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    821a:	28 96       	adiw	r28, 0x08	; 8
    821c:	e9 e0       	ldi	r30, 0x09	; 9
    821e:	0c 94 d2 45 	jmp	0x8ba4	; 0x8ba4 <__epilogue_restores__+0x12>

00008222 <__fixsfsi>:
    8222:	ac e0       	ldi	r26, 0x0C	; 12
    8224:	b0 e0       	ldi	r27, 0x00	; 0
    8226:	e7 e1       	ldi	r30, 0x17	; 23
    8228:	f1 e4       	ldi	r31, 0x41	; 65
    822a:	0c 94 bd 45 	jmp	0x8b7a	; 0x8b7a <__prologue_saves__+0x20>
    822e:	69 83       	std	Y+1, r22	; 0x01
    8230:	7a 83       	std	Y+2, r23	; 0x02
    8232:	8b 83       	std	Y+3, r24	; 0x03
    8234:	9c 83       	std	Y+4, r25	; 0x04
    8236:	ce 01       	movw	r24, r28
    8238:	01 96       	adiw	r24, 0x01	; 1
    823a:	be 01       	movw	r22, r28
    823c:	6b 5f       	subi	r22, 0xFB	; 251
    823e:	7f 4f       	sbci	r23, 0xFF	; 255
    8240:	0e 94 02 43 	call	0x8604	; 0x8604 <__unpack_f>
    8244:	8d 81       	ldd	r24, Y+5	; 0x05
    8246:	82 30       	cpi	r24, 0x02	; 2
    8248:	61 f1       	breq	.+88     	; 0x82a2 <__fixsfsi+0x80>
    824a:	82 30       	cpi	r24, 0x02	; 2
    824c:	50 f1       	brcs	.+84     	; 0x82a2 <__fixsfsi+0x80>
    824e:	84 30       	cpi	r24, 0x04	; 4
    8250:	21 f4       	brne	.+8      	; 0x825a <__fixsfsi+0x38>
    8252:	8e 81       	ldd	r24, Y+6	; 0x06
    8254:	88 23       	and	r24, r24
    8256:	51 f1       	breq	.+84     	; 0x82ac <__fixsfsi+0x8a>
    8258:	2e c0       	rjmp	.+92     	; 0x82b6 <__fixsfsi+0x94>
    825a:	2f 81       	ldd	r18, Y+7	; 0x07
    825c:	38 85       	ldd	r19, Y+8	; 0x08
    825e:	37 fd       	sbrc	r19, 7
    8260:	20 c0       	rjmp	.+64     	; 0x82a2 <__fixsfsi+0x80>
    8262:	6e 81       	ldd	r22, Y+6	; 0x06
    8264:	2f 31       	cpi	r18, 0x1F	; 31
    8266:	31 05       	cpc	r19, r1
    8268:	1c f0       	brlt	.+6      	; 0x8270 <__fixsfsi+0x4e>
    826a:	66 23       	and	r22, r22
    826c:	f9 f0       	breq	.+62     	; 0x82ac <__fixsfsi+0x8a>
    826e:	23 c0       	rjmp	.+70     	; 0x82b6 <__fixsfsi+0x94>
    8270:	8e e1       	ldi	r24, 0x1E	; 30
    8272:	90 e0       	ldi	r25, 0x00	; 0
    8274:	82 1b       	sub	r24, r18
    8276:	93 0b       	sbc	r25, r19
    8278:	29 85       	ldd	r18, Y+9	; 0x09
    827a:	3a 85       	ldd	r19, Y+10	; 0x0a
    827c:	4b 85       	ldd	r20, Y+11	; 0x0b
    827e:	5c 85       	ldd	r21, Y+12	; 0x0c
    8280:	04 c0       	rjmp	.+8      	; 0x828a <__fixsfsi+0x68>
    8282:	56 95       	lsr	r21
    8284:	47 95       	ror	r20
    8286:	37 95       	ror	r19
    8288:	27 95       	ror	r18
    828a:	8a 95       	dec	r24
    828c:	d2 f7       	brpl	.-12     	; 0x8282 <__fixsfsi+0x60>
    828e:	66 23       	and	r22, r22
    8290:	b1 f0       	breq	.+44     	; 0x82be <__fixsfsi+0x9c>
    8292:	50 95       	com	r21
    8294:	40 95       	com	r20
    8296:	30 95       	com	r19
    8298:	21 95       	neg	r18
    829a:	3f 4f       	sbci	r19, 0xFF	; 255
    829c:	4f 4f       	sbci	r20, 0xFF	; 255
    829e:	5f 4f       	sbci	r21, 0xFF	; 255
    82a0:	0e c0       	rjmp	.+28     	; 0x82be <__fixsfsi+0x9c>
    82a2:	20 e0       	ldi	r18, 0x00	; 0
    82a4:	30 e0       	ldi	r19, 0x00	; 0
    82a6:	40 e0       	ldi	r20, 0x00	; 0
    82a8:	50 e0       	ldi	r21, 0x00	; 0
    82aa:	09 c0       	rjmp	.+18     	; 0x82be <__fixsfsi+0x9c>
    82ac:	2f ef       	ldi	r18, 0xFF	; 255
    82ae:	3f ef       	ldi	r19, 0xFF	; 255
    82b0:	4f ef       	ldi	r20, 0xFF	; 255
    82b2:	5f e7       	ldi	r21, 0x7F	; 127
    82b4:	04 c0       	rjmp	.+8      	; 0x82be <__fixsfsi+0x9c>
    82b6:	20 e0       	ldi	r18, 0x00	; 0
    82b8:	30 e0       	ldi	r19, 0x00	; 0
    82ba:	40 e0       	ldi	r20, 0x00	; 0
    82bc:	50 e8       	ldi	r21, 0x80	; 128
    82be:	b9 01       	movw	r22, r18
    82c0:	ca 01       	movw	r24, r20
    82c2:	2c 96       	adiw	r28, 0x0c	; 12
    82c4:	e2 e0       	ldi	r30, 0x02	; 2
    82c6:	0c 94 d9 45 	jmp	0x8bb2	; 0x8bb2 <__epilogue_restores__+0x20>

000082ca <__floatunsisf>:
    82ca:	a8 e0       	ldi	r26, 0x08	; 8
    82cc:	b0 e0       	ldi	r27, 0x00	; 0
    82ce:	eb e6       	ldi	r30, 0x6B	; 107
    82d0:	f1 e4       	ldi	r31, 0x41	; 65
    82d2:	0c 94 b5 45 	jmp	0x8b6a	; 0x8b6a <__prologue_saves__+0x10>
    82d6:	7b 01       	movw	r14, r22
    82d8:	8c 01       	movw	r16, r24
    82da:	61 15       	cp	r22, r1
    82dc:	71 05       	cpc	r23, r1
    82de:	81 05       	cpc	r24, r1
    82e0:	91 05       	cpc	r25, r1
    82e2:	19 f4       	brne	.+6      	; 0x82ea <__floatunsisf+0x20>
    82e4:	82 e0       	ldi	r24, 0x02	; 2
    82e6:	89 83       	std	Y+1, r24	; 0x01
    82e8:	60 c0       	rjmp	.+192    	; 0x83aa <__floatunsisf+0xe0>
    82ea:	83 e0       	ldi	r24, 0x03	; 3
    82ec:	89 83       	std	Y+1, r24	; 0x01
    82ee:	8e e1       	ldi	r24, 0x1E	; 30
    82f0:	c8 2e       	mov	r12, r24
    82f2:	d1 2c       	mov	r13, r1
    82f4:	dc 82       	std	Y+4, r13	; 0x04
    82f6:	cb 82       	std	Y+3, r12	; 0x03
    82f8:	ed 82       	std	Y+5, r14	; 0x05
    82fa:	fe 82       	std	Y+6, r15	; 0x06
    82fc:	0f 83       	std	Y+7, r16	; 0x07
    82fe:	18 87       	std	Y+8, r17	; 0x08
    8300:	c8 01       	movw	r24, r16
    8302:	b7 01       	movw	r22, r14
    8304:	0e 94 de 41 	call	0x83bc	; 0x83bc <__clzsi2>
    8308:	fc 01       	movw	r30, r24
    830a:	31 97       	sbiw	r30, 0x01	; 1
    830c:	f7 ff       	sbrs	r31, 7
    830e:	3b c0       	rjmp	.+118    	; 0x8386 <__floatunsisf+0xbc>
    8310:	22 27       	eor	r18, r18
    8312:	33 27       	eor	r19, r19
    8314:	2e 1b       	sub	r18, r30
    8316:	3f 0b       	sbc	r19, r31
    8318:	57 01       	movw	r10, r14
    831a:	68 01       	movw	r12, r16
    831c:	02 2e       	mov	r0, r18
    831e:	04 c0       	rjmp	.+8      	; 0x8328 <__floatunsisf+0x5e>
    8320:	d6 94       	lsr	r13
    8322:	c7 94       	ror	r12
    8324:	b7 94       	ror	r11
    8326:	a7 94       	ror	r10
    8328:	0a 94       	dec	r0
    832a:	d2 f7       	brpl	.-12     	; 0x8320 <__floatunsisf+0x56>
    832c:	40 e0       	ldi	r20, 0x00	; 0
    832e:	50 e0       	ldi	r21, 0x00	; 0
    8330:	60 e0       	ldi	r22, 0x00	; 0
    8332:	70 e0       	ldi	r23, 0x00	; 0
    8334:	81 e0       	ldi	r24, 0x01	; 1
    8336:	90 e0       	ldi	r25, 0x00	; 0
    8338:	a0 e0       	ldi	r26, 0x00	; 0
    833a:	b0 e0       	ldi	r27, 0x00	; 0
    833c:	04 c0       	rjmp	.+8      	; 0x8346 <__floatunsisf+0x7c>
    833e:	88 0f       	add	r24, r24
    8340:	99 1f       	adc	r25, r25
    8342:	aa 1f       	adc	r26, r26
    8344:	bb 1f       	adc	r27, r27
    8346:	2a 95       	dec	r18
    8348:	d2 f7       	brpl	.-12     	; 0x833e <__floatunsisf+0x74>
    834a:	01 97       	sbiw	r24, 0x01	; 1
    834c:	a1 09       	sbc	r26, r1
    834e:	b1 09       	sbc	r27, r1
    8350:	8e 21       	and	r24, r14
    8352:	9f 21       	and	r25, r15
    8354:	a0 23       	and	r26, r16
    8356:	b1 23       	and	r27, r17
    8358:	00 97       	sbiw	r24, 0x00	; 0
    835a:	a1 05       	cpc	r26, r1
    835c:	b1 05       	cpc	r27, r1
    835e:	21 f0       	breq	.+8      	; 0x8368 <__floatunsisf+0x9e>
    8360:	41 e0       	ldi	r20, 0x01	; 1
    8362:	50 e0       	ldi	r21, 0x00	; 0
    8364:	60 e0       	ldi	r22, 0x00	; 0
    8366:	70 e0       	ldi	r23, 0x00	; 0
    8368:	4a 29       	or	r20, r10
    836a:	5b 29       	or	r21, r11
    836c:	6c 29       	or	r22, r12
    836e:	7d 29       	or	r23, r13
    8370:	4d 83       	std	Y+5, r20	; 0x05
    8372:	5e 83       	std	Y+6, r21	; 0x06
    8374:	6f 83       	std	Y+7, r22	; 0x07
    8376:	78 87       	std	Y+8, r23	; 0x08
    8378:	8e e1       	ldi	r24, 0x1E	; 30
    837a:	90 e0       	ldi	r25, 0x00	; 0
    837c:	8e 1b       	sub	r24, r30
    837e:	9f 0b       	sbc	r25, r31
    8380:	9c 83       	std	Y+4, r25	; 0x04
    8382:	8b 83       	std	Y+3, r24	; 0x03
    8384:	12 c0       	rjmp	.+36     	; 0x83aa <__floatunsisf+0xe0>
    8386:	30 97       	sbiw	r30, 0x00	; 0
    8388:	81 f0       	breq	.+32     	; 0x83aa <__floatunsisf+0xe0>
    838a:	0e 2e       	mov	r0, r30
    838c:	04 c0       	rjmp	.+8      	; 0x8396 <__floatunsisf+0xcc>
    838e:	ee 0c       	add	r14, r14
    8390:	ff 1c       	adc	r15, r15
    8392:	00 1f       	adc	r16, r16
    8394:	11 1f       	adc	r17, r17
    8396:	0a 94       	dec	r0
    8398:	d2 f7       	brpl	.-12     	; 0x838e <__floatunsisf+0xc4>
    839a:	ed 82       	std	Y+5, r14	; 0x05
    839c:	fe 82       	std	Y+6, r15	; 0x06
    839e:	0f 83       	std	Y+7, r16	; 0x07
    83a0:	18 87       	std	Y+8, r17	; 0x08
    83a2:	ce 1a       	sub	r12, r30
    83a4:	df 0a       	sbc	r13, r31
    83a6:	dc 82       	std	Y+4, r13	; 0x04
    83a8:	cb 82       	std	Y+3, r12	; 0x03
    83aa:	1a 82       	std	Y+2, r1	; 0x02
    83ac:	ce 01       	movw	r24, r28
    83ae:	01 96       	adiw	r24, 0x01	; 1
    83b0:	0e 94 2d 42 	call	0x845a	; 0x845a <__pack_f>
    83b4:	28 96       	adiw	r28, 0x08	; 8
    83b6:	ea e0       	ldi	r30, 0x0A	; 10
    83b8:	0c 94 d1 45 	jmp	0x8ba2	; 0x8ba2 <__epilogue_restores__+0x10>

000083bc <__clzsi2>:
    83bc:	ef 92       	push	r14
    83be:	ff 92       	push	r15
    83c0:	0f 93       	push	r16
    83c2:	1f 93       	push	r17
    83c4:	7b 01       	movw	r14, r22
    83c6:	8c 01       	movw	r16, r24
    83c8:	80 e0       	ldi	r24, 0x00	; 0
    83ca:	e8 16       	cp	r14, r24
    83cc:	80 e0       	ldi	r24, 0x00	; 0
    83ce:	f8 06       	cpc	r15, r24
    83d0:	81 e0       	ldi	r24, 0x01	; 1
    83d2:	08 07       	cpc	r16, r24
    83d4:	80 e0       	ldi	r24, 0x00	; 0
    83d6:	18 07       	cpc	r17, r24
    83d8:	88 f4       	brcc	.+34     	; 0x83fc <__clzsi2+0x40>
    83da:	8f ef       	ldi	r24, 0xFF	; 255
    83dc:	e8 16       	cp	r14, r24
    83de:	f1 04       	cpc	r15, r1
    83e0:	01 05       	cpc	r16, r1
    83e2:	11 05       	cpc	r17, r1
    83e4:	31 f0       	breq	.+12     	; 0x83f2 <__clzsi2+0x36>
    83e6:	28 f0       	brcs	.+10     	; 0x83f2 <__clzsi2+0x36>
    83e8:	88 e0       	ldi	r24, 0x08	; 8
    83ea:	90 e0       	ldi	r25, 0x00	; 0
    83ec:	a0 e0       	ldi	r26, 0x00	; 0
    83ee:	b0 e0       	ldi	r27, 0x00	; 0
    83f0:	17 c0       	rjmp	.+46     	; 0x8420 <__clzsi2+0x64>
    83f2:	80 e0       	ldi	r24, 0x00	; 0
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	a0 e0       	ldi	r26, 0x00	; 0
    83f8:	b0 e0       	ldi	r27, 0x00	; 0
    83fa:	12 c0       	rjmp	.+36     	; 0x8420 <__clzsi2+0x64>
    83fc:	80 e0       	ldi	r24, 0x00	; 0
    83fe:	e8 16       	cp	r14, r24
    8400:	80 e0       	ldi	r24, 0x00	; 0
    8402:	f8 06       	cpc	r15, r24
    8404:	80 e0       	ldi	r24, 0x00	; 0
    8406:	08 07       	cpc	r16, r24
    8408:	81 e0       	ldi	r24, 0x01	; 1
    840a:	18 07       	cpc	r17, r24
    840c:	28 f0       	brcs	.+10     	; 0x8418 <__clzsi2+0x5c>
    840e:	88 e1       	ldi	r24, 0x18	; 24
    8410:	90 e0       	ldi	r25, 0x00	; 0
    8412:	a0 e0       	ldi	r26, 0x00	; 0
    8414:	b0 e0       	ldi	r27, 0x00	; 0
    8416:	04 c0       	rjmp	.+8      	; 0x8420 <__clzsi2+0x64>
    8418:	80 e1       	ldi	r24, 0x10	; 16
    841a:	90 e0       	ldi	r25, 0x00	; 0
    841c:	a0 e0       	ldi	r26, 0x00	; 0
    841e:	b0 e0       	ldi	r27, 0x00	; 0
    8420:	20 e2       	ldi	r18, 0x20	; 32
    8422:	30 e0       	ldi	r19, 0x00	; 0
    8424:	40 e0       	ldi	r20, 0x00	; 0
    8426:	50 e0       	ldi	r21, 0x00	; 0
    8428:	28 1b       	sub	r18, r24
    842a:	39 0b       	sbc	r19, r25
    842c:	4a 0b       	sbc	r20, r26
    842e:	5b 0b       	sbc	r21, r27
    8430:	04 c0       	rjmp	.+8      	; 0x843a <__clzsi2+0x7e>
    8432:	16 95       	lsr	r17
    8434:	07 95       	ror	r16
    8436:	f7 94       	ror	r15
    8438:	e7 94       	ror	r14
    843a:	8a 95       	dec	r24
    843c:	d2 f7       	brpl	.-12     	; 0x8432 <__clzsi2+0x76>
    843e:	f7 01       	movw	r30, r14
    8440:	e6 5b       	subi	r30, 0xB6	; 182
    8442:	fd 4f       	sbci	r31, 0xFD	; 253
    8444:	80 81       	ld	r24, Z
    8446:	28 1b       	sub	r18, r24
    8448:	31 09       	sbc	r19, r1
    844a:	41 09       	sbc	r20, r1
    844c:	51 09       	sbc	r21, r1
    844e:	c9 01       	movw	r24, r18
    8450:	1f 91       	pop	r17
    8452:	0f 91       	pop	r16
    8454:	ff 90       	pop	r15
    8456:	ef 90       	pop	r14
    8458:	08 95       	ret

0000845a <__pack_f>:
    845a:	df 92       	push	r13
    845c:	ef 92       	push	r14
    845e:	ff 92       	push	r15
    8460:	0f 93       	push	r16
    8462:	1f 93       	push	r17
    8464:	fc 01       	movw	r30, r24
    8466:	e4 80       	ldd	r14, Z+4	; 0x04
    8468:	f5 80       	ldd	r15, Z+5	; 0x05
    846a:	06 81       	ldd	r16, Z+6	; 0x06
    846c:	17 81       	ldd	r17, Z+7	; 0x07
    846e:	d1 80       	ldd	r13, Z+1	; 0x01
    8470:	80 81       	ld	r24, Z
    8472:	82 30       	cpi	r24, 0x02	; 2
    8474:	48 f4       	brcc	.+18     	; 0x8488 <__pack_f+0x2e>
    8476:	80 e0       	ldi	r24, 0x00	; 0
    8478:	90 e0       	ldi	r25, 0x00	; 0
    847a:	a0 e1       	ldi	r26, 0x10	; 16
    847c:	b0 e0       	ldi	r27, 0x00	; 0
    847e:	e8 2a       	or	r14, r24
    8480:	f9 2a       	or	r15, r25
    8482:	0a 2b       	or	r16, r26
    8484:	1b 2b       	or	r17, r27
    8486:	a5 c0       	rjmp	.+330    	; 0x85d2 <__pack_f+0x178>
    8488:	84 30       	cpi	r24, 0x04	; 4
    848a:	09 f4       	brne	.+2      	; 0x848e <__pack_f+0x34>
    848c:	9f c0       	rjmp	.+318    	; 0x85cc <__pack_f+0x172>
    848e:	82 30       	cpi	r24, 0x02	; 2
    8490:	21 f4       	brne	.+8      	; 0x849a <__pack_f+0x40>
    8492:	ee 24       	eor	r14, r14
    8494:	ff 24       	eor	r15, r15
    8496:	87 01       	movw	r16, r14
    8498:	05 c0       	rjmp	.+10     	; 0x84a4 <__pack_f+0x4a>
    849a:	e1 14       	cp	r14, r1
    849c:	f1 04       	cpc	r15, r1
    849e:	01 05       	cpc	r16, r1
    84a0:	11 05       	cpc	r17, r1
    84a2:	19 f4       	brne	.+6      	; 0x84aa <__pack_f+0x50>
    84a4:	e0 e0       	ldi	r30, 0x00	; 0
    84a6:	f0 e0       	ldi	r31, 0x00	; 0
    84a8:	96 c0       	rjmp	.+300    	; 0x85d6 <__pack_f+0x17c>
    84aa:	62 81       	ldd	r22, Z+2	; 0x02
    84ac:	73 81       	ldd	r23, Z+3	; 0x03
    84ae:	9f ef       	ldi	r25, 0xFF	; 255
    84b0:	62 38       	cpi	r22, 0x82	; 130
    84b2:	79 07       	cpc	r23, r25
    84b4:	0c f0       	brlt	.+2      	; 0x84b8 <__pack_f+0x5e>
    84b6:	5b c0       	rjmp	.+182    	; 0x856e <__pack_f+0x114>
    84b8:	22 e8       	ldi	r18, 0x82	; 130
    84ba:	3f ef       	ldi	r19, 0xFF	; 255
    84bc:	26 1b       	sub	r18, r22
    84be:	37 0b       	sbc	r19, r23
    84c0:	2a 31       	cpi	r18, 0x1A	; 26
    84c2:	31 05       	cpc	r19, r1
    84c4:	2c f0       	brlt	.+10     	; 0x84d0 <__pack_f+0x76>
    84c6:	20 e0       	ldi	r18, 0x00	; 0
    84c8:	30 e0       	ldi	r19, 0x00	; 0
    84ca:	40 e0       	ldi	r20, 0x00	; 0
    84cc:	50 e0       	ldi	r21, 0x00	; 0
    84ce:	2a c0       	rjmp	.+84     	; 0x8524 <__pack_f+0xca>
    84d0:	b8 01       	movw	r22, r16
    84d2:	a7 01       	movw	r20, r14
    84d4:	02 2e       	mov	r0, r18
    84d6:	04 c0       	rjmp	.+8      	; 0x84e0 <__pack_f+0x86>
    84d8:	76 95       	lsr	r23
    84da:	67 95       	ror	r22
    84dc:	57 95       	ror	r21
    84de:	47 95       	ror	r20
    84e0:	0a 94       	dec	r0
    84e2:	d2 f7       	brpl	.-12     	; 0x84d8 <__pack_f+0x7e>
    84e4:	81 e0       	ldi	r24, 0x01	; 1
    84e6:	90 e0       	ldi	r25, 0x00	; 0
    84e8:	a0 e0       	ldi	r26, 0x00	; 0
    84ea:	b0 e0       	ldi	r27, 0x00	; 0
    84ec:	04 c0       	rjmp	.+8      	; 0x84f6 <__pack_f+0x9c>
    84ee:	88 0f       	add	r24, r24
    84f0:	99 1f       	adc	r25, r25
    84f2:	aa 1f       	adc	r26, r26
    84f4:	bb 1f       	adc	r27, r27
    84f6:	2a 95       	dec	r18
    84f8:	d2 f7       	brpl	.-12     	; 0x84ee <__pack_f+0x94>
    84fa:	01 97       	sbiw	r24, 0x01	; 1
    84fc:	a1 09       	sbc	r26, r1
    84fe:	b1 09       	sbc	r27, r1
    8500:	8e 21       	and	r24, r14
    8502:	9f 21       	and	r25, r15
    8504:	a0 23       	and	r26, r16
    8506:	b1 23       	and	r27, r17
    8508:	00 97       	sbiw	r24, 0x00	; 0
    850a:	a1 05       	cpc	r26, r1
    850c:	b1 05       	cpc	r27, r1
    850e:	21 f0       	breq	.+8      	; 0x8518 <__pack_f+0xbe>
    8510:	81 e0       	ldi	r24, 0x01	; 1
    8512:	90 e0       	ldi	r25, 0x00	; 0
    8514:	a0 e0       	ldi	r26, 0x00	; 0
    8516:	b0 e0       	ldi	r27, 0x00	; 0
    8518:	9a 01       	movw	r18, r20
    851a:	ab 01       	movw	r20, r22
    851c:	28 2b       	or	r18, r24
    851e:	39 2b       	or	r19, r25
    8520:	4a 2b       	or	r20, r26
    8522:	5b 2b       	or	r21, r27
    8524:	da 01       	movw	r26, r20
    8526:	c9 01       	movw	r24, r18
    8528:	8f 77       	andi	r24, 0x7F	; 127
    852a:	90 70       	andi	r25, 0x00	; 0
    852c:	a0 70       	andi	r26, 0x00	; 0
    852e:	b0 70       	andi	r27, 0x00	; 0
    8530:	80 34       	cpi	r24, 0x40	; 64
    8532:	91 05       	cpc	r25, r1
    8534:	a1 05       	cpc	r26, r1
    8536:	b1 05       	cpc	r27, r1
    8538:	39 f4       	brne	.+14     	; 0x8548 <__pack_f+0xee>
    853a:	27 ff       	sbrs	r18, 7
    853c:	09 c0       	rjmp	.+18     	; 0x8550 <__pack_f+0xf6>
    853e:	20 5c       	subi	r18, 0xC0	; 192
    8540:	3f 4f       	sbci	r19, 0xFF	; 255
    8542:	4f 4f       	sbci	r20, 0xFF	; 255
    8544:	5f 4f       	sbci	r21, 0xFF	; 255
    8546:	04 c0       	rjmp	.+8      	; 0x8550 <__pack_f+0xf6>
    8548:	21 5c       	subi	r18, 0xC1	; 193
    854a:	3f 4f       	sbci	r19, 0xFF	; 255
    854c:	4f 4f       	sbci	r20, 0xFF	; 255
    854e:	5f 4f       	sbci	r21, 0xFF	; 255
    8550:	e0 e0       	ldi	r30, 0x00	; 0
    8552:	f0 e0       	ldi	r31, 0x00	; 0
    8554:	20 30       	cpi	r18, 0x00	; 0
    8556:	a0 e0       	ldi	r26, 0x00	; 0
    8558:	3a 07       	cpc	r19, r26
    855a:	a0 e0       	ldi	r26, 0x00	; 0
    855c:	4a 07       	cpc	r20, r26
    855e:	a0 e4       	ldi	r26, 0x40	; 64
    8560:	5a 07       	cpc	r21, r26
    8562:	10 f0       	brcs	.+4      	; 0x8568 <__pack_f+0x10e>
    8564:	e1 e0       	ldi	r30, 0x01	; 1
    8566:	f0 e0       	ldi	r31, 0x00	; 0
    8568:	79 01       	movw	r14, r18
    856a:	8a 01       	movw	r16, r20
    856c:	27 c0       	rjmp	.+78     	; 0x85bc <__pack_f+0x162>
    856e:	60 38       	cpi	r22, 0x80	; 128
    8570:	71 05       	cpc	r23, r1
    8572:	64 f5       	brge	.+88     	; 0x85cc <__pack_f+0x172>
    8574:	fb 01       	movw	r30, r22
    8576:	e1 58       	subi	r30, 0x81	; 129
    8578:	ff 4f       	sbci	r31, 0xFF	; 255
    857a:	d8 01       	movw	r26, r16
    857c:	c7 01       	movw	r24, r14
    857e:	8f 77       	andi	r24, 0x7F	; 127
    8580:	90 70       	andi	r25, 0x00	; 0
    8582:	a0 70       	andi	r26, 0x00	; 0
    8584:	b0 70       	andi	r27, 0x00	; 0
    8586:	80 34       	cpi	r24, 0x40	; 64
    8588:	91 05       	cpc	r25, r1
    858a:	a1 05       	cpc	r26, r1
    858c:	b1 05       	cpc	r27, r1
    858e:	39 f4       	brne	.+14     	; 0x859e <__pack_f+0x144>
    8590:	e7 fe       	sbrs	r14, 7
    8592:	0d c0       	rjmp	.+26     	; 0x85ae <__pack_f+0x154>
    8594:	80 e4       	ldi	r24, 0x40	; 64
    8596:	90 e0       	ldi	r25, 0x00	; 0
    8598:	a0 e0       	ldi	r26, 0x00	; 0
    859a:	b0 e0       	ldi	r27, 0x00	; 0
    859c:	04 c0       	rjmp	.+8      	; 0x85a6 <__pack_f+0x14c>
    859e:	8f e3       	ldi	r24, 0x3F	; 63
    85a0:	90 e0       	ldi	r25, 0x00	; 0
    85a2:	a0 e0       	ldi	r26, 0x00	; 0
    85a4:	b0 e0       	ldi	r27, 0x00	; 0
    85a6:	e8 0e       	add	r14, r24
    85a8:	f9 1e       	adc	r15, r25
    85aa:	0a 1f       	adc	r16, r26
    85ac:	1b 1f       	adc	r17, r27
    85ae:	17 ff       	sbrs	r17, 7
    85b0:	05 c0       	rjmp	.+10     	; 0x85bc <__pack_f+0x162>
    85b2:	16 95       	lsr	r17
    85b4:	07 95       	ror	r16
    85b6:	f7 94       	ror	r15
    85b8:	e7 94       	ror	r14
    85ba:	31 96       	adiw	r30, 0x01	; 1
    85bc:	87 e0       	ldi	r24, 0x07	; 7
    85be:	16 95       	lsr	r17
    85c0:	07 95       	ror	r16
    85c2:	f7 94       	ror	r15
    85c4:	e7 94       	ror	r14
    85c6:	8a 95       	dec	r24
    85c8:	d1 f7       	brne	.-12     	; 0x85be <__pack_f+0x164>
    85ca:	05 c0       	rjmp	.+10     	; 0x85d6 <__pack_f+0x17c>
    85cc:	ee 24       	eor	r14, r14
    85ce:	ff 24       	eor	r15, r15
    85d0:	87 01       	movw	r16, r14
    85d2:	ef ef       	ldi	r30, 0xFF	; 255
    85d4:	f0 e0       	ldi	r31, 0x00	; 0
    85d6:	6e 2f       	mov	r22, r30
    85d8:	67 95       	ror	r22
    85da:	66 27       	eor	r22, r22
    85dc:	67 95       	ror	r22
    85de:	90 2f       	mov	r25, r16
    85e0:	9f 77       	andi	r25, 0x7F	; 127
    85e2:	d7 94       	ror	r13
    85e4:	dd 24       	eor	r13, r13
    85e6:	d7 94       	ror	r13
    85e8:	8e 2f       	mov	r24, r30
    85ea:	86 95       	lsr	r24
    85ec:	49 2f       	mov	r20, r25
    85ee:	46 2b       	or	r20, r22
    85f0:	58 2f       	mov	r21, r24
    85f2:	5d 29       	or	r21, r13
    85f4:	b7 01       	movw	r22, r14
    85f6:	ca 01       	movw	r24, r20
    85f8:	1f 91       	pop	r17
    85fa:	0f 91       	pop	r16
    85fc:	ff 90       	pop	r15
    85fe:	ef 90       	pop	r14
    8600:	df 90       	pop	r13
    8602:	08 95       	ret

00008604 <__unpack_f>:
    8604:	fc 01       	movw	r30, r24
    8606:	db 01       	movw	r26, r22
    8608:	40 81       	ld	r20, Z
    860a:	51 81       	ldd	r21, Z+1	; 0x01
    860c:	22 81       	ldd	r18, Z+2	; 0x02
    860e:	62 2f       	mov	r22, r18
    8610:	6f 77       	andi	r22, 0x7F	; 127
    8612:	70 e0       	ldi	r23, 0x00	; 0
    8614:	22 1f       	adc	r18, r18
    8616:	22 27       	eor	r18, r18
    8618:	22 1f       	adc	r18, r18
    861a:	93 81       	ldd	r25, Z+3	; 0x03
    861c:	89 2f       	mov	r24, r25
    861e:	88 0f       	add	r24, r24
    8620:	82 2b       	or	r24, r18
    8622:	28 2f       	mov	r18, r24
    8624:	30 e0       	ldi	r19, 0x00	; 0
    8626:	99 1f       	adc	r25, r25
    8628:	99 27       	eor	r25, r25
    862a:	99 1f       	adc	r25, r25
    862c:	11 96       	adiw	r26, 0x01	; 1
    862e:	9c 93       	st	X, r25
    8630:	11 97       	sbiw	r26, 0x01	; 1
    8632:	21 15       	cp	r18, r1
    8634:	31 05       	cpc	r19, r1
    8636:	a9 f5       	brne	.+106    	; 0x86a2 <__unpack_f+0x9e>
    8638:	41 15       	cp	r20, r1
    863a:	51 05       	cpc	r21, r1
    863c:	61 05       	cpc	r22, r1
    863e:	71 05       	cpc	r23, r1
    8640:	11 f4       	brne	.+4      	; 0x8646 <__unpack_f+0x42>
    8642:	82 e0       	ldi	r24, 0x02	; 2
    8644:	37 c0       	rjmp	.+110    	; 0x86b4 <__unpack_f+0xb0>
    8646:	82 e8       	ldi	r24, 0x82	; 130
    8648:	9f ef       	ldi	r25, 0xFF	; 255
    864a:	13 96       	adiw	r26, 0x03	; 3
    864c:	9c 93       	st	X, r25
    864e:	8e 93       	st	-X, r24
    8650:	12 97       	sbiw	r26, 0x02	; 2
    8652:	9a 01       	movw	r18, r20
    8654:	ab 01       	movw	r20, r22
    8656:	67 e0       	ldi	r22, 0x07	; 7
    8658:	22 0f       	add	r18, r18
    865a:	33 1f       	adc	r19, r19
    865c:	44 1f       	adc	r20, r20
    865e:	55 1f       	adc	r21, r21
    8660:	6a 95       	dec	r22
    8662:	d1 f7       	brne	.-12     	; 0x8658 <__unpack_f+0x54>
    8664:	83 e0       	ldi	r24, 0x03	; 3
    8666:	8c 93       	st	X, r24
    8668:	0d c0       	rjmp	.+26     	; 0x8684 <__unpack_f+0x80>
    866a:	22 0f       	add	r18, r18
    866c:	33 1f       	adc	r19, r19
    866e:	44 1f       	adc	r20, r20
    8670:	55 1f       	adc	r21, r21
    8672:	12 96       	adiw	r26, 0x02	; 2
    8674:	8d 91       	ld	r24, X+
    8676:	9c 91       	ld	r25, X
    8678:	13 97       	sbiw	r26, 0x03	; 3
    867a:	01 97       	sbiw	r24, 0x01	; 1
    867c:	13 96       	adiw	r26, 0x03	; 3
    867e:	9c 93       	st	X, r25
    8680:	8e 93       	st	-X, r24
    8682:	12 97       	sbiw	r26, 0x02	; 2
    8684:	20 30       	cpi	r18, 0x00	; 0
    8686:	80 e0       	ldi	r24, 0x00	; 0
    8688:	38 07       	cpc	r19, r24
    868a:	80 e0       	ldi	r24, 0x00	; 0
    868c:	48 07       	cpc	r20, r24
    868e:	80 e4       	ldi	r24, 0x40	; 64
    8690:	58 07       	cpc	r21, r24
    8692:	58 f3       	brcs	.-42     	; 0x866a <__unpack_f+0x66>
    8694:	14 96       	adiw	r26, 0x04	; 4
    8696:	2d 93       	st	X+, r18
    8698:	3d 93       	st	X+, r19
    869a:	4d 93       	st	X+, r20
    869c:	5c 93       	st	X, r21
    869e:	17 97       	sbiw	r26, 0x07	; 7
    86a0:	08 95       	ret
    86a2:	2f 3f       	cpi	r18, 0xFF	; 255
    86a4:	31 05       	cpc	r19, r1
    86a6:	79 f4       	brne	.+30     	; 0x86c6 <__unpack_f+0xc2>
    86a8:	41 15       	cp	r20, r1
    86aa:	51 05       	cpc	r21, r1
    86ac:	61 05       	cpc	r22, r1
    86ae:	71 05       	cpc	r23, r1
    86b0:	19 f4       	brne	.+6      	; 0x86b8 <__unpack_f+0xb4>
    86b2:	84 e0       	ldi	r24, 0x04	; 4
    86b4:	8c 93       	st	X, r24
    86b6:	08 95       	ret
    86b8:	64 ff       	sbrs	r22, 4
    86ba:	03 c0       	rjmp	.+6      	; 0x86c2 <__unpack_f+0xbe>
    86bc:	81 e0       	ldi	r24, 0x01	; 1
    86be:	8c 93       	st	X, r24
    86c0:	12 c0       	rjmp	.+36     	; 0x86e6 <__unpack_f+0xe2>
    86c2:	1c 92       	st	X, r1
    86c4:	10 c0       	rjmp	.+32     	; 0x86e6 <__unpack_f+0xe2>
    86c6:	2f 57       	subi	r18, 0x7F	; 127
    86c8:	30 40       	sbci	r19, 0x00	; 0
    86ca:	13 96       	adiw	r26, 0x03	; 3
    86cc:	3c 93       	st	X, r19
    86ce:	2e 93       	st	-X, r18
    86d0:	12 97       	sbiw	r26, 0x02	; 2
    86d2:	83 e0       	ldi	r24, 0x03	; 3
    86d4:	8c 93       	st	X, r24
    86d6:	87 e0       	ldi	r24, 0x07	; 7
    86d8:	44 0f       	add	r20, r20
    86da:	55 1f       	adc	r21, r21
    86dc:	66 1f       	adc	r22, r22
    86de:	77 1f       	adc	r23, r23
    86e0:	8a 95       	dec	r24
    86e2:	d1 f7       	brne	.-12     	; 0x86d8 <__unpack_f+0xd4>
    86e4:	70 64       	ori	r23, 0x40	; 64
    86e6:	14 96       	adiw	r26, 0x04	; 4
    86e8:	4d 93       	st	X+, r20
    86ea:	5d 93       	st	X+, r21
    86ec:	6d 93       	st	X+, r22
    86ee:	7c 93       	st	X, r23
    86f0:	17 97       	sbiw	r26, 0x07	; 7
    86f2:	08 95       	ret

000086f4 <__fpcmp_parts_f>:
    86f4:	1f 93       	push	r17
    86f6:	dc 01       	movw	r26, r24
    86f8:	fb 01       	movw	r30, r22
    86fa:	9c 91       	ld	r25, X
    86fc:	92 30       	cpi	r25, 0x02	; 2
    86fe:	08 f4       	brcc	.+2      	; 0x8702 <__fpcmp_parts_f+0xe>
    8700:	47 c0       	rjmp	.+142    	; 0x8790 <__fpcmp_parts_f+0x9c>
    8702:	80 81       	ld	r24, Z
    8704:	82 30       	cpi	r24, 0x02	; 2
    8706:	08 f4       	brcc	.+2      	; 0x870a <__fpcmp_parts_f+0x16>
    8708:	43 c0       	rjmp	.+134    	; 0x8790 <__fpcmp_parts_f+0x9c>
    870a:	94 30       	cpi	r25, 0x04	; 4
    870c:	51 f4       	brne	.+20     	; 0x8722 <__fpcmp_parts_f+0x2e>
    870e:	11 96       	adiw	r26, 0x01	; 1
    8710:	1c 91       	ld	r17, X
    8712:	84 30       	cpi	r24, 0x04	; 4
    8714:	99 f5       	brne	.+102    	; 0x877c <__fpcmp_parts_f+0x88>
    8716:	81 81       	ldd	r24, Z+1	; 0x01
    8718:	68 2f       	mov	r22, r24
    871a:	70 e0       	ldi	r23, 0x00	; 0
    871c:	61 1b       	sub	r22, r17
    871e:	71 09       	sbc	r23, r1
    8720:	3f c0       	rjmp	.+126    	; 0x87a0 <__fpcmp_parts_f+0xac>
    8722:	84 30       	cpi	r24, 0x04	; 4
    8724:	21 f0       	breq	.+8      	; 0x872e <__fpcmp_parts_f+0x3a>
    8726:	92 30       	cpi	r25, 0x02	; 2
    8728:	31 f4       	brne	.+12     	; 0x8736 <__fpcmp_parts_f+0x42>
    872a:	82 30       	cpi	r24, 0x02	; 2
    872c:	b9 f1       	breq	.+110    	; 0x879c <__fpcmp_parts_f+0xa8>
    872e:	81 81       	ldd	r24, Z+1	; 0x01
    8730:	88 23       	and	r24, r24
    8732:	89 f1       	breq	.+98     	; 0x8796 <__fpcmp_parts_f+0xa2>
    8734:	2d c0       	rjmp	.+90     	; 0x8790 <__fpcmp_parts_f+0x9c>
    8736:	11 96       	adiw	r26, 0x01	; 1
    8738:	1c 91       	ld	r17, X
    873a:	11 97       	sbiw	r26, 0x01	; 1
    873c:	82 30       	cpi	r24, 0x02	; 2
    873e:	f1 f0       	breq	.+60     	; 0x877c <__fpcmp_parts_f+0x88>
    8740:	81 81       	ldd	r24, Z+1	; 0x01
    8742:	18 17       	cp	r17, r24
    8744:	d9 f4       	brne	.+54     	; 0x877c <__fpcmp_parts_f+0x88>
    8746:	12 96       	adiw	r26, 0x02	; 2
    8748:	2d 91       	ld	r18, X+
    874a:	3c 91       	ld	r19, X
    874c:	13 97       	sbiw	r26, 0x03	; 3
    874e:	82 81       	ldd	r24, Z+2	; 0x02
    8750:	93 81       	ldd	r25, Z+3	; 0x03
    8752:	82 17       	cp	r24, r18
    8754:	93 07       	cpc	r25, r19
    8756:	94 f0       	brlt	.+36     	; 0x877c <__fpcmp_parts_f+0x88>
    8758:	28 17       	cp	r18, r24
    875a:	39 07       	cpc	r19, r25
    875c:	bc f0       	brlt	.+46     	; 0x878c <__fpcmp_parts_f+0x98>
    875e:	14 96       	adiw	r26, 0x04	; 4
    8760:	8d 91       	ld	r24, X+
    8762:	9d 91       	ld	r25, X+
    8764:	0d 90       	ld	r0, X+
    8766:	bc 91       	ld	r27, X
    8768:	a0 2d       	mov	r26, r0
    876a:	24 81       	ldd	r18, Z+4	; 0x04
    876c:	35 81       	ldd	r19, Z+5	; 0x05
    876e:	46 81       	ldd	r20, Z+6	; 0x06
    8770:	57 81       	ldd	r21, Z+7	; 0x07
    8772:	28 17       	cp	r18, r24
    8774:	39 07       	cpc	r19, r25
    8776:	4a 07       	cpc	r20, r26
    8778:	5b 07       	cpc	r21, r27
    877a:	18 f4       	brcc	.+6      	; 0x8782 <__fpcmp_parts_f+0x8e>
    877c:	11 23       	and	r17, r17
    877e:	41 f0       	breq	.+16     	; 0x8790 <__fpcmp_parts_f+0x9c>
    8780:	0a c0       	rjmp	.+20     	; 0x8796 <__fpcmp_parts_f+0xa2>
    8782:	82 17       	cp	r24, r18
    8784:	93 07       	cpc	r25, r19
    8786:	a4 07       	cpc	r26, r20
    8788:	b5 07       	cpc	r27, r21
    878a:	40 f4       	brcc	.+16     	; 0x879c <__fpcmp_parts_f+0xa8>
    878c:	11 23       	and	r17, r17
    878e:	19 f0       	breq	.+6      	; 0x8796 <__fpcmp_parts_f+0xa2>
    8790:	61 e0       	ldi	r22, 0x01	; 1
    8792:	70 e0       	ldi	r23, 0x00	; 0
    8794:	05 c0       	rjmp	.+10     	; 0x87a0 <__fpcmp_parts_f+0xac>
    8796:	6f ef       	ldi	r22, 0xFF	; 255
    8798:	7f ef       	ldi	r23, 0xFF	; 255
    879a:	02 c0       	rjmp	.+4      	; 0x87a0 <__fpcmp_parts_f+0xac>
    879c:	60 e0       	ldi	r22, 0x00	; 0
    879e:	70 e0       	ldi	r23, 0x00	; 0
    87a0:	cb 01       	movw	r24, r22
    87a2:	1f 91       	pop	r17
    87a4:	08 95       	ret

000087a6 <calloc>:
    87a6:	0f 93       	push	r16
    87a8:	1f 93       	push	r17
    87aa:	cf 93       	push	r28
    87ac:	df 93       	push	r29
    87ae:	68 9f       	mul	r22, r24
    87b0:	80 01       	movw	r16, r0
    87b2:	69 9f       	mul	r22, r25
    87b4:	10 0d       	add	r17, r0
    87b6:	78 9f       	mul	r23, r24
    87b8:	10 0d       	add	r17, r0
    87ba:	11 24       	eor	r1, r1
    87bc:	c8 01       	movw	r24, r16
    87be:	0e 94 ef 43 	call	0x87de	; 0x87de <malloc>
    87c2:	ec 01       	movw	r28, r24
    87c4:	00 97       	sbiw	r24, 0x00	; 0
    87c6:	29 f0       	breq	.+10     	; 0x87d2 <calloc+0x2c>
    87c8:	60 e0       	ldi	r22, 0x00	; 0
    87ca:	70 e0       	ldi	r23, 0x00	; 0
    87cc:	a8 01       	movw	r20, r16
    87ce:	0e 94 fd 44 	call	0x89fa	; 0x89fa <memset>
    87d2:	ce 01       	movw	r24, r28
    87d4:	df 91       	pop	r29
    87d6:	cf 91       	pop	r28
    87d8:	1f 91       	pop	r17
    87da:	0f 91       	pop	r16
    87dc:	08 95       	ret

000087de <malloc>:
    87de:	cf 93       	push	r28
    87e0:	df 93       	push	r29
    87e2:	bc 01       	movw	r22, r24
    87e4:	82 30       	cpi	r24, 0x02	; 2
    87e6:	91 05       	cpc	r25, r1
    87e8:	10 f4       	brcc	.+4      	; 0x87ee <malloc+0x10>
    87ea:	62 e0       	ldi	r22, 0x02	; 2
    87ec:	70 e0       	ldi	r23, 0x00	; 0
    87ee:	a0 91 56 0c 	lds	r26, 0x0C56
    87f2:	b0 91 57 0c 	lds	r27, 0x0C57
    87f6:	ed 01       	movw	r28, r26
    87f8:	e0 e0       	ldi	r30, 0x00	; 0
    87fa:	f0 e0       	ldi	r31, 0x00	; 0
    87fc:	40 e0       	ldi	r20, 0x00	; 0
    87fe:	50 e0       	ldi	r21, 0x00	; 0
    8800:	21 c0       	rjmp	.+66     	; 0x8844 <malloc+0x66>
    8802:	88 81       	ld	r24, Y
    8804:	99 81       	ldd	r25, Y+1	; 0x01
    8806:	86 17       	cp	r24, r22
    8808:	97 07       	cpc	r25, r23
    880a:	69 f4       	brne	.+26     	; 0x8826 <malloc+0x48>
    880c:	8a 81       	ldd	r24, Y+2	; 0x02
    880e:	9b 81       	ldd	r25, Y+3	; 0x03
    8810:	30 97       	sbiw	r30, 0x00	; 0
    8812:	19 f0       	breq	.+6      	; 0x881a <malloc+0x3c>
    8814:	93 83       	std	Z+3, r25	; 0x03
    8816:	82 83       	std	Z+2, r24	; 0x02
    8818:	04 c0       	rjmp	.+8      	; 0x8822 <malloc+0x44>
    881a:	90 93 57 0c 	sts	0x0C57, r25
    881e:	80 93 56 0c 	sts	0x0C56, r24
    8822:	fe 01       	movw	r30, r28
    8824:	34 c0       	rjmp	.+104    	; 0x888e <malloc+0xb0>
    8826:	68 17       	cp	r22, r24
    8828:	79 07       	cpc	r23, r25
    882a:	38 f4       	brcc	.+14     	; 0x883a <malloc+0x5c>
    882c:	41 15       	cp	r20, r1
    882e:	51 05       	cpc	r21, r1
    8830:	19 f0       	breq	.+6      	; 0x8838 <malloc+0x5a>
    8832:	84 17       	cp	r24, r20
    8834:	95 07       	cpc	r25, r21
    8836:	08 f4       	brcc	.+2      	; 0x883a <malloc+0x5c>
    8838:	ac 01       	movw	r20, r24
    883a:	fe 01       	movw	r30, r28
    883c:	8a 81       	ldd	r24, Y+2	; 0x02
    883e:	9b 81       	ldd	r25, Y+3	; 0x03
    8840:	9c 01       	movw	r18, r24
    8842:	e9 01       	movw	r28, r18
    8844:	20 97       	sbiw	r28, 0x00	; 0
    8846:	e9 f6       	brne	.-70     	; 0x8802 <malloc+0x24>
    8848:	41 15       	cp	r20, r1
    884a:	51 05       	cpc	r21, r1
    884c:	a9 f1       	breq	.+106    	; 0x88b8 <malloc+0xda>
    884e:	ca 01       	movw	r24, r20
    8850:	86 1b       	sub	r24, r22
    8852:	97 0b       	sbc	r25, r23
    8854:	04 97       	sbiw	r24, 0x04	; 4
    8856:	08 f4       	brcc	.+2      	; 0x885a <malloc+0x7c>
    8858:	ba 01       	movw	r22, r20
    885a:	e0 e0       	ldi	r30, 0x00	; 0
    885c:	f0 e0       	ldi	r31, 0x00	; 0
    885e:	2a c0       	rjmp	.+84     	; 0x88b4 <malloc+0xd6>
    8860:	8d 91       	ld	r24, X+
    8862:	9c 91       	ld	r25, X
    8864:	11 97       	sbiw	r26, 0x01	; 1
    8866:	84 17       	cp	r24, r20
    8868:	95 07       	cpc	r25, r21
    886a:	f9 f4       	brne	.+62     	; 0x88aa <malloc+0xcc>
    886c:	64 17       	cp	r22, r20
    886e:	75 07       	cpc	r23, r21
    8870:	81 f4       	brne	.+32     	; 0x8892 <malloc+0xb4>
    8872:	12 96       	adiw	r26, 0x02	; 2
    8874:	8d 91       	ld	r24, X+
    8876:	9c 91       	ld	r25, X
    8878:	13 97       	sbiw	r26, 0x03	; 3
    887a:	30 97       	sbiw	r30, 0x00	; 0
    887c:	19 f0       	breq	.+6      	; 0x8884 <malloc+0xa6>
    887e:	93 83       	std	Z+3, r25	; 0x03
    8880:	82 83       	std	Z+2, r24	; 0x02
    8882:	04 c0       	rjmp	.+8      	; 0x888c <malloc+0xae>
    8884:	90 93 57 0c 	sts	0x0C57, r25
    8888:	80 93 56 0c 	sts	0x0C56, r24
    888c:	fd 01       	movw	r30, r26
    888e:	32 96       	adiw	r30, 0x02	; 2
    8890:	4f c0       	rjmp	.+158    	; 0x8930 <malloc+0x152>
    8892:	ca 01       	movw	r24, r20
    8894:	86 1b       	sub	r24, r22
    8896:	97 0b       	sbc	r25, r23
    8898:	fd 01       	movw	r30, r26
    889a:	e8 0f       	add	r30, r24
    889c:	f9 1f       	adc	r31, r25
    889e:	61 93       	st	Z+, r22
    88a0:	71 93       	st	Z+, r23
    88a2:	02 97       	sbiw	r24, 0x02	; 2
    88a4:	8d 93       	st	X+, r24
    88a6:	9c 93       	st	X, r25
    88a8:	43 c0       	rjmp	.+134    	; 0x8930 <malloc+0x152>
    88aa:	fd 01       	movw	r30, r26
    88ac:	82 81       	ldd	r24, Z+2	; 0x02
    88ae:	93 81       	ldd	r25, Z+3	; 0x03
    88b0:	9c 01       	movw	r18, r24
    88b2:	d9 01       	movw	r26, r18
    88b4:	10 97       	sbiw	r26, 0x00	; 0
    88b6:	a1 f6       	brne	.-88     	; 0x8860 <malloc+0x82>
    88b8:	80 91 54 0c 	lds	r24, 0x0C54
    88bc:	90 91 55 0c 	lds	r25, 0x0C55
    88c0:	89 2b       	or	r24, r25
    88c2:	41 f4       	brne	.+16     	; 0x88d4 <malloc+0xf6>
    88c4:	80 91 4c 03 	lds	r24, 0x034C
    88c8:	90 91 4d 03 	lds	r25, 0x034D
    88cc:	90 93 55 0c 	sts	0x0C55, r25
    88d0:	80 93 54 0c 	sts	0x0C54, r24
    88d4:	40 91 4e 03 	lds	r20, 0x034E
    88d8:	50 91 4f 03 	lds	r21, 0x034F
    88dc:	41 15       	cp	r20, r1
    88de:	51 05       	cpc	r21, r1
    88e0:	41 f4       	brne	.+16     	; 0x88f2 <malloc+0x114>
    88e2:	4d b7       	in	r20, 0x3d	; 61
    88e4:	5e b7       	in	r21, 0x3e	; 62
    88e6:	80 91 4a 03 	lds	r24, 0x034A
    88ea:	90 91 4b 03 	lds	r25, 0x034B
    88ee:	48 1b       	sub	r20, r24
    88f0:	59 0b       	sbc	r21, r25
    88f2:	20 91 54 0c 	lds	r18, 0x0C54
    88f6:	30 91 55 0c 	lds	r19, 0x0C55
    88fa:	24 17       	cp	r18, r20
    88fc:	35 07       	cpc	r19, r21
    88fe:	b0 f4       	brcc	.+44     	; 0x892c <malloc+0x14e>
    8900:	ca 01       	movw	r24, r20
    8902:	82 1b       	sub	r24, r18
    8904:	93 0b       	sbc	r25, r19
    8906:	86 17       	cp	r24, r22
    8908:	97 07       	cpc	r25, r23
    890a:	80 f0       	brcs	.+32     	; 0x892c <malloc+0x14e>
    890c:	ab 01       	movw	r20, r22
    890e:	4e 5f       	subi	r20, 0xFE	; 254
    8910:	5f 4f       	sbci	r21, 0xFF	; 255
    8912:	84 17       	cp	r24, r20
    8914:	95 07       	cpc	r25, r21
    8916:	50 f0       	brcs	.+20     	; 0x892c <malloc+0x14e>
    8918:	42 0f       	add	r20, r18
    891a:	53 1f       	adc	r21, r19
    891c:	50 93 55 0c 	sts	0x0C55, r21
    8920:	40 93 54 0c 	sts	0x0C54, r20
    8924:	f9 01       	movw	r30, r18
    8926:	61 93       	st	Z+, r22
    8928:	71 93       	st	Z+, r23
    892a:	02 c0       	rjmp	.+4      	; 0x8930 <malloc+0x152>
    892c:	e0 e0       	ldi	r30, 0x00	; 0
    892e:	f0 e0       	ldi	r31, 0x00	; 0
    8930:	cf 01       	movw	r24, r30
    8932:	df 91       	pop	r29
    8934:	cf 91       	pop	r28
    8936:	08 95       	ret

00008938 <free>:
    8938:	cf 93       	push	r28
    893a:	df 93       	push	r29
    893c:	00 97       	sbiw	r24, 0x00	; 0
    893e:	09 f4       	brne	.+2      	; 0x8942 <free+0xa>
    8940:	50 c0       	rjmp	.+160    	; 0x89e2 <free+0xaa>
    8942:	ec 01       	movw	r28, r24
    8944:	22 97       	sbiw	r28, 0x02	; 2
    8946:	1b 82       	std	Y+3, r1	; 0x03
    8948:	1a 82       	std	Y+2, r1	; 0x02
    894a:	a0 91 56 0c 	lds	r26, 0x0C56
    894e:	b0 91 57 0c 	lds	r27, 0x0C57
    8952:	10 97       	sbiw	r26, 0x00	; 0
    8954:	09 f1       	breq	.+66     	; 0x8998 <free+0x60>
    8956:	40 e0       	ldi	r20, 0x00	; 0
    8958:	50 e0       	ldi	r21, 0x00	; 0
    895a:	ac 17       	cp	r26, r28
    895c:	bd 07       	cpc	r27, r29
    895e:	08 f1       	brcs	.+66     	; 0x89a2 <free+0x6a>
    8960:	bb 83       	std	Y+3, r27	; 0x03
    8962:	aa 83       	std	Y+2, r26	; 0x02
    8964:	fe 01       	movw	r30, r28
    8966:	21 91       	ld	r18, Z+
    8968:	31 91       	ld	r19, Z+
    896a:	e2 0f       	add	r30, r18
    896c:	f3 1f       	adc	r31, r19
    896e:	ae 17       	cp	r26, r30
    8970:	bf 07       	cpc	r27, r31
    8972:	79 f4       	brne	.+30     	; 0x8992 <free+0x5a>
    8974:	8d 91       	ld	r24, X+
    8976:	9c 91       	ld	r25, X
    8978:	11 97       	sbiw	r26, 0x01	; 1
    897a:	28 0f       	add	r18, r24
    897c:	39 1f       	adc	r19, r25
    897e:	2e 5f       	subi	r18, 0xFE	; 254
    8980:	3f 4f       	sbci	r19, 0xFF	; 255
    8982:	39 83       	std	Y+1, r19	; 0x01
    8984:	28 83       	st	Y, r18
    8986:	12 96       	adiw	r26, 0x02	; 2
    8988:	8d 91       	ld	r24, X+
    898a:	9c 91       	ld	r25, X
    898c:	13 97       	sbiw	r26, 0x03	; 3
    898e:	9b 83       	std	Y+3, r25	; 0x03
    8990:	8a 83       	std	Y+2, r24	; 0x02
    8992:	41 15       	cp	r20, r1
    8994:	51 05       	cpc	r21, r1
    8996:	71 f4       	brne	.+28     	; 0x89b4 <free+0x7c>
    8998:	d0 93 57 0c 	sts	0x0C57, r29
    899c:	c0 93 56 0c 	sts	0x0C56, r28
    89a0:	20 c0       	rjmp	.+64     	; 0x89e2 <free+0xaa>
    89a2:	12 96       	adiw	r26, 0x02	; 2
    89a4:	8d 91       	ld	r24, X+
    89a6:	9c 91       	ld	r25, X
    89a8:	13 97       	sbiw	r26, 0x03	; 3
    89aa:	ad 01       	movw	r20, r26
    89ac:	00 97       	sbiw	r24, 0x00	; 0
    89ae:	11 f0       	breq	.+4      	; 0x89b4 <free+0x7c>
    89b0:	dc 01       	movw	r26, r24
    89b2:	d3 cf       	rjmp	.-90     	; 0x895a <free+0x22>
    89b4:	fa 01       	movw	r30, r20
    89b6:	d3 83       	std	Z+3, r29	; 0x03
    89b8:	c2 83       	std	Z+2, r28	; 0x02
    89ba:	21 91       	ld	r18, Z+
    89bc:	31 91       	ld	r19, Z+
    89be:	e2 0f       	add	r30, r18
    89c0:	f3 1f       	adc	r31, r19
    89c2:	ce 17       	cp	r28, r30
    89c4:	df 07       	cpc	r29, r31
    89c6:	69 f4       	brne	.+26     	; 0x89e2 <free+0xaa>
    89c8:	88 81       	ld	r24, Y
    89ca:	99 81       	ldd	r25, Y+1	; 0x01
    89cc:	28 0f       	add	r18, r24
    89ce:	39 1f       	adc	r19, r25
    89d0:	2e 5f       	subi	r18, 0xFE	; 254
    89d2:	3f 4f       	sbci	r19, 0xFF	; 255
    89d4:	fa 01       	movw	r30, r20
    89d6:	31 83       	std	Z+1, r19	; 0x01
    89d8:	20 83       	st	Z, r18
    89da:	8a 81       	ldd	r24, Y+2	; 0x02
    89dc:	9b 81       	ldd	r25, Y+3	; 0x03
    89de:	93 83       	std	Z+3, r25	; 0x03
    89e0:	82 83       	std	Z+2, r24	; 0x02
    89e2:	df 91       	pop	r29
    89e4:	cf 91       	pop	r28
    89e6:	08 95       	ret

000089e8 <memcpy>:
    89e8:	fb 01       	movw	r30, r22
    89ea:	dc 01       	movw	r26, r24
    89ec:	02 c0       	rjmp	.+4      	; 0x89f2 <memcpy+0xa>
    89ee:	01 90       	ld	r0, Z+
    89f0:	0d 92       	st	X+, r0
    89f2:	41 50       	subi	r20, 0x01	; 1
    89f4:	50 40       	sbci	r21, 0x00	; 0
    89f6:	d8 f7       	brcc	.-10     	; 0x89ee <memcpy+0x6>
    89f8:	08 95       	ret

000089fa <memset>:
    89fa:	dc 01       	movw	r26, r24
    89fc:	01 c0       	rjmp	.+2      	; 0x8a00 <memset+0x6>
    89fe:	6d 93       	st	X+, r22
    8a00:	41 50       	subi	r20, 0x01	; 1
    8a02:	50 40       	sbci	r21, 0x00	; 0
    8a04:	e0 f7       	brcc	.-8      	; 0x89fe <memset+0x4>
    8a06:	08 95       	ret

00008a08 <strcpy>:
    8a08:	fb 01       	movw	r30, r22
    8a0a:	dc 01       	movw	r26, r24
    8a0c:	01 90       	ld	r0, Z+
    8a0e:	0d 92       	st	X+, r0
    8a10:	00 20       	and	r0, r0
    8a12:	e1 f7       	brne	.-8      	; 0x8a0c <strcpy+0x4>
    8a14:	08 95       	ret

00008a16 <strlen>:
    8a16:	fc 01       	movw	r30, r24
    8a18:	01 90       	ld	r0, Z+
    8a1a:	00 20       	and	r0, r0
    8a1c:	e9 f7       	brne	.-6      	; 0x8a18 <strlen+0x2>
    8a1e:	80 95       	com	r24
    8a20:	90 95       	com	r25
    8a22:	8e 0f       	add	r24, r30
    8a24:	9f 1f       	adc	r25, r31
    8a26:	08 95       	ret

00008a28 <itoa>:
    8a28:	fb 01       	movw	r30, r22
    8a2a:	9f 01       	movw	r18, r30
    8a2c:	e8 94       	clt
    8a2e:	42 30       	cpi	r20, 0x02	; 2
    8a30:	c4 f0       	brlt	.+48     	; 0x8a62 <itoa+0x3a>
    8a32:	45 32       	cpi	r20, 0x25	; 37
    8a34:	b4 f4       	brge	.+44     	; 0x8a62 <itoa+0x3a>
    8a36:	4a 30       	cpi	r20, 0x0A	; 10
    8a38:	29 f4       	brne	.+10     	; 0x8a44 <itoa+0x1c>
    8a3a:	97 fb       	bst	r25, 7
    8a3c:	1e f4       	brtc	.+6      	; 0x8a44 <itoa+0x1c>
    8a3e:	90 95       	com	r25
    8a40:	81 95       	neg	r24
    8a42:	9f 4f       	sbci	r25, 0xFF	; 255
    8a44:	64 2f       	mov	r22, r20
    8a46:	77 27       	eor	r23, r23
    8a48:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__udivmodhi4>
    8a4c:	80 5d       	subi	r24, 0xD0	; 208
    8a4e:	8a 33       	cpi	r24, 0x3A	; 58
    8a50:	0c f0       	brlt	.+2      	; 0x8a54 <itoa+0x2c>
    8a52:	89 5d       	subi	r24, 0xD9	; 217
    8a54:	81 93       	st	Z+, r24
    8a56:	cb 01       	movw	r24, r22
    8a58:	00 97       	sbiw	r24, 0x00	; 0
    8a5a:	a1 f7       	brne	.-24     	; 0x8a44 <itoa+0x1c>
    8a5c:	16 f4       	brtc	.+4      	; 0x8a62 <itoa+0x3a>
    8a5e:	5d e2       	ldi	r21, 0x2D	; 45
    8a60:	51 93       	st	Z+, r21
    8a62:	10 82       	st	Z, r1
    8a64:	c9 01       	movw	r24, r18
    8a66:	0c 94 35 45 	jmp	0x8a6a	; 0x8a6a <strrev>

00008a6a <strrev>:
    8a6a:	dc 01       	movw	r26, r24
    8a6c:	fc 01       	movw	r30, r24
    8a6e:	67 2f       	mov	r22, r23
    8a70:	71 91       	ld	r23, Z+
    8a72:	77 23       	and	r23, r23
    8a74:	e1 f7       	brne	.-8      	; 0x8a6e <strrev+0x4>
    8a76:	32 97       	sbiw	r30, 0x02	; 2
    8a78:	04 c0       	rjmp	.+8      	; 0x8a82 <strrev+0x18>
    8a7a:	7c 91       	ld	r23, X
    8a7c:	6d 93       	st	X+, r22
    8a7e:	70 83       	st	Z, r23
    8a80:	62 91       	ld	r22, -Z
    8a82:	ae 17       	cp	r26, r30
    8a84:	bf 07       	cpc	r27, r31
    8a86:	c8 f3       	brcs	.-14     	; 0x8a7a <strrev+0x10>
    8a88:	08 95       	ret

00008a8a <__udivmodhi4>:
    8a8a:	aa 1b       	sub	r26, r26
    8a8c:	bb 1b       	sub	r27, r27
    8a8e:	51 e1       	ldi	r21, 0x11	; 17
    8a90:	07 c0       	rjmp	.+14     	; 0x8aa0 <__udivmodhi4_ep>

00008a92 <__udivmodhi4_loop>:
    8a92:	aa 1f       	adc	r26, r26
    8a94:	bb 1f       	adc	r27, r27
    8a96:	a6 17       	cp	r26, r22
    8a98:	b7 07       	cpc	r27, r23
    8a9a:	10 f0       	brcs	.+4      	; 0x8aa0 <__udivmodhi4_ep>
    8a9c:	a6 1b       	sub	r26, r22
    8a9e:	b7 0b       	sbc	r27, r23

00008aa0 <__udivmodhi4_ep>:
    8aa0:	88 1f       	adc	r24, r24
    8aa2:	99 1f       	adc	r25, r25
    8aa4:	5a 95       	dec	r21
    8aa6:	a9 f7       	brne	.-22     	; 0x8a92 <__udivmodhi4_loop>
    8aa8:	80 95       	com	r24
    8aaa:	90 95       	com	r25
    8aac:	bc 01       	movw	r22, r24
    8aae:	cd 01       	movw	r24, r26
    8ab0:	08 95       	ret

00008ab2 <__divmodhi4>:
    8ab2:	97 fb       	bst	r25, 7
    8ab4:	09 2e       	mov	r0, r25
    8ab6:	07 26       	eor	r0, r23
    8ab8:	0a d0       	rcall	.+20     	; 0x8ace <__divmodhi4_neg1>
    8aba:	77 fd       	sbrc	r23, 7
    8abc:	04 d0       	rcall	.+8      	; 0x8ac6 <__divmodhi4_neg2>
    8abe:	e5 df       	rcall	.-54     	; 0x8a8a <__udivmodhi4>
    8ac0:	06 d0       	rcall	.+12     	; 0x8ace <__divmodhi4_neg1>
    8ac2:	00 20       	and	r0, r0
    8ac4:	1a f4       	brpl	.+6      	; 0x8acc <__divmodhi4_exit>

00008ac6 <__divmodhi4_neg2>:
    8ac6:	70 95       	com	r23
    8ac8:	61 95       	neg	r22
    8aca:	7f 4f       	sbci	r23, 0xFF	; 255

00008acc <__divmodhi4_exit>:
    8acc:	08 95       	ret

00008ace <__divmodhi4_neg1>:
    8ace:	f6 f7       	brtc	.-4      	; 0x8acc <__divmodhi4_exit>
    8ad0:	90 95       	com	r25
    8ad2:	81 95       	neg	r24
    8ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ad6:	08 95       	ret

00008ad8 <__mulsi3>:
    8ad8:	62 9f       	mul	r22, r18
    8ada:	d0 01       	movw	r26, r0
    8adc:	73 9f       	mul	r23, r19
    8ade:	f0 01       	movw	r30, r0
    8ae0:	82 9f       	mul	r24, r18
    8ae2:	e0 0d       	add	r30, r0
    8ae4:	f1 1d       	adc	r31, r1
    8ae6:	64 9f       	mul	r22, r20
    8ae8:	e0 0d       	add	r30, r0
    8aea:	f1 1d       	adc	r31, r1
    8aec:	92 9f       	mul	r25, r18
    8aee:	f0 0d       	add	r31, r0
    8af0:	83 9f       	mul	r24, r19
    8af2:	f0 0d       	add	r31, r0
    8af4:	74 9f       	mul	r23, r20
    8af6:	f0 0d       	add	r31, r0
    8af8:	65 9f       	mul	r22, r21
    8afa:	f0 0d       	add	r31, r0
    8afc:	99 27       	eor	r25, r25
    8afe:	72 9f       	mul	r23, r18
    8b00:	b0 0d       	add	r27, r0
    8b02:	e1 1d       	adc	r30, r1
    8b04:	f9 1f       	adc	r31, r25
    8b06:	63 9f       	mul	r22, r19
    8b08:	b0 0d       	add	r27, r0
    8b0a:	e1 1d       	adc	r30, r1
    8b0c:	f9 1f       	adc	r31, r25
    8b0e:	bd 01       	movw	r22, r26
    8b10:	cf 01       	movw	r24, r30
    8b12:	11 24       	eor	r1, r1
    8b14:	08 95       	ret

00008b16 <__udivmodsi4>:
    8b16:	a1 e2       	ldi	r26, 0x21	; 33
    8b18:	1a 2e       	mov	r1, r26
    8b1a:	aa 1b       	sub	r26, r26
    8b1c:	bb 1b       	sub	r27, r27
    8b1e:	fd 01       	movw	r30, r26
    8b20:	0d c0       	rjmp	.+26     	; 0x8b3c <__udivmodsi4_ep>

00008b22 <__udivmodsi4_loop>:
    8b22:	aa 1f       	adc	r26, r26
    8b24:	bb 1f       	adc	r27, r27
    8b26:	ee 1f       	adc	r30, r30
    8b28:	ff 1f       	adc	r31, r31
    8b2a:	a2 17       	cp	r26, r18
    8b2c:	b3 07       	cpc	r27, r19
    8b2e:	e4 07       	cpc	r30, r20
    8b30:	f5 07       	cpc	r31, r21
    8b32:	20 f0       	brcs	.+8      	; 0x8b3c <__udivmodsi4_ep>
    8b34:	a2 1b       	sub	r26, r18
    8b36:	b3 0b       	sbc	r27, r19
    8b38:	e4 0b       	sbc	r30, r20
    8b3a:	f5 0b       	sbc	r31, r21

00008b3c <__udivmodsi4_ep>:
    8b3c:	66 1f       	adc	r22, r22
    8b3e:	77 1f       	adc	r23, r23
    8b40:	88 1f       	adc	r24, r24
    8b42:	99 1f       	adc	r25, r25
    8b44:	1a 94       	dec	r1
    8b46:	69 f7       	brne	.-38     	; 0x8b22 <__udivmodsi4_loop>
    8b48:	60 95       	com	r22
    8b4a:	70 95       	com	r23
    8b4c:	80 95       	com	r24
    8b4e:	90 95       	com	r25
    8b50:	9b 01       	movw	r18, r22
    8b52:	ac 01       	movw	r20, r24
    8b54:	bd 01       	movw	r22, r26
    8b56:	cf 01       	movw	r24, r30
    8b58:	08 95       	ret

00008b5a <__prologue_saves__>:
    8b5a:	2f 92       	push	r2
    8b5c:	3f 92       	push	r3
    8b5e:	4f 92       	push	r4
    8b60:	5f 92       	push	r5
    8b62:	6f 92       	push	r6
    8b64:	7f 92       	push	r7
    8b66:	8f 92       	push	r8
    8b68:	9f 92       	push	r9
    8b6a:	af 92       	push	r10
    8b6c:	bf 92       	push	r11
    8b6e:	cf 92       	push	r12
    8b70:	df 92       	push	r13
    8b72:	ef 92       	push	r14
    8b74:	ff 92       	push	r15
    8b76:	0f 93       	push	r16
    8b78:	1f 93       	push	r17
    8b7a:	cf 93       	push	r28
    8b7c:	df 93       	push	r29
    8b7e:	cd b7       	in	r28, 0x3d	; 61
    8b80:	de b7       	in	r29, 0x3e	; 62
    8b82:	ca 1b       	sub	r28, r26
    8b84:	db 0b       	sbc	r29, r27
    8b86:	0f b6       	in	r0, 0x3f	; 63
    8b88:	f8 94       	cli
    8b8a:	de bf       	out	0x3e, r29	; 62
    8b8c:	0f be       	out	0x3f, r0	; 63
    8b8e:	cd bf       	out	0x3d, r28	; 61
    8b90:	19 94       	eijmp

00008b92 <__epilogue_restores__>:
    8b92:	2a 88       	ldd	r2, Y+18	; 0x12
    8b94:	39 88       	ldd	r3, Y+17	; 0x11
    8b96:	48 88       	ldd	r4, Y+16	; 0x10
    8b98:	5f 84       	ldd	r5, Y+15	; 0x0f
    8b9a:	6e 84       	ldd	r6, Y+14	; 0x0e
    8b9c:	7d 84       	ldd	r7, Y+13	; 0x0d
    8b9e:	8c 84       	ldd	r8, Y+12	; 0x0c
    8ba0:	9b 84       	ldd	r9, Y+11	; 0x0b
    8ba2:	aa 84       	ldd	r10, Y+10	; 0x0a
    8ba4:	b9 84       	ldd	r11, Y+9	; 0x09
    8ba6:	c8 84       	ldd	r12, Y+8	; 0x08
    8ba8:	df 80       	ldd	r13, Y+7	; 0x07
    8baa:	ee 80       	ldd	r14, Y+6	; 0x06
    8bac:	fd 80       	ldd	r15, Y+5	; 0x05
    8bae:	0c 81       	ldd	r16, Y+4	; 0x04
    8bb0:	1b 81       	ldd	r17, Y+3	; 0x03
    8bb2:	aa 81       	ldd	r26, Y+2	; 0x02
    8bb4:	b9 81       	ldd	r27, Y+1	; 0x01
    8bb6:	ce 0f       	add	r28, r30
    8bb8:	d1 1d       	adc	r29, r1
    8bba:	0f b6       	in	r0, 0x3f	; 63
    8bbc:	f8 94       	cli
    8bbe:	de bf       	out	0x3e, r29	; 62
    8bc0:	0f be       	out	0x3f, r0	; 63
    8bc2:	cd bf       	out	0x3d, r28	; 61
    8bc4:	ed 01       	movw	r28, r26
    8bc6:	08 95       	ret

00008bc8 <_exit>:
    8bc8:	f8 94       	cli

00008bca <__stop_program>:
    8bca:	ff cf       	rjmp	.-2      	; 0x8bca <__stop_program>
